{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "run/DPAPImk2john.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "run/ccl_chrome_indexeddb/ccl_simplesnappy.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "run/dns/hash.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "run/keplr2john.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "run/mosquitto2john.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "run/netscreen.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "run/pkcs12kdf.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "run/ps_token2john.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "run/telegram2john.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "run/tezos2john.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "run/dns/tsig.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 297,
            "startColumn" : 63,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 295,
            "endLine" : 299,
            "snippet" : {
              "text" : "        U = salt + struct.pack(\"!L\", i)\n        i += 1\n        derived = bytearray(hmac.new(passphrase, U, digestmod=lambda: hashlib.new(digest)).digest())\n        for r in range(iterations - 1):\n            actual = bytearray(hmac.new(passphrase, derived, digestmod=lambda: hashlib.new(digest)).digest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d87b8f09f6f32b9f:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 299,
            "startColumn" : 72,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 297,
            "endLine" : 301,
            "snippet" : {
              "text" : "        derived = bytearray(hmac.new(passphrase, U, digestmod=lambda: hashlib.new(digest)).digest())\n        for r in range(iterations - 1):\n            actual = bytearray(hmac.new(passphrase, derived, digestmod=lambda: hashlib.new(digest)).digest())\n            derived = bytearray([x ^ y for (x, y) in zip(derived, actual)])\n        buff += derived\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ee5fb3531bca606:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 314,
            "startColumn" : 63,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 312,
            "endLine" : 316,
            "snippet" : {
              "text" : "        U = salt + struct.pack(\"!L\", i)\n        i += 1\n        derived = bytearray(hmac.new(passphrase, U, digestmod=lambda: hashlib.new(digest)).digest())\n        actual = derived\n        for r in range(iterations - 1):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb5710112a4ffe1f:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 317,
            "startColumn" : 71,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 315,
            "endLine" : 319,
            "snippet" : {
              "text" : "        actual = derived\n        for r in range(iterations - 1):\n            actual = bytearray(hmac.new(passphrase, actual, digestmod=lambda: hashlib.new(digest)).digest())\n            derived = bytearray([x ^ y for (x, y) in zip(derived, actual)])\n        buff += derived\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8b9fe5db882d0b6:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 77,
            "endColumn" : 104
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "def derivePwdHash(pwdhash, userSID, digest='sha1'):\n    \"\"\"Internal use. Computes the encryption key from a user's password hash\"\"\"\n    return hmac.new(pwdhash, (userSID + \"\\0\").encode(\"UTF-16LE\"), digestmod=lambda: hashlib.new(digest)).digest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "796133aef4d335fb:1",
        "primaryLocationStartColumnFingerprint" : "72"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 341,
            "startColumn" : 13,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 339,
            "endLine" : 343,
            "snippet" : {
              "text" : "def DPAPIHmac(hashAlgo, pwdhash, hmacSalt, value):\n    \"\"\"Internal function used to compute HMACs of DPAPI structures\"\"\"\n    hname = {\"HMAC\": \"sha1\"}.get(hashAlgo.name, hashAlgo.name)\n    encKey = hmac.new(pwdhash, digestmod=lambda: hashlib.new(hname))\n    encKey.update(hmacSalt)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86e627c54a15c253:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 342,
            "startColumn" : 42,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 340,
            "endLine" : 344,
            "snippet" : {
              "text" : "    \"\"\"Internal function used to compute HMACs of DPAPI structures\"\"\"\n    hname = {\"HMAC\": \"sha1\"}.get(hashAlgo.name, hashAlgo.name)\n    encKey = hmac.new(pwdhash, digestmod=lambda: hashlib.new(hname))\n    encKey.update(hmacSalt)\n    encKey = encKey.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "694f4fe913759315:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 345,
            "startColumn" : 37,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 343,
            "endLine" : 347,
            "snippet" : {
              "text" : "    encKey.update(hmacSalt)\n    encKey = encKey.digest()\n    rv = hmac.new(encKey, digestmod=lambda: hashlib.new(hname))\n    rv.update(value)\n    return rv.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3ad5ef717dbb6462:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 451,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 449,
            "endLine" : 453,
            "snippet" : {
              "text" : "        self.decrypted = True\n        self.key = data\n        self.key_hash = hashlib.sha1(data).digest()\n\n    def decryptWithKey(self, pwdhash):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a66b5575ad46aef:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 549,
            "startColumn" : 55,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 547,
            "endLine" : 551,
            "snippet" : {
              "text" : "        algo = None\n        if context == \"domain1607-\" or context == \"domain\":\n            self.decryptWithHash(userSID, hashlib.new(\"md4\", pwd.encode('UTF-16LE')).digest())\n            if self.decrypted:\n                print(\"Decrypted succesfully as domain1607-\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8980a6bf87c2bd4e:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 555,
            "startColumn" : 36,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 553,
            "endLine" : 557,
            "snippet" : {
              "text" : "        if context == \"domain1607+\" or context == \"domain\":\n            SIDenc = userSID.encode(\"UTF-16LE\")\n            NTLMhash = hashlib.new(\"md4\", pwd.encode('UTF-16LE')).digest()\n            derived = pbkdf2(NTLMhash, SIDenc, 32, 10000, digest='sha256')\n            derived = pbkdf2(derived, SIDenc, 16, 1, digest='sha256')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d30bcfc1bba3c40:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 563,
            "startColumn" : 55,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 561,
            "endLine" : 565,
            "snippet" : {
              "text" : "                return\n        if context == \"local\":\n            self.decryptWithHash(userSID, hashlib.new(\"sha1\", pwd.encode('UTF-16LE')).digest())\n\n    def __repr__(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87ad9eb69c8a0fd4:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 284,
            "startColumn" : 60,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 282,
            "endLine" : 286,
            "snippet" : {
              "text" : "CryptoAlgo.add_algo(0x800e, name=\"sha512\", digestLength=512, blockLength=1024)\n\ndef pbkdf2_ms(passphrase, salt, keylen, iterations, digest='sha1'):\n    \"\"\"Implementation of PBKDF2 that allows specifying digest algorithm.\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb3603469e64e84c:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 304,
            "startColumn" : 57,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 302,
            "endLine" : 306,
            "snippet" : {
              "text" : "    return bytes(buff[:keylen])\n\ndef pbkdf2(passphrase, salt, keylen, iterations, digest='sha1'):\n    \"\"\"Implementation of PBKDF2 that allows specifying digest algorithm.\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cfae043cf5a8bca2:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 322,
            "startColumn" : 44,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 320,
            "endLine" : 324,
            "snippet" : {
              "text" : "    return bytes(buff[:keylen])\n\ndef derivePwdHash(pwdhash, userSID, digest='sha1'):\n    \"\"\"Internal use. Computes the encryption key from a user's password hash\"\"\"\n    return hmac.new(pwdhash, (userSID + \"\\0\").encode(\"UTF-16LE\"), digestmod=lambda: hashlib.new(digest)).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f398d3707b75845:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/ccl_chrome_indexeddb/ccl_simplesnappy.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 190,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 188,
            "endLine" : 192,
            "snippet" : {
              "text" : "    decompressed = decompress(f)\n    print(decompressed)\n    sha1 = hashlib.sha1()\n    sha1.update(decompressed)\n    print(sha1.hexdigest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3619822f825611cf:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "\nhashes = {}\nhashes['MD5'] = hashlib.md5\nhashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51131a6ac3ed3fbb:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "hashes = {}\nhashes['MD5'] = hashlib.md5\nhashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acace6c6b1de01d8:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "hashes['MD5'] = hashlib.md5\nhashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7ad6329d89c2b4da:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "hashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\nhashes['SHA512'] = hashlib.sha512\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9ef6f5b5e40523ff:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "hashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\nhashes['SHA512'] = hashlib.sha512\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "347d7a8a4576145:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 25,
            "endLine" : 29,
            "snippet" : {
              "text" : "hashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\nhashes['SHA512'] = hashlib.sha512\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "815a039f6ead9688:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/keplr2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 232,
            "startColumn" : 26,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 230,
            "endLine" : 234,
            "snippet" : {
              "text" : "        derived_key = scrypt.hash(password=password_str.encode('utf_8'), salt=bytes.fromhex(salt_hex), N=131072, r=8, p=1, buflen=32)\n        ciphertext_bytes = bytes.fromhex(ciphertext_hex)\n        calculated_mac = hashlib.sha256(derived_key[16:] + ciphertext_bytes).hexdigest()\n        \n        # Try to decrypt data\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6fde0455e9b1f61:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/mosquitto2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 34,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 13,
            "snippet" : {
              "text" : "import re, argparse\n\nfrom hashlib import pbkdf2_hmac, sha512\nfrom base64 import b64encode, b64decode\nfrom sys import exit, argv, stderr, stdout\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6ca2922300f6b03:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/netscreen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 66,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 64,
            "endLine" : 68,
            "snippet" : {
              "text" : "  else:\n    import hashlib\n    m = hashlib.md5(s.encode('latin_1')).digest()\n\n  narray = []\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4770a65f8b4bc4e9:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/pkcs12kdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 78,
            "startColumn" : 37,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 76,
            "endLine" : 80,
            "snippet" : {
              "text" : "            raise(\"Hash function: \"+self._hash_algorithm+\" not available\")\n\n        hash_function = hashlib.new(self._hash_algorithm)\n\n        #\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "53f452d5793675c2:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/pkcs12kdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 41,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "            #\n\n            hash_function = hashlib.new(self._hash_algorithm)\n            hash_function.update(bytearray(D))\n            hash_function.update(bytearray(I))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "93b52e71103ccfde:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/pkcs12kdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "\n            for j in range(1, r):\n                hash_function = hashlib.sha256()\n                hash_function.update(Ai)\n                Ai = hash_function.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2cc726866f611fa8:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/ps_token2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "\n# parsing of compressed data\ndata_hash = hashlib.sha1(data).hexdigest()\n\nuser_length = data[20]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3167bab0b759e628:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 134,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 132,
            "endLine" : 136,
            "snippet" : {
              "text" : "    data_d = checksum    + key[104:136]\n\n    sha1_a = hashlib.sha1(data_a).digest()\n    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "62c6fe88bd0c75b0:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 135,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 133,
            "endLine" : 137,
            "snippet" : {
              "text" : "\n    sha1_a = hashlib.sha1(data_a).digest()\n    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n    sha1_d = hashlib.sha1(data_d).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7cde073b5e11631e:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 136,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 134,
            "endLine" : 138,
            "snippet" : {
              "text" : "    sha1_a = hashlib.sha1(data_a).digest()\n    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n    sha1_d = hashlib.sha1(data_d).digest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe80dfc8824ce818:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 137,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 135,
            "endLine" : 139,
            "snippet" : {
              "text" : "    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n    sha1_d = hashlib.sha1(data_d).digest()\n\n    aes_key = sha1_a[0: 8] + sha1_b[8:20] + sha1_c[ 4:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "187522f31d4ceb31:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 144,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 142,
            "endLine" : 146,
            "snippet" : {
              "text" : "    decrypted = aes_ige_decrypt(aes_data, aes_key, aes_iv)\n\n    digest = hashlib.sha1(decrypted).digest()\n\n    digest = digest[0:16] # only first 16 bytes are used\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d31ed102f8427df5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 31,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "    data = binascii.unhexlify(data_hex)\n\n    key = hashlib.pbkdf2_hmac('SHA1', b'', salt, LocalEncryptNoPwdIterCount, 136)\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a9931da0a6c785a:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 11,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "    data = binascii.unhexlify(data_hex)\n\n    key = hashlib.pbkdf2_hmac('SHA1', b'', salt, LocalEncryptNoPwdIterCount, 136)\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a9931da0a6c785a:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "    data = binascii.unhexlify(data_hex)\n\n    pass_hash = hashlib.sha512(salt + salt).digest() # password is empty in sha512(s + p + s)\n\n    key = hashlib.pbkdf2_hmac('SHA512', pass_hash, salt, 1, 136) # only 1 iteration\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "71d09dea2e61c7f4:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 31,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "    pass_hash = hashlib.sha512(salt + salt).digest() # password is empty in sha512(s + p + s)\n\n    key = hashlib.pbkdf2_hmac('SHA512', pass_hash, salt, 1, 136) # only 1 iteration\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bdd808fef7a57a9:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 11,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "    pass_hash = hashlib.sha512(salt + salt).digest() # password is empty in sha512(s + p + s)\n\n    key = hashlib.pbkdf2_hmac('SHA512', pass_hash, salt, 1, 136) # only 1 iteration\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bdd808fef7a57a9:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 213,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 211,
            "endLine" : 215,
            "snippet" : {
              "text" : "    checksum = data[-16:]\n    len_bytes = struct.pack(\"<I\", len(actual_data))\n    calculated_checksum = hashlib.md5(actual_data + len_bytes + version + magic).digest()\n\n    f.close()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a65cb37c032c987f:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/tezos2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 143,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 141,
            "endLine" : 145,
            "snippet" : {
              "text" : "def bin_dbl_sha256(s):\n    bytes_to_hash = from_string_to_bytes(s)\n    return hashlib.sha256(hashlib.sha256(bytes_to_hash).digest()).digest()\n\ndef lpad(msg, symbol, length):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3864c449fcb8c01:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/tezos2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 143,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 141,
            "endLine" : 145,
            "snippet" : {
              "text" : "def bin_dbl_sha256(s):\n    bytes_to_hash = from_string_to_bytes(s)\n    return hashlib.sha256(hashlib.sha256(bytes_to_hash).digest()).digest()\n\ndef lpad(msg, symbol, length):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3864c449fcb8c01:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/tezos2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 250,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 248,
            "endLine" : 252,
            "snippet" : {
              "text" : "\n    binaryRepresentationOfBody = binascii.unhexlify(hex(int(seedWordBody, 2))[2:].zfill(lenOfChecksum * 8))\n    generatedChecksum = bin(int(hashlib.sha256(binaryRepresentationOfBody).hexdigest(), 16))[2:].zfill(256)[: lenOfChecksum]\n\n    if generatedChecksum != seedWordChecksum:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "50bbb07e46ceed23:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 15,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "    (algorithm_name, digestmod) = get_algorithm(algorithm)\n    if first:\n        ctx = hmac.new(secret, digestmod=digestmod)\n        ml = len(request_mac)\n        if ml > 0:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "17dbfd039725c239:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 166,
            "startColumn" : 15,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 164,
            "endLine" : 168,
            "snippet" : {
              "text" : "    tsig_rdata = pre_mac + mpack + mac + id + post_mac\n    if multi:  # XXX unhandled currently!\n        ctx = hmac.new(secret, digestmod=digestmod)\n        ml = len(mac)\n        ctx.update(struct.pack('!H', ml))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "88ecfa85b8257fef:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 297,
            "startColumn" : 63,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 295,
            "endLine" : 299,
            "snippet" : {
              "text" : "        U = salt + struct.pack(\"!L\", i)\n        i += 1\n        derived = bytearray(hmac.new(passphrase, U, digestmod=lambda: hashlib.new(digest)).digest())\n        for r in range(iterations - 1):\n            actual = bytearray(hmac.new(passphrase, derived, digestmod=lambda: hashlib.new(digest)).digest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d87b8f09f6f32b9f:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 299,
            "startColumn" : 72,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 297,
            "endLine" : 301,
            "snippet" : {
              "text" : "        derived = bytearray(hmac.new(passphrase, U, digestmod=lambda: hashlib.new(digest)).digest())\n        for r in range(iterations - 1):\n            actual = bytearray(hmac.new(passphrase, derived, digestmod=lambda: hashlib.new(digest)).digest())\n            derived = bytearray([x ^ y for (x, y) in zip(derived, actual)])\n        buff += derived\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ee5fb3531bca606:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 314,
            "startColumn" : 63,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 312,
            "endLine" : 316,
            "snippet" : {
              "text" : "        U = salt + struct.pack(\"!L\", i)\n        i += 1\n        derived = bytearray(hmac.new(passphrase, U, digestmod=lambda: hashlib.new(digest)).digest())\n        actual = derived\n        for r in range(iterations - 1):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb5710112a4ffe1f:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 317,
            "startColumn" : 71,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 315,
            "endLine" : 319,
            "snippet" : {
              "text" : "        actual = derived\n        for r in range(iterations - 1):\n            actual = bytearray(hmac.new(passphrase, actual, digestmod=lambda: hashlib.new(digest)).digest())\n            derived = bytearray([x ^ y for (x, y) in zip(derived, actual)])\n        buff += derived\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8b9fe5db882d0b6:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 77,
            "endColumn" : 104
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "def derivePwdHash(pwdhash, userSID, digest='sha1'):\n    \"\"\"Internal use. Computes the encryption key from a user's password hash\"\"\"\n    return hmac.new(pwdhash, (userSID + \"\\0\").encode(\"UTF-16LE\"), digestmod=lambda: hashlib.new(digest)).digest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "796133aef4d335fb:1",
        "primaryLocationStartColumnFingerprint" : "72"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 341,
            "startColumn" : 13,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 339,
            "endLine" : 343,
            "snippet" : {
              "text" : "def DPAPIHmac(hashAlgo, pwdhash, hmacSalt, value):\n    \"\"\"Internal function used to compute HMACs of DPAPI structures\"\"\"\n    hname = {\"HMAC\": \"sha1\"}.get(hashAlgo.name, hashAlgo.name)\n    encKey = hmac.new(pwdhash, digestmod=lambda: hashlib.new(hname))\n    encKey.update(hmacSalt)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86e627c54a15c253:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 342,
            "startColumn" : 42,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 340,
            "endLine" : 344,
            "snippet" : {
              "text" : "    \"\"\"Internal function used to compute HMACs of DPAPI structures\"\"\"\n    hname = {\"HMAC\": \"sha1\"}.get(hashAlgo.name, hashAlgo.name)\n    encKey = hmac.new(pwdhash, digestmod=lambda: hashlib.new(hname))\n    encKey.update(hmacSalt)\n    encKey = encKey.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "694f4fe913759315:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 345,
            "startColumn" : 37,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 343,
            "endLine" : 347,
            "snippet" : {
              "text" : "    encKey.update(hmacSalt)\n    encKey = encKey.digest()\n    rv = hmac.new(encKey, digestmod=lambda: hashlib.new(hname))\n    rv.update(value)\n    return rv.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3ad5ef717dbb6462:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 451,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 449,
            "endLine" : 453,
            "snippet" : {
              "text" : "        self.decrypted = True\n        self.key = data\n        self.key_hash = hashlib.sha1(data).digest()\n\n    def decryptWithKey(self, pwdhash):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a66b5575ad46aef:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 549,
            "startColumn" : 55,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 547,
            "endLine" : 551,
            "snippet" : {
              "text" : "        algo = None\n        if context == \"domain1607-\" or context == \"domain\":\n            self.decryptWithHash(userSID, hashlib.new(\"md4\", pwd.encode('UTF-16LE')).digest())\n            if self.decrypted:\n                print(\"Decrypted succesfully as domain1607-\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8980a6bf87c2bd4e:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 555,
            "startColumn" : 36,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 553,
            "endLine" : 557,
            "snippet" : {
              "text" : "        if context == \"domain1607+\" or context == \"domain\":\n            SIDenc = userSID.encode(\"UTF-16LE\")\n            NTLMhash = hashlib.new(\"md4\", pwd.encode('UTF-16LE')).digest()\n            derived = pbkdf2(NTLMhash, SIDenc, 32, 10000, digest='sha256')\n            derived = pbkdf2(derived, SIDenc, 16, 1, digest='sha256')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d30bcfc1bba3c40:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 563,
            "startColumn" : 55,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 561,
            "endLine" : 565,
            "snippet" : {
              "text" : "                return\n        if context == \"local\":\n            self.decryptWithHash(userSID, hashlib.new(\"sha1\", pwd.encode('UTF-16LE')).digest())\n\n    def __repr__(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87ad9eb69c8a0fd4:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 284,
            "startColumn" : 60,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 282,
            "endLine" : 286,
            "snippet" : {
              "text" : "CryptoAlgo.add_algo(0x800e, name=\"sha512\", digestLength=512, blockLength=1024)\n\ndef pbkdf2_ms(passphrase, salt, keylen, iterations, digest='sha1'):\n    \"\"\"Implementation of PBKDF2 that allows specifying digest algorithm.\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb3603469e64e84c:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 304,
            "startColumn" : 57,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 302,
            "endLine" : 306,
            "snippet" : {
              "text" : "    return bytes(buff[:keylen])\n\ndef pbkdf2(passphrase, salt, keylen, iterations, digest='sha1'):\n    \"\"\"Implementation of PBKDF2 that allows specifying digest algorithm.\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cfae043cf5a8bca2:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/DPAPImk2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 322,
            "startColumn" : 44,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 320,
            "endLine" : 324,
            "snippet" : {
              "text" : "    return bytes(buff[:keylen])\n\ndef derivePwdHash(pwdhash, userSID, digest='sha1'):\n    \"\"\"Internal use. Computes the encryption key from a user's password hash\"\"\"\n    return hmac.new(pwdhash, (userSID + \"\\0\").encode(\"UTF-16LE\"), digestmod=lambda: hashlib.new(digest)).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f398d3707b75845:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/ccl_chrome_indexeddb/ccl_simplesnappy.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 190,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 188,
            "endLine" : 192,
            "snippet" : {
              "text" : "    decompressed = decompress(f)\n    print(decompressed)\n    sha1 = hashlib.sha1()\n    sha1.update(decompressed)\n    print(sha1.hexdigest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3619822f825611cf:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "\nhashes = {}\nhashes['MD5'] = hashlib.md5\nhashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51131a6ac3ed3fbb:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "hashes = {}\nhashes['MD5'] = hashlib.md5\nhashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acace6c6b1de01d8:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "hashes['MD5'] = hashlib.md5\nhashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7ad6329d89c2b4da:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "hashes['SHA1'] = hashlib.sha1\nhashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\nhashes['SHA512'] = hashlib.sha512\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9ef6f5b5e40523ff:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "hashes['SHA224'] = hashlib.sha224\nhashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\nhashes['SHA512'] = hashlib.sha512\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "347d7a8a4576145:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 25,
            "endLine" : 29,
            "snippet" : {
              "text" : "hashes['SHA256'] = hashlib.sha256\nhashes['SHA384'] = hashlib.sha384\nhashes['SHA512'] = hashlib.sha512\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "815a039f6ead9688:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/keplr2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 232,
            "startColumn" : 26,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 230,
            "endLine" : 234,
            "snippet" : {
              "text" : "        derived_key = scrypt.hash(password=password_str.encode('utf_8'), salt=bytes.fromhex(salt_hex), N=131072, r=8, p=1, buflen=32)\n        ciphertext_bytes = bytes.fromhex(ciphertext_hex)\n        calculated_mac = hashlib.sha256(derived_key[16:] + ciphertext_bytes).hexdigest()\n        \n        # Try to decrypt data\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6fde0455e9b1f61:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/mosquitto2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 34,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 13,
            "snippet" : {
              "text" : "import re, argparse\n\nfrom hashlib import pbkdf2_hmac, sha512\nfrom base64 import b64encode, b64decode\nfrom sys import exit, argv, stderr, stdout\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6ca2922300f6b03:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/netscreen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 66,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 64,
            "endLine" : 68,
            "snippet" : {
              "text" : "  else:\n    import hashlib\n    m = hashlib.md5(s.encode('latin_1')).digest()\n\n  narray = []\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4770a65f8b4bc4e9:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/pkcs12kdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 78,
            "startColumn" : 37,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 76,
            "endLine" : 80,
            "snippet" : {
              "text" : "            raise(\"Hash function: \"+self._hash_algorithm+\" not available\")\n\n        hash_function = hashlib.new(self._hash_algorithm)\n\n        #\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "53f452d5793675c2:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/pkcs12kdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 41,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "            #\n\n            hash_function = hashlib.new(self._hash_algorithm)\n            hash_function.update(bytearray(D))\n            hash_function.update(bytearray(I))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "93b52e71103ccfde:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/pkcs12kdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "\n            for j in range(1, r):\n                hash_function = hashlib.sha256()\n                hash_function.update(Ai)\n                Ai = hash_function.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2cc726866f611fa8:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/ps_token2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "\n# parsing of compressed data\ndata_hash = hashlib.sha1(data).hexdigest()\n\nuser_length = data[20]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3167bab0b759e628:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 134,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 132,
            "endLine" : 136,
            "snippet" : {
              "text" : "    data_d = checksum    + key[104:136]\n\n    sha1_a = hashlib.sha1(data_a).digest()\n    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "62c6fe88bd0c75b0:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 135,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 133,
            "endLine" : 137,
            "snippet" : {
              "text" : "\n    sha1_a = hashlib.sha1(data_a).digest()\n    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n    sha1_d = hashlib.sha1(data_d).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7cde073b5e11631e:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 136,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 134,
            "endLine" : 138,
            "snippet" : {
              "text" : "    sha1_a = hashlib.sha1(data_a).digest()\n    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n    sha1_d = hashlib.sha1(data_d).digest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe80dfc8824ce818:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 137,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 135,
            "endLine" : 139,
            "snippet" : {
              "text" : "    sha1_b = hashlib.sha1(data_b).digest()\n    sha1_c = hashlib.sha1(data_c).digest()\n    sha1_d = hashlib.sha1(data_d).digest()\n\n    aes_key = sha1_a[0: 8] + sha1_b[8:20] + sha1_c[ 4:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "187522f31d4ceb31:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 144,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 142,
            "endLine" : 146,
            "snippet" : {
              "text" : "    decrypted = aes_ige_decrypt(aes_data, aes_key, aes_iv)\n\n    digest = hashlib.sha1(decrypted).digest()\n\n    digest = digest[0:16] # only first 16 bytes are used\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d31ed102f8427df5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 31,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "    data = binascii.unhexlify(data_hex)\n\n    key = hashlib.pbkdf2_hmac('SHA1', b'', salt, LocalEncryptNoPwdIterCount, 136)\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a9931da0a6c785a:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "    data = binascii.unhexlify(data_hex)\n\n    pass_hash = hashlib.sha512(salt + salt).digest() # password is empty in sha512(s + p + s)\n\n    key = hashlib.pbkdf2_hmac('SHA512', pass_hash, salt, 1, 136) # only 1 iteration\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "71d09dea2e61c7f4:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 31,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "    pass_hash = hashlib.sha512(salt + salt).digest() # password is empty in sha512(s + p + s)\n\n    key = hashlib.pbkdf2_hmac('SHA512', pass_hash, salt, 1, 136) # only 1 iteration\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bdd808fef7a57a9:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 213,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 211,
            "endLine" : 215,
            "snippet" : {
              "text" : "    checksum = data[-16:]\n    len_bytes = struct.pack(\"<I\", len(actual_data))\n    calculated_checksum = hashlib.md5(actual_data + len_bytes + version + magic).digest()\n\n    f.close()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a65cb37c032c987f:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/tezos2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 143,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 141,
            "endLine" : 145,
            "snippet" : {
              "text" : "def bin_dbl_sha256(s):\n    bytes_to_hash = from_string_to_bytes(s)\n    return hashlib.sha256(hashlib.sha256(bytes_to_hash).digest()).digest()\n\ndef lpad(msg, symbol, length):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3864c449fcb8c01:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/tezos2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 143,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 141,
            "endLine" : 145,
            "snippet" : {
              "text" : "def bin_dbl_sha256(s):\n    bytes_to_hash = from_string_to_bytes(s)\n    return hashlib.sha256(hashlib.sha256(bytes_to_hash).digest()).digest()\n\ndef lpad(msg, symbol, length):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3864c449fcb8c01:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/tezos2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 250,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 248,
            "endLine" : 252,
            "snippet" : {
              "text" : "\n    binaryRepresentationOfBody = binascii.unhexlify(hex(int(seedWordBody, 2))[2:].zfill(lenOfChecksum * 8))\n    generatedChecksum = bin(int(hashlib.sha256(binaryRepresentationOfBody).hexdigest(), 16))[2:].zfill(256)[: lenOfChecksum]\n\n    if generatedChecksum != seedWordChecksum:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "50bbb07e46ceed23:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 15,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "    (algorithm_name, digestmod) = get_algorithm(algorithm)\n    if first:\n        ctx = hmac.new(secret, digestmod=digestmod)\n        ml = len(request_mac)\n        if ml > 0:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "17dbfd039725c239:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 166,
            "startColumn" : 15,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 164,
            "endLine" : 168,
            "snippet" : {
              "text" : "    tsig_rdata = pre_mac + mpack + mac + id + post_mac\n    if multi:  # XXX unhandled currently!\n        ctx = hmac.new(secret, digestmod=digestmod)\n        ml = len(mac)\n        ctx.update(struct.pack('!H', ml))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "88ecfa85b8257fef:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 11,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "    data = binascii.unhexlify(data_hex)\n\n    key = hashlib.pbkdf2_hmac('SHA1', b'', salt, LocalEncryptNoPwdIterCount, 136)\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a9931da0a6c785a:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "run/telegram2john.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 11,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "    pass_hash = hashlib.sha512(salt + salt).digest() # password is empty in sha512(s + p + s)\n\n    key = hashlib.pbkdf2_hmac('SHA512', pass_hash, salt, 1, 136) # only 1 iteration\n\n    return is_correct_ige_decryption(file_path, key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bdd808fef7a57a9:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:openwall/john/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}