{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "youtube_dl/extractor/abc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "devscripts/gh-pages/add-version.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/anvato.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/aws.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/bilibili.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/cbc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/common.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/crackle.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/crunchyroll.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/douyutv.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/drtv.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/fc2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/globo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "test/helper.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/hotstar.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/instagram.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/iqiyi.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/jamendo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/kankan.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/leeco.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/neteasemusic.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/newstube.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/nexx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/nytimes.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/prosiebensat1.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/scrippsnetworks.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 25
      }
    }, {
      "location" : {
        "uri" : "test/test_download.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 26
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/theplatform.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 27
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/update.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 28
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/vice.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 29
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/viki.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 30
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/vrv.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 31
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/yahoo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 32
      }
    }, {
      "location" : {
        "uri" : "youtube_dl/extractor/yandexmusic.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 33
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/abc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 35,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 144,
            "snippet" : {
              "text" : "        sig = hmac.new(\n            b'android.content.res.Resources',\n            path.encode('utf-8'), hashlib.sha256).hexdigest()\n        token = self._download_webpage(\n            'http://iview.abc.net.au{0}&sig={1}'.format(path, sig), video_id)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b2a71246a151344a:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "devscripts/gh-pages/add-version.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 41,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 39,
            "endLine" : 43,
            "snippet" : {
              "text" : "    if not data:\n        raise ValueError('File %s is empty!' % fn)\n    sha256sum = hashlib.sha256(data).hexdigest()\n    new_version[key] = (url, sha256sum)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b3962c37c134d00:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/anvato.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 26,
            "endLine" : 30,
            "snippet" : {
              "text" : "    if not isinstance(s, compat_str):\n        s = compat_str(s)\n    return hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d37b267070c50516:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "\n        def aws_hash(s):\n            return hashlib.sha256(s.encode('utf-8')).hexdigest()\n\n        # Task 1: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e638d3b569923d82:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 55,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "        # Task 3: http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n        def aws_hmac(key, msg):\n            return hmac.new(key, msg.encode('utf-8'), hashlib.sha256)\n\n        def aws_hmac_digest(key, msg):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d4b8657ac16128ec:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/bilibili.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 169,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 167,
            "endLine" : 171,
            "snippet" : {
              "text" : "        for num, rendition in enumerate(RENDITIONS, start=1):\n            payload = 'appkey=%s&cid=%s&otype=json&%s' % (self._APP_KEY, cid, rendition)\n            sign = hashlib.md5((payload + self._BILIBILI_KEY).encode('utf-8')).hexdigest()\n\n            video_info = self._download_json(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1c6f80050e123ee8:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/cbc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 279,
            "startColumn" : 30,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 277,
            "endLine" : 281,
            "snippet" : {
              "text" : "    def _cache_device_key(self):\n        email, _ = self._get_login_info()\n        return '%s_device' % hashlib.sha256(email.encode()).hexdigest() if email else 'device'\n\n    def _register_device(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "135ca1dea2f4f8e6:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 764,
            "startColumn" : 29,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 762,
            "endLine" : 766,
            "snippet" : {
              "text" : "            basen = '%s_%s' % (video_id, urlh.geturl())\n            if len(basen) > 240:\n                h = '___' + hashlib.md5(basen.encode('utf-8')).hexdigest()\n                basen = basen[:240 - len(h)] + h\n            raw_filename = basen + '.dump'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dbbdb4453cbeefba:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/crackle.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 101,
            "endColumn" : 113
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "                media_detail_url = 'https://web-api-us.crackle.com/Service.svc/details/media/%s/%s?disableProtocols=true' % (video_id, country)\n                timestamp = time.strftime('%Y%m%d%H%M', time.gmtime())\n                h = hmac.new(b'IGSLUQCBDFHEOIFM', '|'.join([media_detail_url, timestamp]).encode(), hashlib.sha1).hexdigest().upper()\n                media = self._download_json(\n                    media_detail_url, video_id, 'Downloading media JSON as %s' % country,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c96b92966e97cc83:1",
        "primaryLocationStartColumnFingerprint" : "84"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/crunchyroll.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import zlib\n\nfrom hashlib import sha1\nfrom math import pow, sqrt, floor\nfrom .common import InfoExtractor\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "19f72d636d7d5acc:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/douyutv.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "        tt = int(time.time())\n        signContent = 'lapi/live/thirdPart/getPlay/%s?aid=pcclient&rate=0&time=%d9TUk5fjjUjg9qIMH3sdnh' % (room_id, tt)\n        sign = hashlib.md5(signContent.encode('ascii')).hexdigest()\n        video_url = self._download_json(\n            'http://coapi.douyucdn.cn/lapi/live/thirdPart/getPlay/' + room_id,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a16e1806430c4ae:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/drtv.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 36,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "            a = e[10 + n:]\n            data = bytes_to_intlist(hex_to_bytes(e[10:10 + n]))\n            key = bytes_to_intlist(hashlib.sha256(\n                ('%s:sRBzYNXBzkKgnjj8pGtkACch' % a).encode('utf-8')).digest())\n            iv = bytes_to_intlist(hex_to_bytes(a))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2ed9b31333915b79:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/fc2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 93,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 91,
            "endLine" : 95,
            "snippet" : {
              "text" : "        refer = url.replace('/content/', '/a/content/') if '/a/content/' not in url else url\n\n        mimi = hashlib.md5((video_id + '_gGddgPfeaf_gzyr').encode('utf-8')).hexdigest()\n\n        info_url = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe5e4d2b5d4da17e:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/globo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 149,
            "startColumn" : 51,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 147,
            "endLine" : 151,
            "snippet" : {
              "text" : "            padded_sign_time = compat_str(int(received_time) + 86400) + padding\n            md5_data = (received_md5 + padded_sign_time + '0xAC10FD').encode()\n            signed_md5 = base64.urlsafe_b64encode(hashlib.md5(md5_data).digest()).decode().strip('=')\n            signed_hash = hash_prefix + padded_sign_time + signed_md5\n            signed_url = '%s?h=%s&k=html5&a=%s&u=%s' % (resource_url, signed_hash, 'F' if video.get('subscriber_only') else 'A', security.get('user') or '')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7990d204c52cf324:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/helper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "\n\nmd5 = lambda s: hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "321c8a024577798d:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/hotstar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "        exp = st + 6000\n        auth = 'st=%d~exp=%d~acl=/*' % (st, exp)\n        auth += '~hmac=' + hmac.new(self._AKAMAI_ENCRYPTION_KEY, auth.encode(), hashlib.sha256).hexdigest()\n        h = {'hotstarauth': auth}\n        h.update(headers)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ac61604328abb1b:1",
        "primaryLocationStartColumnFingerprint" : "72"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/instagram.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 329,
            "startColumn" : 48,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 327,
            "endLine" : 331,
            "snippet" : {
              "text" : "                        'Downloading JSON page %d' % page_num, headers={\n                            'X-Requested-With': 'XMLHttpRequest',\n                            'X-Instagram-GIS': hashlib.md5(\n                                ('%s:%s' % (gis_tmpl, variables)).encode('utf-8')).hexdigest(),\n                        }, query={\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1f606603d91c6e11:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/iqiyi.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "\ndef md5_text(text):\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c401e2065bfa707:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/jamendo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 44,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "                'id[]': resource_id,\n            }, headers={\n                'X-Jam-Call': '$%s*%s~' % (hashlib.sha1((path + rand).encode()).hexdigest(), rand)\n            })[0]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8973bf91fc188ffd:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/kankan.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "from .common import InfoExtractor\n\n_md5 = lambda s: hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "be7bd04558d27455:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/leeco.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 300,
            "startColumn" : 23,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 298,
            "endLine" : 302,
            "snippet" : {
              "text" : "            items = ['cf', 'ran', 'uu', 'bver', 'vu']\n        input_data = ''.join([item + obj[item] for item in items]) + salt\n        obj['sign'] = hashlib.md5(input_data.encode('utf-8')).hexdigest()\n\n    def _get_formats(self, cf, uu, vu, media_id):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "210fb9bcbf4200e8:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/neteasemusic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "from binascii import hexlify\nfrom datetime import datetime\nfrom hashlib import md5\nfrom random import randint\nimport json\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "951aa3da2fc9e788:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/newstube.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 13,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "            }))\n        key = hashlib.pbkdf2_hmac(\n            'sha1', video_guid.replace('-', '').encode(), enc_data[:16], 1)[:16]\n        dec_data = aes_cbc_decrypt(\n            bytes_to_intlist(enc_data[32:]), bytes_to_intlist(key),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "797fb46d3569cec6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/newstube.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 48,
            "startColumn" : 15,
            "endLine" : 49,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 46,
            "endLine" : 51,
            "snippet" : {
              "text" : "                'ff': 3,\n            }))\n        key = hashlib.pbkdf2_hmac(\n            'sha1', video_guid.replace('-', '').encode(), enc_data[:16], 1)[:16]\n        dec_data = aes_cbc_decrypt(\n            bytes_to_intlist(enc_data[32:]), bytes_to_intlist(key),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dca6c2ae5da24151:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/nexx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 358,
            "startColumn" : 29,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 356,
            "endLine" : 360,
            "snippet" : {
              "text" : "            # Reversed from JS code for _play.api.call function (search for\n            # X-Request-Token)\n            request_token = hashlib.md5(\n                ''.join((op, domain_id, secret)).encode('utf-8')).hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4413053766c8852:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/nytimes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 63,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 25,
            "endLine" : 29,
            "snippet" : {
              "text" : "        # http://graphics8.nytimes.com/video/vhs/vhs-2.x.min.js\n        path = '/svc/video/api/v3/video/' + video_id\n        hm = hmac.new(self._SECRET, (path + ':vhs').encode(), hashlib.sha512).hexdigest()\n        video_data = self._download_json('http://www.nytimes.com' + path, video_id, 'Downloading video JSON', headers={\n            'Authorization': 'NYTV ' + base64.b64encode(hm.encode()).decode(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b32c3f7e5fd0a687:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/prosiebensat1.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import re\n\nfrom hashlib import sha1\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1deab04045b053e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/scrippsnetworks.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 71,
            "startColumn" : 41,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 69,
            "endLine" : 73,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-amz-json-1.1',\n                'Referer': url,\n                'X-Amz-Content-Sha256': hashlib.sha256(aws_identity_id_json).hexdigest(),\n                'X-Amz-Target': 'AWSCognitoIdentityService.GetOpenIdToken',\n                'X-Amz-User-Agent': self._AWS_USER_AGENT,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "608d0f73f2aaf09c:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/test_download.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "def _file_md5(fn):\n    with open(fn, 'rb') as f:\n        return hashlib.md5(f.read()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6db7957543c80be5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/theplatform.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 66,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "        relative_path = re.match(r'https?://link\\.theplatform\\.com/s/([^?]+)', url).group(1)\n        clear_text = hex_to_bytes(flags + expiration_date + str_to_hex(relative_path))\n        checksum = hmac.new(sig_key.encode('ascii'), clear_text, hashlib.sha1).hexdigest()\n        sig = flags + expiration_date + checksum + str_to_hex(sig_secret)\n        return '%s&sig=%s' % (url, sig)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5551a16118cde91e:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/update.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 19,
            "endLine" : 23,
            "snippet" : {
              "text" : "\ndef rsa_verify(message, signature, key):\n    from hashlib import sha256\n    assert isinstance(message, bytes)\n    byte_size = (len(bin(key[0])) - 2 + 8 - 1) // 8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbea22664a6bece4:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/update.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 116,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 114,
            "endLine" : 118,
            "snippet" : {
              "text" : "            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['exe'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a356ca4c121d5d72:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/update.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['bin'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9510487c396b13bd:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/vice.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 146,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 144,
            "endLine" : 148,
            "snippet" : {
              "text" : "        query.update({\n            'exp': exp,\n            'sign': hashlib.sha512(('%s:GET:%d' % (video_id, exp)).encode()).hexdigest(),\n            'skipadstitching': 1,\n            'platform': 'desktop',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2e6be193405d7824:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/viki.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 66,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 64,
            "endLine" : 68,
            "snippet" : {
              "text" : "            self._APP_SECRET.encode('ascii'),\n            '{query}&t={timestamp}'.format(**locals()).encode('ascii'),\n            hashlib.sha1).hexdigest()\n        return timestamp, sig, self._API_URL_TEMPLATE % query\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "df3ff0d4659e9589:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/vrv.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 35,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "        oauth_signature = base64.b64encode(hmac.new(\n            (self._API_PARAMS['oAuthSecret'] + '&' + self._TOKEN_SECRET).encode('ascii'),\n            base_string.encode(), hashlib.sha1).digest()).decode()\n        encoded_query += '&oauth_signature=' + compat_urllib_parse.quote(oauth_signature, '')\n        try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f853acac5db6929:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/yahoo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 558,
            "startColumn" : 23,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 556,
            "endLine" : 560,
            "snippet" : {
              "text" : "                'space_id': space_id,\n                'domain': host,\n                'ak': hashlib.md5('_'.join((space_id, host)).encode()).hexdigest(),\n                'device_type': '1100',\n            })\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b987e2fe79a23bd9:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/yandexmusic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 129,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 127,
            "endLine" : 131,
            "snippet" : {
              "text" : "            'Downloading track location JSON',\n            query={'format': 'json'})\n        key = hashlib.md5(('XGRlBW9FXlekgbPrRHuSiA' + fd_data['path'][1:] + fd_data['s']).encode('utf-8')).hexdigest()\n        f_url = 'http://%s/get-mp3/%s/%s?track-id=%s ' % (fd_data['host'], key, fd_data['ts'] + fd_data['path'], track['id'])\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b47253767afd0b77:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/abc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 35,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 144,
            "snippet" : {
              "text" : "        sig = hmac.new(\n            b'android.content.res.Resources',\n            path.encode('utf-8'), hashlib.sha256).hexdigest()\n        token = self._download_webpage(\n            'http://iview.abc.net.au{0}&sig={1}'.format(path, sig), video_id)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b2a71246a151344a:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "devscripts/gh-pages/add-version.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 41,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 39,
            "endLine" : 43,
            "snippet" : {
              "text" : "    if not data:\n        raise ValueError('File %s is empty!' % fn)\n    sha256sum = hashlib.sha256(data).hexdigest()\n    new_version[key] = (url, sha256sum)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b3962c37c134d00:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/anvato.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 26,
            "endLine" : 30,
            "snippet" : {
              "text" : "    if not isinstance(s, compat_str):\n        s = compat_str(s)\n    return hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d37b267070c50516:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "\n        def aws_hash(s):\n            return hashlib.sha256(s.encode('utf-8')).hexdigest()\n\n        # Task 1: http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e638d3b569923d82:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 55,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "        # Task 3: http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n        def aws_hmac(key, msg):\n            return hmac.new(key, msg.encode('utf-8'), hashlib.sha256)\n\n        def aws_hmac_digest(key, msg):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d4b8657ac16128ec:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/bilibili.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 169,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 167,
            "endLine" : 171,
            "snippet" : {
              "text" : "        for num, rendition in enumerate(RENDITIONS, start=1):\n            payload = 'appkey=%s&cid=%s&otype=json&%s' % (self._APP_KEY, cid, rendition)\n            sign = hashlib.md5((payload + self._BILIBILI_KEY).encode('utf-8')).hexdigest()\n\n            video_info = self._download_json(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1c6f80050e123ee8:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/cbc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 279,
            "startColumn" : 30,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 277,
            "endLine" : 281,
            "snippet" : {
              "text" : "    def _cache_device_key(self):\n        email, _ = self._get_login_info()\n        return '%s_device' % hashlib.sha256(email.encode()).hexdigest() if email else 'device'\n\n    def _register_device(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "135ca1dea2f4f8e6:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 764,
            "startColumn" : 29,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 762,
            "endLine" : 766,
            "snippet" : {
              "text" : "            basen = '%s_%s' % (video_id, urlh.geturl())\n            if len(basen) > 240:\n                h = '___' + hashlib.md5(basen.encode('utf-8')).hexdigest()\n                basen = basen[:240 - len(h)] + h\n            raw_filename = basen + '.dump'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dbbdb4453cbeefba:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/crackle.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 101,
            "endColumn" : 113
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "                media_detail_url = 'https://web-api-us.crackle.com/Service.svc/details/media/%s/%s?disableProtocols=true' % (video_id, country)\n                timestamp = time.strftime('%Y%m%d%H%M', time.gmtime())\n                h = hmac.new(b'IGSLUQCBDFHEOIFM', '|'.join([media_detail_url, timestamp]).encode(), hashlib.sha1).hexdigest().upper()\n                media = self._download_json(\n                    media_detail_url, video_id, 'Downloading media JSON as %s' % country,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c96b92966e97cc83:1",
        "primaryLocationStartColumnFingerprint" : "84"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/crunchyroll.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import zlib\n\nfrom hashlib import sha1\nfrom math import pow, sqrt, floor\nfrom .common import InfoExtractor\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "19f72d636d7d5acc:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/douyutv.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "        tt = int(time.time())\n        signContent = 'lapi/live/thirdPart/getPlay/%s?aid=pcclient&rate=0&time=%d9TUk5fjjUjg9qIMH3sdnh' % (room_id, tt)\n        sign = hashlib.md5(signContent.encode('ascii')).hexdigest()\n        video_url = self._download_json(\n            'http://coapi.douyucdn.cn/lapi/live/thirdPart/getPlay/' + room_id,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a16e1806430c4ae:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/drtv.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 36,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "            a = e[10 + n:]\n            data = bytes_to_intlist(hex_to_bytes(e[10:10 + n]))\n            key = bytes_to_intlist(hashlib.sha256(\n                ('%s:sRBzYNXBzkKgnjj8pGtkACch' % a).encode('utf-8')).digest())\n            iv = bytes_to_intlist(hex_to_bytes(a))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2ed9b31333915b79:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/fc2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 93,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 91,
            "endLine" : 95,
            "snippet" : {
              "text" : "        refer = url.replace('/content/', '/a/content/') if '/a/content/' not in url else url\n\n        mimi = hashlib.md5((video_id + '_gGddgPfeaf_gzyr').encode('utf-8')).hexdigest()\n\n        info_url = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe5e4d2b5d4da17e:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/globo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 149,
            "startColumn" : 51,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 147,
            "endLine" : 151,
            "snippet" : {
              "text" : "            padded_sign_time = compat_str(int(received_time) + 86400) + padding\n            md5_data = (received_md5 + padded_sign_time + '0xAC10FD').encode()\n            signed_md5 = base64.urlsafe_b64encode(hashlib.md5(md5_data).digest()).decode().strip('=')\n            signed_hash = hash_prefix + padded_sign_time + signed_md5\n            signed_url = '%s?h=%s&k=html5&a=%s&u=%s' % (resource_url, signed_hash, 'F' if video.get('subscriber_only') else 'A', security.get('user') or '')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7990d204c52cf324:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/helper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "\n\nmd5 = lambda s: hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "321c8a024577798d:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/hotstar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "        exp = st + 6000\n        auth = 'st=%d~exp=%d~acl=/*' % (st, exp)\n        auth += '~hmac=' + hmac.new(self._AKAMAI_ENCRYPTION_KEY, auth.encode(), hashlib.sha256).hexdigest()\n        h = {'hotstarauth': auth}\n        h.update(headers)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ac61604328abb1b:1",
        "primaryLocationStartColumnFingerprint" : "72"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/instagram.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 329,
            "startColumn" : 48,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 327,
            "endLine" : 331,
            "snippet" : {
              "text" : "                        'Downloading JSON page %d' % page_num, headers={\n                            'X-Requested-With': 'XMLHttpRequest',\n                            'X-Instagram-GIS': hashlib.md5(\n                                ('%s:%s' % (gis_tmpl, variables)).encode('utf-8')).hexdigest(),\n                        }, query={\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1f606603d91c6e11:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/iqiyi.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "\ndef md5_text(text):\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c401e2065bfa707:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/jamendo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 44,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "                'id[]': resource_id,\n            }, headers={\n                'X-Jam-Call': '$%s*%s~' % (hashlib.sha1((path + rand).encode()).hexdigest(), rand)\n            })[0]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8973bf91fc188ffd:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/kankan.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "from .common import InfoExtractor\n\n_md5 = lambda s: hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "be7bd04558d27455:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/leeco.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 300,
            "startColumn" : 23,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 298,
            "endLine" : 302,
            "snippet" : {
              "text" : "            items = ['cf', 'ran', 'uu', 'bver', 'vu']\n        input_data = ''.join([item + obj[item] for item in items]) + salt\n        obj['sign'] = hashlib.md5(input_data.encode('utf-8')).hexdigest()\n\n    def _get_formats(self, cf, uu, vu, media_id):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "210fb9bcbf4200e8:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/neteasemusic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "from binascii import hexlify\nfrom datetime import datetime\nfrom hashlib import md5\nfrom random import randint\nimport json\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "951aa3da2fc9e788:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/newstube.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 13,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "            }))\n        key = hashlib.pbkdf2_hmac(\n            'sha1', video_guid.replace('-', '').encode(), enc_data[:16], 1)[:16]\n        dec_data = aes_cbc_decrypt(\n            bytes_to_intlist(enc_data[32:]), bytes_to_intlist(key),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "797fb46d3569cec6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/nexx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 358,
            "startColumn" : 29,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 356,
            "endLine" : 360,
            "snippet" : {
              "text" : "            # Reversed from JS code for _play.api.call function (search for\n            # X-Request-Token)\n            request_token = hashlib.md5(\n                ''.join((op, domain_id, secret)).encode('utf-8')).hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4413053766c8852:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/nytimes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 63,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 25,
            "endLine" : 29,
            "snippet" : {
              "text" : "        # http://graphics8.nytimes.com/video/vhs/vhs-2.x.min.js\n        path = '/svc/video/api/v3/video/' + video_id\n        hm = hmac.new(self._SECRET, (path + ':vhs').encode(), hashlib.sha512).hexdigest()\n        video_data = self._download_json('http://www.nytimes.com' + path, video_id, 'Downloading video JSON', headers={\n            'Authorization': 'NYTV ' + base64.b64encode(hm.encode()).decode(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b32c3f7e5fd0a687:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/prosiebensat1.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import re\n\nfrom hashlib import sha1\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1deab04045b053e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/scrippsnetworks.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 71,
            "startColumn" : 41,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 69,
            "endLine" : 73,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-amz-json-1.1',\n                'Referer': url,\n                'X-Amz-Content-Sha256': hashlib.sha256(aws_identity_id_json).hexdigest(),\n                'X-Amz-Target': 'AWSCognitoIdentityService.GetOpenIdToken',\n                'X-Amz-User-Agent': self._AWS_USER_AGENT,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "608d0f73f2aaf09c:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/test_download.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "def _file_md5(fn):\n    with open(fn, 'rb') as f:\n        return hashlib.md5(f.read()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6db7957543c80be5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/theplatform.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 66,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "        relative_path = re.match(r'https?://link\\.theplatform\\.com/s/([^?]+)', url).group(1)\n        clear_text = hex_to_bytes(flags + expiration_date + str_to_hex(relative_path))\n        checksum = hmac.new(sig_key.encode('ascii'), clear_text, hashlib.sha1).hexdigest()\n        sig = flags + expiration_date + checksum + str_to_hex(sig_secret)\n        return '%s&sig=%s' % (url, sig)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5551a16118cde91e:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/update.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 19,
            "endLine" : 23,
            "snippet" : {
              "text" : "\ndef rsa_verify(message, signature, key):\n    from hashlib import sha256\n    assert isinstance(message, bytes)\n    byte_size = (len(bin(key[0])) - 2 + 8 - 1) // 8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbea22664a6bece4:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/update.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 116,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 114,
            "endLine" : 118,
            "snippet" : {
              "text" : "            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['exe'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a356ca4c121d5d72:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/update.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['bin'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9510487c396b13bd:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/vice.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 146,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 144,
            "endLine" : 148,
            "snippet" : {
              "text" : "        query.update({\n            'exp': exp,\n            'sign': hashlib.sha512(('%s:GET:%d' % (video_id, exp)).encode()).hexdigest(),\n            'skipadstitching': 1,\n            'platform': 'desktop',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2e6be193405d7824:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/viki.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 66,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 64,
            "endLine" : 68,
            "snippet" : {
              "text" : "            self._APP_SECRET.encode('ascii'),\n            '{query}&t={timestamp}'.format(**locals()).encode('ascii'),\n            hashlib.sha1).hexdigest()\n        return timestamp, sig, self._API_URL_TEMPLATE % query\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "df3ff0d4659e9589:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/vrv.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 35,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "        oauth_signature = base64.b64encode(hmac.new(\n            (self._API_PARAMS['oAuthSecret'] + '&' + self._TOKEN_SECRET).encode('ascii'),\n            base_string.encode(), hashlib.sha1).digest()).decode()\n        encoded_query += '&oauth_signature=' + compat_urllib_parse.quote(oauth_signature, '')\n        try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f853acac5db6929:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/yahoo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 558,
            "startColumn" : 23,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 556,
            "endLine" : 560,
            "snippet" : {
              "text" : "                'space_id': space_id,\n                'domain': host,\n                'ak': hashlib.md5('_'.join((space_id, host)).encode()).hexdigest(),\n                'device_type': '1100',\n            })\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b987e2fe79a23bd9:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/yandexmusic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 129,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 127,
            "endLine" : 131,
            "snippet" : {
              "text" : "            'Downloading track location JSON',\n            query={'format': 'json'})\n        key = hashlib.md5(('XGRlBW9FXlekgbPrRHuSiA' + fd_data['path'][1:] + fd_data['s']).encode('utf-8')).hexdigest()\n        f_url = 'http://%s/get-mp3/%s/%s?track-id=%s ' % (fd_data['host'], key, fd_data['ts'] + fd_data['path'], track['id'])\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b47253767afd0b77:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "youtube_dl/extractor/newstube.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 48,
            "startColumn" : 15,
            "endLine" : 49,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 46,
            "endLine" : 51,
            "snippet" : {
              "text" : "                'ff': 3,\n            }))\n        key = hashlib.pbkdf2_hmac(\n            'sha1', video_guid.replace('-', '').encode(), enc_data[:16], 1)[:16]\n        dec_data = aes_cbc_decrypt(\n            bytes_to_intlist(enc_data[32:]), bytes_to_intlist(key),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dca6c2ae5da24151:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:ytdl-org/youtube-dl/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}