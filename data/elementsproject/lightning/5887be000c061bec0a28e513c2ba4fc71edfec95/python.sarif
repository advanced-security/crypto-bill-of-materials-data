{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "external/lnprototest/lnprototest/utils/bitcoin_utils.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "external/lnprototest/lnprototest/clightning/clightning.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "external/lnprototest/lnprototest/commit_tx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "external/lnprototest/lnprototest/funding.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "plugins/clnrest/utilities/generate_certs.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "tests/plugins/hook-chain-even.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "tests/plugins/hook-chain-odd.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "contrib/pyln-proto/pyln/proto/invoice.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "external/lnprototest/lnprototest/keyset.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "external/lnprototest/tests/test_bolt2-20-open_channel_accepter.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "external/libwally-core/src/test/test_confidential_addr.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "tests/test_plugin.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 57,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15bf3745e889214:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/utils/bitcoin_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 51,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 49,
            "endLine" : 53,
            "snippet" : {
              "text" : "        \"\"\"Build a valid bitcoin script and hide the primitive of the library\"\"\"\n        secret_str = f\"correct horse battery staple {word}\"\n        h = hashlib.sha256(secret_str.encode(\"ascii\")).digest()\n        seckey = CBitcoinSecret.from_secret_bytes(h)\n        if script_type is ScriptType.VALID_CLOSE_SCRIPT:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0dc53e5aa2f26f1:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/clightning/clightning.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 433,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 431,
            "endLine" : 435,
            "snippet" : {
              "text" : "\n    def addhtlc(self, event: Event, conn: Conn, amount: int, preimage: str) -> None:\n        payhash = hashlib.sha256(bytes.fromhex(preimage)).hexdigest()\n        routestep = {\n            \"msatoshi\": amount,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5dcb34b49091fd7:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/commit_tx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from bitcoin.core.script import CScript\nimport struct\nfrom hashlib import sha256\nfrom .keyset import KeySet\nfrom .errors import SpecFileError, EventError\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "94142a0582f47a97:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/funding.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "from typing import Tuple, Any, Optional, Union, Callable, Dict, List\n\nfrom hashlib import sha256\nfrom pyln.proto.message import Message\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b58469445f40ae:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 43,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "def generate_cert(entity_type, ca_subject, ca_private_key, rest_host, certs_path):\n    # Generate Key pair\n    private_key = ec.generate_private_key(ec.SECP256R1())\n    public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b6552f2209d2a607:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 50,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "        subject = x509.Name([x509.NameAttribute(NameOID.COMMON_NAME, f\"cln rest {entity_type}\")])\n        cert_builder = create_cert_builder(subject, ca_subject, public_key, rest_host)\n        cert = cert_builder.sign(ca_private_key, hashes.SHA256())\n    else:\n        ca_subject = x509.Name([x509.NameAttribute(NameOID.COMMON_NAME, u\"cln Root REST CA\")])\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "258d3c72434e2d68:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 57,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 55,
            "endLine" : 59,
            "snippet" : {
              "text" : "            cert_builder\n            .add_extension(x509.BasicConstraints(ca=True, path_length=None), critical=True)\n            .sign(ca_private_key, hashes.SHA256())\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f31438c00aaeb9e:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/plugins/hook-chain-even.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 3,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\nfrom pyln.client import Plugin\nfrom hashlib import sha256\nfrom binascii import hexlify\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f4dc6f9f2d499f9:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/plugins/hook-chain-odd.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 3,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\nfrom pyln.client import Plugin\nfrom hashlib import sha256\nfrom binascii import hexlify\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f4dc3b2085c0a0b:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/invoice.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 257,
            "startColumn" : 43,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 255,
            "endLine" : 259,
            "snippet" : {
              "text" : "                data += tagged('x', expirybits)\n            elif k == 'h':\n                data += tagged_bytes('h', hashlib.sha256(v.encode('utf-8')).digest())\n            elif k == 'n':\n                data += tagged_bytes('n', v)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "915a3039a662f3e2:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/keyset.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 31,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 77,
            "snippet" : {
              "text" : "            if ((1 << B) & index) != 0:\n                P[B // 8] ^= 1 << (B % 8)\n                P = bytearray(hashlib.sha256(P).digest())\n\n        return coincurve.PrivateKey(P)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6f178fe55b99d85:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 369,
            "startColumn" : 32,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 367,
            "endLine" : 371,
            "snippet" : {
              "text" : "        keys = generate_keyset(shared_secret)\n\n        h = hmac.HMAC(keys.mu, hashes.SHA256(),\n                      backend=default_backend())\n        h.update(self.payloads)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d562f8d2b9c5454:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 438,
            "startColumn" : 27,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 436,
            "endLine" : 440,
            "snippet" : {
              "text" : "\ndef generate_key(secret: bytes, prefix: bytes):\n    h = hmac.HMAC(prefix, hashes.SHA256(), backend=default_backend())\n    h.update(secret)\n    return h.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6e01a99573591e3d:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CHACHA20"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 481,
            "startColumn" : 17,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 479,
            "endLine" : 483,
            "snippet" : {
              "text" : "\ndef chacha20_stream(key: bytes, dest: Union[bytearray, memoryview]):\n    algorithm = algorithms.ChaCha20(key, b'\\x00' * 16)\n    cipher = Cipher(algorithm, None, backend=default_backend())\n    encryptor = cipher.encryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2a4a49d95ec3d8cf:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 547,
            "startColumn" : 39,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 545,
            "endLine" : 549,
            "snippet" : {
              "text" : "            # Finally compute the hmac that the next hop will use to verify\n            # the onion's integrity.\n            hh = hmac.HMAC(p.keys.mu, hashes.SHA256(),\n                           backend=default_backend())\n            hh.update(buf)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6a8ebb88a012f89:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes, hmac\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms\nfrom hashlib import sha256\nfrom io import BytesIO, SEEK_CUR\nfrom typing import List, Optional, Union, Tuple\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d4d14de9fad9655a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/tests/test_bolt2-20-open_channel_accepter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 4,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "# Variations on open_channel\nimport pytest\nfrom hashlib import sha256\n\nfrom pyln.proto.message import Message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b6e8b73ff2e0545e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/libwally-core/src/test/test_confidential_addr.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 72,
            "endColumn" : 86
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "            def __init__(self, seed = None):\n                if seed is not None:\n                    self.data = hmac.HMAC(b'Symmetric key seed', seed, hashlib.sha512).digest()\n                else:\n                    self.data = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb1cec28889e1e83:1",
        "primaryLocationStartColumnFingerprint" : "51"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/libwally-core/src/test/test_confidential_addr.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 61,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "            def derive_path(self, path):\n                for label in path:\n                    h = hmac.HMAC(self.data[0:32], b'\\x00', hashlib.sha512)\n                    h.update(label)\n                    self.data = h.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aabccea1fb98810:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_plugin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 4,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "from datetime import datetime\nfrom fixtures import *  # noqa: F401,F403\nfrom hashlib import sha256\nfrom pyln.client import RpcError, Millisatoshi\nfrom pyln.proto import Invoice\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45c00494e49d5687:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 30,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 28,
            "endLine" : 32,
            "snippet" : {
              "text" : "def hkdf(ikm, salt=b\"\", info=b\"\"):\n    hkdf = HKDF(\n        algorithm=hashes.SHA256(),\n        length=64,\n        salt=salt,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7499c80320ce55:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CHACHA20POLY1305"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 57,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15bf3745e889214:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm HKDF"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 53,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\nfrom hashlib import sha256\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a02e8e5b0bc05ae:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\nfrom hashlib import sha256\nfrom typing import Tuple\nimport coincurve\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c18e9d425eddf1ec:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 43,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "def generate_cert(entity_type, ca_subject, ca_private_key, rest_host, certs_path):\n    # Generate Key pair\n    private_key = ec.generate_private_key(ec.SECP256R1())\n    public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b6552f2209d2a607:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/utils/bitcoin_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 51,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 49,
            "endLine" : 53,
            "snippet" : {
              "text" : "        \"\"\"Build a valid bitcoin script and hide the primitive of the library\"\"\"\n        secret_str = f\"correct horse battery staple {word}\"\n        h = hashlib.sha256(secret_str.encode(\"ascii\")).digest()\n        seckey = CBitcoinSecret.from_secret_bytes(h)\n        if script_type is ScriptType.VALID_CLOSE_SCRIPT:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0dc53e5aa2f26f1:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/clightning/clightning.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 433,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 431,
            "endLine" : 435,
            "snippet" : {
              "text" : "\n    def addhtlc(self, event: Event, conn: Conn, amount: int, preimage: str) -> None:\n        payhash = hashlib.sha256(bytes.fromhex(preimage)).hexdigest()\n        routestep = {\n            \"msatoshi\": amount,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5dcb34b49091fd7:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/commit_tx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from bitcoin.core.script import CScript\nimport struct\nfrom hashlib import sha256\nfrom .keyset import KeySet\nfrom .errors import SpecFileError, EventError\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "94142a0582f47a97:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/funding.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "from typing import Tuple, Any, Optional, Union, Callable, Dict, List\n\nfrom hashlib import sha256\nfrom pyln.proto.message import Message\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b58469445f40ae:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 50,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "        subject = x509.Name([x509.NameAttribute(NameOID.COMMON_NAME, f\"cln rest {entity_type}\")])\n        cert_builder = create_cert_builder(subject, ca_subject, public_key, rest_host)\n        cert = cert_builder.sign(ca_private_key, hashes.SHA256())\n    else:\n        ca_subject = x509.Name([x509.NameAttribute(NameOID.COMMON_NAME, u\"cln Root REST CA\")])\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "258d3c72434e2d68:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 57,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 55,
            "endLine" : 59,
            "snippet" : {
              "text" : "            cert_builder\n            .add_extension(x509.BasicConstraints(ca=True, path_length=None), critical=True)\n            .sign(ca_private_key, hashes.SHA256())\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f31438c00aaeb9e:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/plugins/hook-chain-even.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 3,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\nfrom pyln.client import Plugin\nfrom hashlib import sha256\nfrom binascii import hexlify\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f4dc6f9f2d499f9:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/plugins/hook-chain-odd.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 3,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "#!/usr/bin/env python3\nfrom pyln.client import Plugin\nfrom hashlib import sha256\nfrom binascii import hexlify\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f4dc3b2085c0a0b:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/invoice.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 257,
            "startColumn" : 43,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 255,
            "endLine" : 259,
            "snippet" : {
              "text" : "                data += tagged('x', expirybits)\n            elif k == 'h':\n                data += tagged_bytes('h', hashlib.sha256(v.encode('utf-8')).digest())\n            elif k == 'n':\n                data += tagged_bytes('n', v)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "915a3039a662f3e2:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/lnprototest/keyset.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 31,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 77,
            "snippet" : {
              "text" : "            if ((1 << B) & index) != 0:\n                P[B // 8] ^= 1 << (B % 8)\n                P = bytearray(hashlib.sha256(P).digest())\n\n        return coincurve.PrivateKey(P)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6f178fe55b99d85:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 369,
            "startColumn" : 32,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 367,
            "endLine" : 371,
            "snippet" : {
              "text" : "        keys = generate_keyset(shared_secret)\n\n        h = hmac.HMAC(keys.mu, hashes.SHA256(),\n                      backend=default_backend())\n        h.update(self.payloads)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d562f8d2b9c5454:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 438,
            "startColumn" : 27,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 436,
            "endLine" : 440,
            "snippet" : {
              "text" : "\ndef generate_key(secret: bytes, prefix: bytes):\n    h = hmac.HMAC(prefix, hashes.SHA256(), backend=default_backend())\n    h.update(secret)\n    return h.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6e01a99573591e3d:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 547,
            "startColumn" : 39,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 545,
            "endLine" : 549,
            "snippet" : {
              "text" : "            # Finally compute the hmac that the next hop will use to verify\n            # the onion's integrity.\n            hh = hmac.HMAC(p.keys.mu, hashes.SHA256(),\n                           backend=default_backend())\n            hh.update(buf)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6a8ebb88a012f89:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes, hmac\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms\nfrom hashlib import sha256\nfrom io import BytesIO, SEEK_CUR\nfrom typing import List, Optional, Union, Tuple\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d4d14de9fad9655a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/lnprototest/tests/test_bolt2-20-open_channel_accepter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 4,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "# Variations on open_channel\nimport pytest\nfrom hashlib import sha256\n\nfrom pyln.proto.message import Message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b6e8b73ff2e0545e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/libwally-core/src/test/test_confidential_addr.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 72,
            "endColumn" : 86
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "            def __init__(self, seed = None):\n                if seed is not None:\n                    self.data = hmac.HMAC(b'Symmetric key seed', seed, hashlib.sha512).digest()\n                else:\n                    self.data = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb1cec28889e1e83:1",
        "primaryLocationStartColumnFingerprint" : "51"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "external/libwally-core/src/test/test_confidential_addr.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 61,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "            def derive_path(self, path):\n                for label in path:\n                    h = hmac.HMAC(self.data[0:32], b'\\x00', hashlib.sha512)\n                    h.update(label)\n                    self.data = h.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aabccea1fb98810:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_plugin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 4,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "from datetime import datetime\nfrom fixtures import *  # noqa: F401,F403\nfrom hashlib import sha256\nfrom pyln.client import RpcError, Millisatoshi\nfrom pyln.proto import Invoice\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45c00494e49d5687:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 30,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 28,
            "endLine" : 32,
            "snippet" : {
              "text" : "def hkdf(ikm, salt=b\"\", info=b\"\"):\n    hkdf = HKDF(\n        algorithm=hashes.SHA256(),\n        length=64,\n        salt=salt,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7499c80320ce55:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\nfrom hashlib import sha256\nfrom typing import Tuple\nimport coincurve\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c18e9d425eddf1ec:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm CHACHA20"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/onion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 481,
            "startColumn" : 17,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 479,
            "endLine" : 483,
            "snippet" : {
              "text" : "\ndef chacha20_stream(key: bytes, dest: Union[bytearray, memoryview]):\n    algorithm = algorithms.ChaCha20(key, b'\\x00' * 16)\n    cipher = Cipher(algorithm, None, backend=default_backend())\n    encryptor = cipher.encryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2a4a49d95ec3d8cf:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm CHACHA20POLY1305"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 57,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15bf3745e889214:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm SECP256R1 with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 19,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "def generate_cert(entity_type, ca_subject, ca_private_key, rest_host, certs_path):\n    # Generate Key pair\n    private_key = ec.generate_private_key(ec.SECP256R1())\n    public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b6552f2209d2a607:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 43,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "def generate_cert(entity_type, ca_subject, ca_private_key, rest_host, certs_path):\n    # Generate Key pair\n    private_key = ec.generate_private_key(ec.SECP256R1())\n    public_key = private_key.public_key()\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm HKDF"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 29,
            "startColumn" : 12,
            "endLine" : 34,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 27,
            "endLine" : 36,
            "snippet" : {
              "text" : "\ndef hkdf(ikm, salt=b\"\", info=b\"\"):\n    hkdf = HKDF(\n        algorithm=hashes.SHA256(),\n        length=64,\n        salt=salt,\n        info=info,\n        backend=default_backend())\n\n    return hkdf.derive(ikm)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1eca6e636a7c829:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
      "ruleIndex" : 12,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
        "index" : 12
      },
      "message" : {
        "text" : "Use of algorithm CHACHA20POLY1305"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 57,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15bf3745e889214:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "contrib/pyln-proto/pyln/proto/wire.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 57,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.ciphers.aead import ChaCha20Poly1305\nfrom cryptography.hazmat.primitives.kdf.hkdf import HKDF\nfrom .primitives import Secret, PrivateKey, PublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15bf3745e889214:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "plugins/clnrest/utilities/generate_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 43,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "def generate_cert(entity_type, ca_subject, ca_private_key, rest_host, certs_path):\n    # Generate Key pair\n    private_key = ec.generate_private_key(ec.SECP256R1())\n    public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b6552f2209d2a607:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:elementsproject/lightning/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}