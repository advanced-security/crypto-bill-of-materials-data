{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "lib/mysqlx/authentication.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "lib/mysql/connector/plugins/authentication_ldap_sasl_client.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "lib/mysql/connector/plugins/authentication_oci_client.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "lib/mysql/connector/plugins/caching_sha2_password.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "lib/mysql/connector/plugins/mysql_native_password.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "tests/test_examples.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "                else self._password\n            )\n            hash1 = hashlib.sha1(password).digest()\n            hash2 = hashlib.sha1(hash1).digest()\n            xored = xor_string(hash1, hashlib.sha1(data + hash2).digest(), 20)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "db6cbb004c4d1ba4:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 113,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 111,
            "endLine" : 115,
            "snippet" : {
              "text" : "            )\n            hash1 = hashlib.sha1(password).digest()\n            hash2 = hashlib.sha1(hash1).digest()\n            xored = xor_string(hash1, hashlib.sha1(data + hash2).digest(), 20)\n            return f\"\\0{self._username}\\0*{hexlify(xored)}\\0\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5935f58236498ad:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 114,
            "startColumn" : 39,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 112,
            "endLine" : 116,
            "snippet" : {
              "text" : "            hash1 = hashlib.sha1(password).digest()\n            hash2 = hashlib.sha1(hash1).digest()\n            xored = xor_string(hash1, hashlib.sha1(data + hash2).digest(), 20)\n            return f\"\\0{self._username}\\0*{hexlify(xored)}\\0\"\n        return f\"\\0{self._username}\\0\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1b12ee759e65d72a:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "            else self._password\n        )\n        hash1 = hashlib.sha256(password).digest()\n        hash2 = hashlib.sha256(hashlib.sha256(hash1).digest() + data).digest()\n        xored = xor_string(hash2, hash1, 32)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e15d6ee6c507072:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 184,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 182,
            "endLine" : 186,
            "snippet" : {
              "text" : "        )\n        hash1 = hashlib.sha256(password).digest()\n        hash2 = hashlib.sha256(hashlib.sha256(hash1).digest() + data).digest()\n        xored = xor_string(hash2, hash1, 32)\n        return f\"\\0{self._username}\\0{hexlify(xored)}\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7c71bdb6daaa680:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 184,
            "startColumn" : 32,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 182,
            "endLine" : 186,
            "snippet" : {
              "text" : "        )\n        hash1 = hashlib.sha256(password).digest()\n        hash2 = hashlib.sha256(hashlib.sha256(hash1).digest() + data).digest()\n        xored = xor_string(hash2, hash1, 32)\n        return f\"\\0{self._username}\\0{hexlify(xored)}\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7c71bdb6daaa680:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_ldap_sasl_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 102,
            "startColumn" : 49,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 100,
            "endLine" : 104,
            "snippet" : {
              "text" : "\n    def _hmac(self, password: bytes, salt: bytes) -> bytes:\n        digest_maker = hmac.new(password, salt, self.def_digest_mode)\n        return digest_maker.digest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f5e08961b248a2c4:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_ldap_sasl_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "\nfrom base64 import b64decode, b64encode\nfrom hashlib import sha1, sha256\nfrom typing import TYPE_CHECKING, Any, Callable, List, Optional, Tuple\nfrom uuid import uuid4\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "283a2f3b321a8d76:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_ldap_sasl_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 27,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "\nfrom base64 import b64decode, b64encode\nfrom hashlib import sha1, sha256\nfrom typing import TYPE_CHECKING, Any, Callable, List, Optional, Tuple\nfrom uuid import uuid4\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "283a2f3b321a8d76:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_oci_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 49,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "\n        private_key = self._get_private_key(oci_config[\"key_file\"])\n        signature = private_key.sign(auth_data, padding.PKCS1v15(), hashes.SHA256())\n\n        auth_response = self._prepare_auth_response(signature, oci_config)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "280ee982f80ffcbf:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_oci_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 69,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "\n        private_key = self._get_private_key(oci_config[\"key_file\"])\n        signature = private_key.sign(auth_data, padding.PKCS1v15(), hashes.SHA256())\n\n        auth_response = self._prepare_auth_response(signature, oci_config)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "280ee982f80ffcbf:1",
        "primaryLocationStartColumnFingerprint" : "60"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/caching_sha2_password.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "import struct\n\nfrom hashlib import sha256\nfrom typing import TYPE_CHECKING, Any, Optional\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38f53295ccafe381:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/mysql_native_password.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "import struct\n\nfrom hashlib import sha1\nfrom typing import TYPE_CHECKING, Any, Optional\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58f39ebe3c5d5f11:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_examples.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "import unittest\n\nfrom hashlib import md5\n\nimport mysql.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "59eb79144f784af3:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "                else self._password\n            )\n            hash1 = hashlib.sha1(password).digest()\n            hash2 = hashlib.sha1(hash1).digest()\n            xored = xor_string(hash1, hashlib.sha1(data + hash2).digest(), 20)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "db6cbb004c4d1ba4:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 113,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 111,
            "endLine" : 115,
            "snippet" : {
              "text" : "            )\n            hash1 = hashlib.sha1(password).digest()\n            hash2 = hashlib.sha1(hash1).digest()\n            xored = xor_string(hash1, hashlib.sha1(data + hash2).digest(), 20)\n            return f\"\\0{self._username}\\0*{hexlify(xored)}\\0\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5935f58236498ad:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 114,
            "startColumn" : 39,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 112,
            "endLine" : 116,
            "snippet" : {
              "text" : "            hash1 = hashlib.sha1(password).digest()\n            hash2 = hashlib.sha1(hash1).digest()\n            xored = xor_string(hash1, hashlib.sha1(data + hash2).digest(), 20)\n            return f\"\\0{self._username}\\0*{hexlify(xored)}\\0\"\n        return f\"\\0{self._username}\\0\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1b12ee759e65d72a:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "            else self._password\n        )\n        hash1 = hashlib.sha256(password).digest()\n        hash2 = hashlib.sha256(hashlib.sha256(hash1).digest() + data).digest()\n        xored = xor_string(hash2, hash1, 32)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e15d6ee6c507072:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 184,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 182,
            "endLine" : 186,
            "snippet" : {
              "text" : "        )\n        hash1 = hashlib.sha256(password).digest()\n        hash2 = hashlib.sha256(hashlib.sha256(hash1).digest() + data).digest()\n        xored = xor_string(hash2, hash1, 32)\n        return f\"\\0{self._username}\\0{hexlify(xored)}\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7c71bdb6daaa680:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysqlx/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 184,
            "startColumn" : 32,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 182,
            "endLine" : 186,
            "snippet" : {
              "text" : "        )\n        hash1 = hashlib.sha256(password).digest()\n        hash2 = hashlib.sha256(hashlib.sha256(hash1).digest() + data).digest()\n        xored = xor_string(hash2, hash1, 32)\n        return f\"\\0{self._username}\\0{hexlify(xored)}\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7c71bdb6daaa680:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_ldap_sasl_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 102,
            "startColumn" : 49,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 100,
            "endLine" : 104,
            "snippet" : {
              "text" : "\n    def _hmac(self, password: bytes, salt: bytes) -> bytes:\n        digest_maker = hmac.new(password, salt, self.def_digest_mode)\n        return digest_maker.digest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f5e08961b248a2c4:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_ldap_sasl_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "\nfrom base64 import b64decode, b64encode\nfrom hashlib import sha1, sha256\nfrom typing import TYPE_CHECKING, Any, Callable, List, Optional, Tuple\nfrom uuid import uuid4\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "283a2f3b321a8d76:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_ldap_sasl_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 27,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "\nfrom base64 import b64decode, b64encode\nfrom hashlib import sha1, sha256\nfrom typing import TYPE_CHECKING, Any, Callable, List, Optional, Tuple\nfrom uuid import uuid4\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "283a2f3b321a8d76:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_oci_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 69,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "\n        private_key = self._get_private_key(oci_config[\"key_file\"])\n        signature = private_key.sign(auth_data, padding.PKCS1v15(), hashes.SHA256())\n\n        auth_response = self._prepare_auth_response(signature, oci_config)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "280ee982f80ffcbf:1",
        "primaryLocationStartColumnFingerprint" : "60"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/caching_sha2_password.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "import struct\n\nfrom hashlib import sha256\nfrom typing import TYPE_CHECKING, Any, Optional\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38f53295ccafe381:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/mysql_native_password.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "import struct\n\nfrom hashlib import sha1\nfrom typing import TYPE_CHECKING, Any, Optional\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58f39ebe3c5d5f11:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_examples.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "import unittest\n\nfrom hashlib import md5\n\nimport mysql.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "59eb79144f784af3:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/mysql/connector/plugins/authentication_oci_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 49,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "\n        private_key = self._get_private_key(oci_config[\"key_file\"])\n        signature = private_key.sign(auth_data, padding.PKCS1v15(), hashes.SHA256())\n\n        auth_response = self._prepare_auth_response(signature, oci_config)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "280ee982f80ffcbf:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:mysql/mysql-connector-python/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}