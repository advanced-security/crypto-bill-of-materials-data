{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "pymongo/auth.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "pymongo/ocsp_support.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 236,
            "startColumn" : 18,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 234,
            "endLine" : 238,
            "snippet" : {
              "text" : "    username = credentials.username\n    if mechanism == \"SCRAM-SHA-256\":\n        digest = \"sha256\"\n        digestmod = hashlib.sha256\n        data = saslprep(credentials.password).encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2da6dbb5a846db86:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 237,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 235,
            "endLine" : 239,
            "snippet" : {
              "text" : "    if mechanism == \"SCRAM-SHA-256\":\n        digest = \"sha256\"\n        digestmod = hashlib.sha256\n        data = saslprep(credentials.password).encode(\"utf-8\")\n    else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4d160c47a667932:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 18,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "        data = saslprep(credentials.password).encode(\"utf-8\")\n    else:\n        digest = \"sha1\"\n        digestmod = hashlib.sha1\n        data = _password_digest(username, credentials.password).encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e2fe9c2580a18b74:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 241,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 239,
            "endLine" : 243,
            "snippet" : {
              "text" : "    else:\n        digest = \"sha1\"\n        digestmod = hashlib.sha1\n        data = _password_digest(username, credentials.password).encode(\"utf-8\")\n    source = credentials.source\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "76556692c4536ddd:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 279,
            "startColumn" : 23,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 277,
            "endLine" : 281,
            "snippet" : {
              "text" : "    # reasons. Either changing invalidates the cache.\n    if not client_key or salt != csalt or iterations != citerations:\n        salted_pass = hashlib.pbkdf2_hmac(digest, data, standard_b64decode(salt), iterations)\n        client_key = _hmac(salted_pass, b\"Client Key\", digestmod).digest()\n        server_key = _hmac(salted_pass, b\"Server Key\", digestmod).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "73fa677e37874dea:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 328,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 326,
            "endLine" : 330,
            "snippet" : {
              "text" : "        raise TypeError(\"username must be an instance of str\")\n\n    md5hash = hashlib.md5()  # noqa: S324\n    data = f\"{username}:mongo:{password}\"\n    md5hash.update(data.encode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5a35b4bdf6449ce:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 337,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 335,
            "endLine" : 339,
            "snippet" : {
              "text" : "    \"\"\"Get an auth key to use for authentication.\"\"\"\n    digest = _password_digest(username, password)\n    md5hash = hashlib.md5()  # noqa: S324\n    data = f\"{nonce}{username}{digest}\"\n    md5hash.update(data.encode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5baa59709fb93584:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 146,
            "startColumn" : 41,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 144,
            "endLine" : 148,
            "snippet" : {
              "text" : "    try:\n        if isinstance(key, _RSAPublicKey):\n            key.verify(signature, data, _PKCS1v15(), algorithm)  # type: ignore[arg-type]\n        elif isinstance(key, _DSAPublicKey):\n            key.verify(signature, data, algorithm)  # type: ignore[arg-type]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "98575c3d910f7e34:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : ")\nfrom cryptography.hazmat.primitives.asymmetric.padding import PKCS1v15 as _PKCS1v15\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPublicKey as _RSAPublicKey\nfrom cryptography.hazmat.primitives.asymmetric.x448 import (\n    X448PublicKey as _X448PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acf5a0902ba250bf:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 59,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : ")\nfrom cryptography.hazmat.primitives.asymmetric.padding import PKCS1v15 as _PKCS1v15\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPublicKey as _RSAPublicKey\nfrom cryptography.hazmat.primitives.asymmetric.x448 import (\n    X448PublicKey as _X448PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acf5a0902ba250bf:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 51,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 37,
            "endLine" : 41,
            "snippet" : {
              "text" : "    X25519PublicKey as _X25519PublicKey,\n)\nfrom cryptography.hazmat.primitives.hashes import SHA1 as _SHA1\nfrom cryptography.hazmat.primitives.hashes import Hash as _Hash\nfrom cryptography.hazmat.primitives.serialization import Encoding as _Encoding\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "333698ae0cc4df64:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 9,
            "endColumn" : 12
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "        ed448,\n        ed25519,\n        rsa,\n        x448,\n        x25519,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "845f6a6c943e7558:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 9,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "    CertificateIssuerPublicKeyTypes = Union[\n        dsa.DSAPublicKey,\n        rsa.RSAPublicKey,\n        ec.EllipticCurvePublicKey,\n        ed25519.Ed25519PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d80c705b677769c3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : ")\nfrom cryptography.hazmat.primitives.asymmetric.padding import PKCS1v15 as _PKCS1v15\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPublicKey as _RSAPublicKey\nfrom cryptography.hazmat.primitives.asymmetric.x448 import (\n    X448PublicKey as _X448PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acf5a0902ba250bf:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 59,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : ")\nfrom cryptography.hazmat.primitives.asymmetric.padding import PKCS1v15 as _PKCS1v15\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPublicKey as _RSAPublicKey\nfrom cryptography.hazmat.primitives.asymmetric.x448 import (\n    X448PublicKey as _X448PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acf5a0902ba250bf:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 9,
            "endColumn" : 12
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "        ed448,\n        ed25519,\n        rsa,\n        x448,\n        x25519,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "845f6a6c943e7558:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 9,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "    CertificateIssuerPublicKeyTypes = Union[\n        dsa.DSAPublicKey,\n        rsa.RSAPublicKey,\n        ec.EllipticCurvePublicKey,\n        ed25519.Ed25519PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d80c705b677769c3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 236,
            "startColumn" : 18,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 234,
            "endLine" : 238,
            "snippet" : {
              "text" : "    username = credentials.username\n    if mechanism == \"SCRAM-SHA-256\":\n        digest = \"sha256\"\n        digestmod = hashlib.sha256\n        data = saslprep(credentials.password).encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2da6dbb5a846db86:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 237,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 235,
            "endLine" : 239,
            "snippet" : {
              "text" : "    if mechanism == \"SCRAM-SHA-256\":\n        digest = \"sha256\"\n        digestmod = hashlib.sha256\n        data = saslprep(credentials.password).encode(\"utf-8\")\n    else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4d160c47a667932:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 18,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "        data = saslprep(credentials.password).encode(\"utf-8\")\n    else:\n        digest = \"sha1\"\n        digestmod = hashlib.sha1\n        data = _password_digest(username, credentials.password).encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e2fe9c2580a18b74:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 241,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 239,
            "endLine" : 243,
            "snippet" : {
              "text" : "    else:\n        digest = \"sha1\"\n        digestmod = hashlib.sha1\n        data = _password_digest(username, credentials.password).encode(\"utf-8\")\n    source = credentials.source\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "76556692c4536ddd:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 328,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 326,
            "endLine" : 330,
            "snippet" : {
              "text" : "        raise TypeError(\"username must be an instance of str\")\n\n    md5hash = hashlib.md5()  # noqa: S324\n    data = f\"{username}:mongo:{password}\"\n    md5hash.update(data.encode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5a35b4bdf6449ce:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 337,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 335,
            "endLine" : 339,
            "snippet" : {
              "text" : "    \"\"\"Get an auth key to use for authentication.\"\"\"\n    digest = _password_digest(username, password)\n    md5hash = hashlib.md5()  # noqa: S324\n    data = f\"{nonce}{username}{digest}\"\n    md5hash.update(data.encode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5baa59709fb93584:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 51,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 37,
            "endLine" : 41,
            "snippet" : {
              "text" : "    X25519PublicKey as _X25519PublicKey,\n)\nfrom cryptography.hazmat.primitives.hashes import SHA1 as _SHA1\nfrom cryptography.hazmat.primitives.hashes import Hash as _Hash\nfrom cryptography.hazmat.primitives.serialization import Encoding as _Encoding\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "333698ae0cc4df64:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 146,
            "startColumn" : 41,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 144,
            "endLine" : 148,
            "snippet" : {
              "text" : "    try:\n        if isinstance(key, _RSAPublicKey):\n            key.verify(signature, data, _PKCS1v15(), algorithm)  # type: ignore[arg-type]\n        elif isinstance(key, _DSAPublicKey):\n            key.verify(signature, data, algorithm)  # type: ignore[arg-type]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "98575c3d910f7e34:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 279,
            "startColumn" : 23,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 277,
            "endLine" : 281,
            "snippet" : {
              "text" : "    # reasons. Either changing invalidates the cache.\n    if not client_key or salt != csalt or iterations != citerations:\n        salted_pass = hashlib.pbkdf2_hmac(digest, data, standard_b64decode(salt), iterations)\n        client_key = _hmac(salted_pass, b\"Client Key\", digestmod).digest()\n        server_key = _hmac(salted_pass, b\"Server Key\", digestmod).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "73fa677e37874dea:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : ")\nfrom cryptography.hazmat.primitives.asymmetric.padding import PKCS1v15 as _PKCS1v15\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPublicKey as _RSAPublicKey\nfrom cryptography.hazmat.primitives.asymmetric.x448 import (\n    X448PublicKey as _X448PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acf5a0902ba250bf:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 59,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : ")\nfrom cryptography.hazmat.primitives.asymmetric.padding import PKCS1v15 as _PKCS1v15\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPublicKey as _RSAPublicKey\nfrom cryptography.hazmat.primitives.asymmetric.x448 import (\n    X448PublicKey as _X448PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "acf5a0902ba250bf:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 9,
            "endColumn" : 12
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "        ed448,\n        ed25519,\n        rsa,\n        x448,\n        x25519,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "845f6a6c943e7558:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pymongo/ocsp_support.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 9,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "    CertificateIssuerPublicKeyTypes = Union[\n        dsa.DSAPublicKey,\n        rsa.RSAPublicKey,\n        ec.EllipticCurvePublicKey,\n        ed25519.Ed25519PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d80c705b677769c3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:mongodb/mongo-python-driver/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}