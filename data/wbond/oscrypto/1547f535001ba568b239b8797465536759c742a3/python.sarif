{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "oscrypto/_asymmetric.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "oscrypto/_ecdsa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "oscrypto/_pkcs5.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "oscrypto/asymmetric.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "tests/test_trust_list.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "oscrypto/_win/trust_list.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "oscrypto/_mac/trust_list.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 329,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 327,
            "endLine" : 331,
            "snippet" : {
              "text" : "            to_hash = to_hash.encode('utf-8')\n\n        return hashlib.sha256(to_hash).digest()\n\n    if isinstance(key_object, PublicKeyInfo):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb4d27099d4b2bd2:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 361,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 359,
            "endLine" : 363,
            "snippet" : {
              "text" : "            to_hash = to_hash.encode('utf-8')\n\n        return hashlib.sha256(to_hash).digest()\n\n    raise ValueError(pretty_message(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "228c40b4ce8ab853:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 738,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 736,
            "endLine" : 740,
            "snippet" : {
              "text" : "    }[enc_algo]\n\n    enc_key = hashlib.md5(password + enc_iv[0:8]).digest()\n    while enc_key_length > len(enc_key):\n        enc_key += hashlib.md5(enc_key + password + enc_iv[0:8]).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "130a4a6496645107:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 740,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 738,
            "endLine" : 742,
            "snippet" : {
              "text" : "    enc_key = hashlib.md5(password + enc_iv[0:8]).digest()\n    while enc_key_length > len(enc_key):\n        enc_key += hashlib.md5(enc_key + password + enc_iv[0:8]).digest()\n    enc_key = enc_key[0:enc_key_length]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16c2a05081bbcae4:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 851,
            "startColumn" : 20,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 849,
            "endLine" : 853,
            "snippet" : {
              "text" : "            3  # ID 3 is for generating an HMAC key\n        )\n        hash_mod = getattr(hashlib, mac_algo)\n        computed_hmac = hmac.new(mac_key, auth_safe['content'].contents, hash_mod).digest()\n        stored_hmac = mac_data['mac']['digest'].native\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "80e4b2b3b09fea35:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 280,
            "startColumn" : 17,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 278,
            "endLine" : 282,
            "snippet" : {
              "text" : "        ))\n\n    hash_func = getattr(hashlib, hash_algorithm)\n\n    ec_private_key = private_key.asn1['private_key'].parsed\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8308ebdffbbef57:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_pkcs5.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 107,
            "startColumn" : 12,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 105,
            "endLine" : 109,
            "snippet" : {
              "text" : "        ))\n\n    algo = getattr(hashlib, hash_algorithm)\n\n    hash_length = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6eca6063982d913:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 444,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 442,
            "endLine" : 446,
            "snippet" : {
              "text" : "        passphrase_bytes = passphrase.encode('utf-8')\n\n        key = hashlib.md5(passphrase_bytes + iv[0:8]).digest()\n        while key_length > len(key):\n            key += hashlib.md5(key + passphrase_bytes + iv[0:8]).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa7a30c848a0efde:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 446,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 444,
            "endLine" : 448,
            "snippet" : {
              "text" : "        key = hashlib.md5(passphrase_bytes + iv[0:8]).digest()\n        while key_length > len(key):\n            key += hashlib.md5(key + passphrase_bytes + iv[0:8]).digest()\n        key = key[0:key_length]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a9edb6f75ffdd57:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_trust_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 20,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "                lambda_data['reasons'] += 1\n            self.assertIsInstance(cert, x509.Certificate)\n            sha1 = hashlib.sha1(cert.dump()).digest()\n            message = None\n            if sha1 in lambda_data['certs']:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dbe87f09214110cb:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_win/trust_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 85,
            "startColumn" : 22,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 83,
            "endLine" : 87,
            "snippet" : {
              "text" : "\n            data = bytes_from_buffer(context.pbCertEncoded, int(context.cbCertEncoded))\n            digest = hashlib.sha1(data).digest()\n            if digest in processed:\n                continue\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e44cf551a794f138:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_mac/trust_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 202,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 200,
            "endLine" : 204,
            "snippet" : {
              "text" : "        data_pointer = Security.SecCertificateCopyData(cert_pointer)\n        der_cert = CFHelpers.cf_data_to_bytes(data_pointer)\n        cert_hash = hashlib.sha1(der_cert).digest()\n\n        return (der_cert, cert_hash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "71a9184dc24e542d:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 329,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 327,
            "endLine" : 331,
            "snippet" : {
              "text" : "            to_hash = to_hash.encode('utf-8')\n\n        return hashlib.sha256(to_hash).digest()\n\n    if isinstance(key_object, PublicKeyInfo):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb4d27099d4b2bd2:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 361,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 359,
            "endLine" : 363,
            "snippet" : {
              "text" : "            to_hash = to_hash.encode('utf-8')\n\n        return hashlib.sha256(to_hash).digest()\n\n    raise ValueError(pretty_message(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "228c40b4ce8ab853:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 738,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 736,
            "endLine" : 740,
            "snippet" : {
              "text" : "    }[enc_algo]\n\n    enc_key = hashlib.md5(password + enc_iv[0:8]).digest()\n    while enc_key_length > len(enc_key):\n        enc_key += hashlib.md5(enc_key + password + enc_iv[0:8]).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "130a4a6496645107:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 740,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 738,
            "endLine" : 742,
            "snippet" : {
              "text" : "    enc_key = hashlib.md5(password + enc_iv[0:8]).digest()\n    while enc_key_length > len(enc_key):\n        enc_key += hashlib.md5(enc_key + password + enc_iv[0:8]).digest()\n    enc_key = enc_key[0:enc_key_length]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16c2a05081bbcae4:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 851,
            "startColumn" : 20,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 849,
            "endLine" : 853,
            "snippet" : {
              "text" : "            3  # ID 3 is for generating an HMAC key\n        )\n        hash_mod = getattr(hashlib, mac_algo)\n        computed_hmac = hmac.new(mac_key, auth_safe['content'].contents, hash_mod).digest()\n        stored_hmac = mac_data['mac']['digest'].native\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "80e4b2b3b09fea35:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 280,
            "startColumn" : 17,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 278,
            "endLine" : 282,
            "snippet" : {
              "text" : "        ))\n\n    hash_func = getattr(hashlib, hash_algorithm)\n\n    ec_private_key = private_key.asn1['private_key'].parsed\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8308ebdffbbef57:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_pkcs5.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 107,
            "startColumn" : 12,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 105,
            "endLine" : 109,
            "snippet" : {
              "text" : "        ))\n\n    algo = getattr(hashlib, hash_algorithm)\n\n    hash_length = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6eca6063982d913:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 444,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 442,
            "endLine" : 446,
            "snippet" : {
              "text" : "        passphrase_bytes = passphrase.encode('utf-8')\n\n        key = hashlib.md5(passphrase_bytes + iv[0:8]).digest()\n        while key_length > len(key):\n            key += hashlib.md5(key + passphrase_bytes + iv[0:8]).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa7a30c848a0efde:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/asymmetric.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 446,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 444,
            "endLine" : 448,
            "snippet" : {
              "text" : "        key = hashlib.md5(passphrase_bytes + iv[0:8]).digest()\n        while key_length > len(key):\n            key += hashlib.md5(key + passphrase_bytes + iv[0:8]).digest()\n        key = key[0:key_length]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a9edb6f75ffdd57:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_trust_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 20,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "                lambda_data['reasons'] += 1\n            self.assertIsInstance(cert, x509.Certificate)\n            sha1 = hashlib.sha1(cert.dump()).digest()\n            message = None\n            if sha1 in lambda_data['certs']:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dbe87f09214110cb:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_win/trust_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 85,
            "startColumn" : 22,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 83,
            "endLine" : 87,
            "snippet" : {
              "text" : "\n            data = bytes_from_buffer(context.pbCertEncoded, int(context.cbCertEncoded))\n            digest = hashlib.sha1(data).digest()\n            if digest in processed:\n                continue\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e44cf551a794f138:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "oscrypto/_mac/trust_list.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 202,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 200,
            "endLine" : 204,
            "snippet" : {
              "text" : "        data_pointer = Security.SecCertificateCopyData(cert_pointer)\n        der_cert = CFHelpers.cf_data_to_bytes(data_pointer)\n        cert_hash = hashlib.sha1(der_cert).digest()\n\n        return (der_cert, cert_hash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "71a9184dc24e542d:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:wbond/oscrypto/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}