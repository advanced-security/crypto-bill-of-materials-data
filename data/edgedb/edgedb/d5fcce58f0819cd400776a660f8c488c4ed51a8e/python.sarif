{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "edb/buildmeta.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "edb/pgsql/common.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "edb/server/compiler/compiler.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "tests/certs/gen.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "edb/server/protocol/auth_ext/http.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "edb/server/protocol/auth_ext/local.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "edb/server/pgcluster.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "edb/server/compiler_pool/pool.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "edb/tools/profiling/profiler.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "edb/schema/referencing.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "edb/server/protocol/auth/scram.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "edb/common/secretkey.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "edb/server/compiler_pool/server.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "tests/test_dump_basic.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "tests/test_http_ext_auth.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "edb/edgeql/tokenizer.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "edb/common/uuidgen.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/buildmeta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 221,
            "startColumn" : 9,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 219,
            "endLine" : 223,
            "snippet" : {
              "text" : "            paths.append(extra_file)\n\n    h = hashlib.sha1()  # sha1 is the fastest one.\n    for path in sorted(paths):\n        with open(path, 'rb') as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a0b12c291c3890a3:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/buildmeta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 569,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 567,
            "endLine" : 571,
            "snippet" : {
              "text" : "        build_type = \"official\"\n    version_line += f'.b{build_type}'\n    version_hash = hashlib.sha256(version_line.encode(\"utf-8\")).hexdigest()\n    full_version = f\"{version_line}.s{version_hash[:7]}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cc8bbc6542302c39:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/pgsql/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 168,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 166,
            "endLine" : 170,
            "snippet" : {
              "text" : "    # in this case.)\n    hashed = base64.b64encode(\n        hashlib.md5(name.encode(), usedforsecurity=False).digest()\n    ).decode().rstrip('=')\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7d90f3d90bd88ea:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler/compiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 570,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 568,
            "endLine" : 572,
            "snippet" : {
              "text" : "\n        def compute_stmt_name(text: str) -> str:\n            stmt_hash = hashlib.sha1(text.encode(\"utf-8\"))\n            for setting_name in sorted(fe_settings_mutable):\n                try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6c454994d345470:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler/compiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 24,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1391,
            "snippet" : {
              "text" : "    with cache.mutate() as cache_mm:\n        for eql, args in meta_blocks:\n            eql_hash = hashlib.sha1(eql.encode()).hexdigest()\n            fname = ('edgedb', f'__rh_{eql_hash}')\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5632d5620c7506d6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler/compiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 2994,
            "startColumn" : 9,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 2992,
            "endLine" : 2996,
            "snippet" : {
              "text" : "\ndef _hash_sql(sql: bytes, **kwargs: bytes) -> bytes:\n    h = hashlib.sha1(sql)\n    for param, val in kwargs.items():\n        h.update(param.encode('latin1'))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7a2aa71f4578973:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "def _new_cert(issuer=None, is_issuer=False, serial_number=None, **subject):\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9401ed2328ace153:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 19,
            "endLine" : 34,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 36,
            "snippet" : {
              "text" : "def _new_cert(issuer=None, is_issuer=False, serial_number=None, **subject):\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n    public_key = private_key.public_key()\n    subject = x509.Name(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9401ed2328ace153:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 130,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 128,
            "endLine" : 132,
            "snippet" : {
              "text" : "    certificate = builder.sign(\n        private_key=signing_key,\n        algorithm=hashes.SHA256(),\n        backend=backend,\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bcefd097d7e8828b:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 189,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 187,
            "endLine" : 191,
            "snippet" : {
              "text" : "        .add_revoked_certificate(revoked_cert)\n    )\n    crl = builder.sign(private_key=signing_key, algorithm=hashes.SHA256())\n    with open(path + \".crl.pem\", \"wb\") as f:\n        f.write(crl.public_bytes(encoding=serialization.Encoding.PEM))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "384bba12cbf66ffd:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.x509 import oid\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2dad5d9f551cade:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth_ext/http.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 368,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 366,
            "endLine" : 370,
            "snippet" : {
              "text" : "            raise errors.InvalidData(\"Code is not associated with an Identity\")\n\n        hashed_verifier = hashlib.sha256(verifier.encode()).digest()\n        base64_url_encoded_verifier = base64.urlsafe_b64encode(\n            hashed_verifier\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92ef8383175c7dd6:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth_ext/local.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "        )\n        secret = base64.b64encode(\n            hashlib.sha256(password_cred['password_hash'].encode()).digest()\n        ).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a5fd0b3f73f88ec:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth_ext/local.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 271,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 269,
            "endLine" : 273,
            "snippet" : {
              "text" : "\n        current_secret = base64.b64encode(\n            hashlib.sha256(password_cred['password_hash'].encode()).digest()\n        ).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6c1b606924128907:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/pgcluster.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 811,
            "startColumn" : 18,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 809,
            "endLine" : 813,
            "snippet" : {
              "text" : "            backend_dsn = f\"postgres://{host}:{port}/{database}\"\n        data = f\"{backend_dsn}|{tenant_id}\".encode(\"utf-8\")\n        digest = hashlib.blake2b(data, digest_size=8).digest()\n        rv: int = struct.unpack(\"q\", digest)[0]\n        return rv\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5a238af9a3963ae:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler_pool/pool.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1073,
            "startColumn" : 49,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1071,
            "endLine" : 1075,
            "snippet" : {
              "text" : "    async def _request(self, method_name, args):\n        msg = pickle.dumps((method_name, args))\n        digest = hmac.digest(self._secret, msg, \"sha256\")\n        return await self._con.request(digest + msg)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5d5f5bb8b6d0830d:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/tools/profiling/profiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 342,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 340,
            "endLine" : 344,
            "snippet" : {
              "text" : "\ndef gradient_from_name(name: str) -> float:\n    v = int(hashlib.sha1(name.encode(\"utf8\")).hexdigest()[:8], base=16)\n    return v / (0xFFFFFFFF + 1.0)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa9f86e297d6435:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/schema/referencing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 532,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 530,
            "endLine" : 534,
            "snippet" : {
              "text" : "                              schema: s_schema.Schema,\n                              exprs: Iterable[str]) -> str:\n        m = hashlib.sha1()\n        for expr in exprs:\n            m.update(expr.encode())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "deb686d581762e4c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth/scram.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 274,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 272,
            "endLine" : 276,
            "snippet" : {
              "text" : "    # The same approach is taken by Postgres.\n    nonce = tenant.get_instance_data(\"mock_auth_nonce\")\n    salt = hashlib.sha256(nonce.encode() + user.encode()).digest()\n\n    verifier = scram.SCRAMVerifier(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c182cd65a4bf3e9:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n    from cryptography.x509 import oid\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b905522ea620b6:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f29c83d962aa9352:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 19,
            "endLine" : 114,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 116,
            "snippet" : {
              "text" : "\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n    subject = x509.Name(\n        [x509.NameAttribute(oid.NameOID.COMMON_NAME, \"EdgeDB Server\")]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f29c83d962aa9352:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 141,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 139,
            "endLine" : 143,
            "snippet" : {
              "text" : "        .sign(\n            private_key=private_key,\n            algorithm=hashes.SHA256(),\n            backend=backend,\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6383622824efe644:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler_pool/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 440,
            "startColumn" : 62,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 438,
            "endLine" : 442,
            "snippet" : {
              "text" : "        msg = msg[32:]\n        try:\n            expected_digest = hmac.digest(self._secret, msg, \"sha256\")\n            if not hmac.compare_digest(digest, expected_digest):\n                raise AssertionError(\"message signature verification failed\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "80527b91ea03c5f8:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dump_basic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 65,
            "endLine" : 69,
            "snippet" : {
              "text" : "        # the basic dump I/O and network protocol functions correctly.\n\n        hasher = hashlib.sha1()\n\n        idx = 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8afd64f2813e5cd5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dump_basic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 102,
            "startColumn" : 22,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 100,
            "endLine" : 104,
            "snippet" : {
              "text" : "\n        try:\n            hasher = hashlib.sha1()\n            for idx in range(nrows):\n                # We don't have cursors yet and we also don't want to fetch\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fce3dd6429121cfa:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 533,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 531,
            "endLine" : 535,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 717,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 715,
            "endLine" : 719,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:2",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1049,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1047,
            "endLine" : 1051,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:3",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1135,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1133,
            "endLine" : 1137,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:4",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1347,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1345,
            "endLine" : 1349,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:5",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1417,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1415,
            "endLine" : 1419,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:6",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1559,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1557,
            "endLine" : 1561,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:7",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1699,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1697,
            "endLine" : 1701,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:8",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2331,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 2329,
            "endLine" : 2333,
            "snippet" : {
              "text" : "            verifier = base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n            challenge = base64.urlsafe_b64encode(\n                hashlib.sha256(verifier).digest()\n            ).rstrip(b'=')\n            pkce = await self.con.query_single(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b8003c7cc591c3b7:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2532,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2530,
            "endLine" : 2534,
            "snippet" : {
              "text" : "            self.assertTrue(\n                base64.b64encode(\n                    hashlib.sha256(\n                        password_credential[0].password_hash.encode()\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e715630d7bae9866:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2655,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2653,
            "endLine" : 2657,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(verifier).digest()\n                )\n                .rstrip(b'=')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "474ace8af573252e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2817,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2815,
            "endLine" : 2819,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(verifier).digest()\n                )\n                .rstrip(b'=')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "474ace8af573252e:2",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/edgeql/tokenizer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 27,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "class Source:\n    def __init__(self, text: str, tokens: List[ql_parser.Token]) -> None:\n        self._cache_key = hashlib.blake2b(text.encode('utf-8')).digest()\n        self._text = text\n        self._tokens = tokens\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "750b03b887fecbea:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/uuidgen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "    \"\"\"Generate a UUID from the SHA-1 hash of a namespace UUID and a name.\"\"\"\n    # Do the hashing ourselves because the stdlib version only supports str\n    hasher = hashlib.sha1(namespace.bytes)\n    hasher.update(name)\n    return UUID(uuid.UUID(bytes=hasher.digest()[:16], version=5).bytes)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6350252e6d1fee53:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "def _new_cert(issuer=None, is_issuer=False, serial_number=None, **subject):\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9401ed2328ace153:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 19,
            "endLine" : 34,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 36,
            "snippet" : {
              "text" : "def _new_cert(issuer=None, is_issuer=False, serial_number=None, **subject):\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n    public_key = private_key.public_key()\n    subject = x509.Name(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9401ed2328ace153:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.x509 import oid\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2dad5d9f551cade:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n    from cryptography.x509 import oid\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b905522ea620b6:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f29c83d962aa9352:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 19,
            "endLine" : 114,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 116,
            "snippet" : {
              "text" : "\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n    subject = x509.Name(\n        [x509.NameAttribute(oid.NameOID.COMMON_NAME, \"EdgeDB Server\")]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f29c83d962aa9352:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/buildmeta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 221,
            "startColumn" : 9,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 219,
            "endLine" : 223,
            "snippet" : {
              "text" : "            paths.append(extra_file)\n\n    h = hashlib.sha1()  # sha1 is the fastest one.\n    for path in sorted(paths):\n        with open(path, 'rb') as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a0b12c291c3890a3:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/buildmeta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 569,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 567,
            "endLine" : 571,
            "snippet" : {
              "text" : "        build_type = \"official\"\n    version_line += f'.b{build_type}'\n    version_hash = hashlib.sha256(version_line.encode(\"utf-8\")).hexdigest()\n    full_version = f\"{version_line}.s{version_hash[:7]}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cc8bbc6542302c39:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/pgsql/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 168,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 166,
            "endLine" : 170,
            "snippet" : {
              "text" : "    # in this case.)\n    hashed = base64.b64encode(\n        hashlib.md5(name.encode(), usedforsecurity=False).digest()\n    ).decode().rstrip('=')\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7d90f3d90bd88ea:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler/compiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 570,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 568,
            "endLine" : 572,
            "snippet" : {
              "text" : "\n        def compute_stmt_name(text: str) -> str:\n            stmt_hash = hashlib.sha1(text.encode(\"utf-8\"))\n            for setting_name in sorted(fe_settings_mutable):\n                try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6c454994d345470:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler/compiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 24,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1391,
            "snippet" : {
              "text" : "    with cache.mutate() as cache_mm:\n        for eql, args in meta_blocks:\n            eql_hash = hashlib.sha1(eql.encode()).hexdigest()\n            fname = ('edgedb', f'__rh_{eql_hash}')\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5632d5620c7506d6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler/compiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 2994,
            "startColumn" : 9,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 2992,
            "endLine" : 2996,
            "snippet" : {
              "text" : "\ndef _hash_sql(sql: bytes, **kwargs: bytes) -> bytes:\n    h = hashlib.sha1(sql)\n    for param, val in kwargs.items():\n        h.update(param.encode('latin1'))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7a2aa71f4578973:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 130,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 128,
            "endLine" : 132,
            "snippet" : {
              "text" : "    certificate = builder.sign(\n        private_key=signing_key,\n        algorithm=hashes.SHA256(),\n        backend=backend,\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bcefd097d7e8828b:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 189,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 187,
            "endLine" : 191,
            "snippet" : {
              "text" : "        .add_revoked_certificate(revoked_cert)\n    )\n    crl = builder.sign(private_key=signing_key, algorithm=hashes.SHA256())\n    with open(path + \".crl.pem\", \"wb\") as f:\n        f.write(crl.public_bytes(encoding=serialization.Encoding.PEM))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "384bba12cbf66ffd:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth_ext/http.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 368,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 366,
            "endLine" : 370,
            "snippet" : {
              "text" : "            raise errors.InvalidData(\"Code is not associated with an Identity\")\n\n        hashed_verifier = hashlib.sha256(verifier.encode()).digest()\n        base64_url_encoded_verifier = base64.urlsafe_b64encode(\n            hashed_verifier\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92ef8383175c7dd6:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth_ext/local.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "        )\n        secret = base64.b64encode(\n            hashlib.sha256(password_cred['password_hash'].encode()).digest()\n        ).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a5fd0b3f73f88ec:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth_ext/local.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 271,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 269,
            "endLine" : 273,
            "snippet" : {
              "text" : "\n        current_secret = base64.b64encode(\n            hashlib.sha256(password_cred['password_hash'].encode()).digest()\n        ).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6c1b606924128907:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/pgcluster.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 811,
            "startColumn" : 18,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 809,
            "endLine" : 813,
            "snippet" : {
              "text" : "            backend_dsn = f\"postgres://{host}:{port}/{database}\"\n        data = f\"{backend_dsn}|{tenant_id}\".encode(\"utf-8\")\n        digest = hashlib.blake2b(data, digest_size=8).digest()\n        rv: int = struct.unpack(\"q\", digest)[0]\n        return rv\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5a238af9a3963ae:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler_pool/pool.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1073,
            "startColumn" : 49,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1071,
            "endLine" : 1075,
            "snippet" : {
              "text" : "    async def _request(self, method_name, args):\n        msg = pickle.dumps((method_name, args))\n        digest = hmac.digest(self._secret, msg, \"sha256\")\n        return await self._con.request(digest + msg)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5d5f5bb8b6d0830d:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/tools/profiling/profiler.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 342,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 340,
            "endLine" : 344,
            "snippet" : {
              "text" : "\ndef gradient_from_name(name: str) -> float:\n    v = int(hashlib.sha1(name.encode(\"utf8\")).hexdigest()[:8], base=16)\n    return v / (0xFFFFFFFF + 1.0)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa9f86e297d6435:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/schema/referencing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 532,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 530,
            "endLine" : 534,
            "snippet" : {
              "text" : "                              schema: s_schema.Schema,\n                              exprs: Iterable[str]) -> str:\n        m = hashlib.sha1()\n        for expr in exprs:\n            m.update(expr.encode())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "deb686d581762e4c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/protocol/auth/scram.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 274,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 272,
            "endLine" : 276,
            "snippet" : {
              "text" : "    # The same approach is taken by Postgres.\n    nonce = tenant.get_instance_data(\"mock_auth_nonce\")\n    salt = hashlib.sha256(nonce.encode() + user.encode()).digest()\n\n    verifier = scram.SCRAMVerifier(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c182cd65a4bf3e9:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 141,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 139,
            "endLine" : 143,
            "snippet" : {
              "text" : "        .sign(\n            private_key=private_key,\n            algorithm=hashes.SHA256(),\n            backend=backend,\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6383622824efe644:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/server/compiler_pool/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 440,
            "startColumn" : 62,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 438,
            "endLine" : 442,
            "snippet" : {
              "text" : "        msg = msg[32:]\n        try:\n            expected_digest = hmac.digest(self._secret, msg, \"sha256\")\n            if not hmac.compare_digest(digest, expected_digest):\n                raise AssertionError(\"message signature verification failed\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "80527b91ea03c5f8:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dump_basic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 65,
            "endLine" : 69,
            "snippet" : {
              "text" : "        # the basic dump I/O and network protocol functions correctly.\n\n        hasher = hashlib.sha1()\n\n        idx = 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8afd64f2813e5cd5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dump_basic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 102,
            "startColumn" : 22,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 100,
            "endLine" : 104,
            "snippet" : {
              "text" : "\n        try:\n            hasher = hashlib.sha1()\n            for idx in range(nrows):\n                # We don't have cursors yet and we also don't want to fetch\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fce3dd6429121cfa:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 533,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 531,
            "endLine" : 535,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 717,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 715,
            "endLine" : 719,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:2",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1049,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1047,
            "endLine" : 1051,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:3",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1135,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1133,
            "endLine" : 1137,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:4",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1347,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1345,
            "endLine" : 1349,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:5",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1417,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1415,
            "endLine" : 1419,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:6",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1559,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1557,
            "endLine" : 1561,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:7",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1699,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1697,
            "endLine" : 1701,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(\n                        base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ea20547c3248a0d:8",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2331,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 2329,
            "endLine" : 2333,
            "snippet" : {
              "text" : "            verifier = base64.urlsafe_b64encode(os.urandom(43)).rstrip(b'=')\n            challenge = base64.urlsafe_b64encode(\n                hashlib.sha256(verifier).digest()\n            ).rstrip(b'=')\n            pkce = await self.con.query_single(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b8003c7cc591c3b7:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2532,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2530,
            "endLine" : 2534,
            "snippet" : {
              "text" : "            self.assertTrue(\n                base64.b64encode(\n                    hashlib.sha256(\n                        password_credential[0].password_hash.encode()\n                    ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e715630d7bae9866:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2655,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2653,
            "endLine" : 2657,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(verifier).digest()\n                )\n                .rstrip(b'=')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "474ace8af573252e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_http_ext_auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 2817,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2815,
            "endLine" : 2819,
            "snippet" : {
              "text" : "            challenge = (\n                base64.urlsafe_b64encode(\n                    hashlib.sha256(verifier).digest()\n                )\n                .rstrip(b'=')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "474ace8af573252e:2",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/edgeql/tokenizer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 27,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "class Source:\n    def __init__(self, text: str, tokens: List[ql_parser.Token]) -> None:\n        self._cache_key = hashlib.blake2b(text.encode('utf-8')).digest()\n        self._text = text\n        self._tokens = tokens\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "750b03b887fecbea:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/uuidgen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "    \"\"\"Generate a UUID from the SHA-1 hash of a namespace UUID and a name.\"\"\"\n    # Do the hashing ourselves because the stdlib version only supports str\n    hasher = hashlib.sha1(namespace.bytes)\n    hasher.update(name)\n    return UUID(uuid.UUID(bytes=hasher.digest()[:16], version=5).bytes)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6350252e6d1fee53:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 19,
            "endLine" : 34,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 36,
            "snippet" : {
              "text" : "def _new_cert(issuer=None, is_issuer=False, serial_number=None, **subject):\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n    public_key = private_key.public_key()\n    subject = x509.Name(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9401ed2328ace153:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 41,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n    public_key = private_key.public_key()\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 19,
            "endLine" : 114,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 116,
            "snippet" : {
              "text" : "\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n    subject = x509.Name(\n        [x509.NameAttribute(oid.NameOID.COMMON_NAME, \"EdgeDB Server\")]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f29c83d962aa9352:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 113,
            "startColumn" : 41,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 111,
            "endLine" : 115,
            "snippet" : {
              "text" : "    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n    subject = x509.Name(\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "def _new_cert(issuer=None, is_issuer=False, serial_number=None, **subject):\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9401ed2328ace153:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 19,
            "endLine" : 34,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 36,
            "snippet" : {
              "text" : "def _new_cert(issuer=None, is_issuer=False, serial_number=None, **subject):\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=backend\n    )\n    public_key = private_key.public_key()\n    subject = x509.Name(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9401ed2328ace153:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/certs/gen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.x509 import oid\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2dad5d9f551cade:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n    from cryptography.x509 import oid\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b905522ea620b6:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f29c83d962aa9352:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "edb/common/secretkey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 19,
            "endLine" : 114,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 116,
            "snippet" : {
              "text" : "\n    backend = backends.default_backend()\n    private_key = rsa.generate_private_key(\n        public_exponent=65537, key_size=2048, backend=backend\n    )\n    subject = x509.Name(\n        [x509.NameAttribute(oid.NameOID.COMMON_NAME, \"EdgeDB Server\")]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f29c83d962aa9352:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:edgedb/edgedb/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}