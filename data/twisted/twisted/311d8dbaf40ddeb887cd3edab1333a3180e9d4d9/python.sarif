{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "src/twisted/mail/_cred.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "src/twisted/cred/_digest.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/ssh/_kex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "src/twisted/mail/_pop3client.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "src/twisted/internet/_sslverify.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/scripts/ckeygen.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "src/twisted/cred/credentials.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/ssh/keys.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/client/knownhosts.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "src/twisted/mail/maildir.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "src/twisted/spread/pb.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "src/twisted/mail/pop3.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "src/twisted/words/protocols/jabber/sasl_mechanisms.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "src/twisted/cred/test/test_cramauth.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "src/twisted/cred/test/test_digestauth.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "src/twisted/words/test/test_jabberclient.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "src/twisted/words/test/test_jabbercomponent.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/test/test_keys.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "src/twisted/trial/test/test_loader.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "src/twisted/mail/test/test_mail.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "src/twisted/mail/test/test_pop3.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    }, {
      "location" : {
        "uri" : "src/twisted/test/test_sslverify.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/test/test_transport.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      }
    }, {
      "location" : {
        "uri" : "src/twisted/internet/test/test_unix.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      }
    }, {
      "location" : {
        "uri" : "src/twisted/python/test/test_zipstream.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/ssh/transport.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 25
      }
    }, {
      "location" : {
        "uri" : "src/twisted/words/protocols/jabber/xmlstream.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 26
      }
    }, {
      "location" : {
        "uri" : "src/twisted/python/randbytes.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 27
      }
    }, {
      "location" : {
        "uri" : "file:/usr/lib/python3/dist-packages/twisted/conch/manhole_tap.py",
        "index" : 28
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/manhole_tap.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 29
      }
    }, {
      "location" : {
        "uri" : "src/twisted/conch/test/test_recvline.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 30
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/_cred.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 29,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 27,
            "endLine" : 31,
            "snippet" : {
              "text" : "\n    def challengeResponse(self, secret, chal):\n        response = hmac.HMAC(secret, chal, digestmod=hashlib.md5).hexdigest()\n        return self.user + b\" \" + response.encode(\"ascii\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d07a44156eaa58e:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/_digest.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\n# The digest math\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86a976f0ffc942bb:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/_digest.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\n# The digest math\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86a976f0ffc942bb:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 27,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 35,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 43,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/_pop3client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "\nimport re\nfrom hashlib import md5\nfrom typing import List\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b056ae81fe7a1ec7:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/internet/_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "from binascii import hexlify\nfrom functools import lru_cache\nfrom hashlib import md5\nfrom typing import Dict\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "beda04afaac4e847:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 138,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 136,
            "endLine" : 140,
            "snippet" : {
              "text" : "def generateRSAkey(options):\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    if not options[\"bits\"]:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4f9c63f68b46c74a:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 20,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 144,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "567f715de58b903e:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 20,
            "endLine" : 146,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 148,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "567f715de58b903e:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 158,
            "startColumn" : 20,
            "endLine" : 161,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 156,
            "endLine" : 163,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 1024\n    keyPrimitive = dsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c9a7e3d08a431b2:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "    curve = b\"ecdsa-sha2-nistp\" + str(options[\"bits\"]).encode(\"ascii\")\n    keyPrimitive = ec.generate_private_key(\n        curve=keys._curveTable[curve], backend=default_backend()\n    )\n    key = keys.Key(keyPrimitive)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8949f4a44a537935:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/credentials.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 442,
            "startColumn" : 72,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 440,
            "endLine" : 444,
            "snippet" : {
              "text" : "\n    def checkPassword(self, password):\n        verify = hexlify(hmac.HMAC(password, self.challenge, digestmod=md5).digest())\n        return verify == self.response\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "96be356834cd440:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/credentials.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 18,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 16,
            "endLine" : 20,
            "snippet" : {
              "text" : "import time\nfrom binascii import hexlify\nfrom hashlib import md5\n\nfrom zope.interface import Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cf4c4716710e2e41:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 258,
            "startColumn" : 24,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 256,
            "endLine" : 260,
            "snippet" : {
              "text" : "        if keyType == b\"ssh-rsa\":\n            e, n, rest = common.getMP(rest, 2)\n            return cls(rsa.RSAPublicNumbers(e, n).public_key(default_backend()))\n        elif keyType == b\"ssh-dss\":\n            p, q, g, y, rest = common.getMP(rest, 4)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f9a5bee0aab8e55a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 446,
            "startColumn" : 17,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 444,
            "endLine" : 448,
            "snippet" : {
              "text" : "                raise BadKeyError(\"bad padding\")\n            decryptor = Cipher(\n                algorithmClass(decKey[:keySize]),\n                modes.CTR(decKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e779ff94797e053a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 447,
            "startColumn" : 17,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 445,
            "endLine" : 449,
            "snippet" : {
              "text" : "            decryptor = Cipher(\n                algorithmClass(decKey[:keySize]),\n                modes.CTR(decKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n            ).decryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b94c4ad6df77155d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 727,
            "startColumn" : 25,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 725,
            "endLine" : 729,
            "snippet" : {
              "text" : "        @return: An RSA key constructed from the values as given.\n        \"\"\"\n        publicNumbers = rsa.RSAPublicNumbers(e=e, n=n)\n        if d is None:\n            # We have public components.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec12f4a87824af11:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 732,
            "startColumn" : 30,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 730,
            "endLine" : 734,
            "snippet" : {
              "text" : "            keyObject = publicNumbers.public_key(default_backend())\n        else:\n            privateNumbers = rsa.RSAPrivateNumbers(\n                p=p,\n                q=q,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ca4fda5abc6eb4e9:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 736,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 734,
            "endLine" : 738,
            "snippet" : {
              "text" : "                q=q,\n                d=d,\n                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a280e6c321331e0:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 737,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 735,
            "endLine" : 739,
            "snippet" : {
              "text" : "                d=d,\n                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n                public_numbers=publicNumbers,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c0d5142c99b111a:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 738,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 736,
            "endLine" : 740,
            "snippet" : {
              "text" : "                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n                public_numbers=publicNumbers,\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e12f301b4565c8c3:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 799,
            "startColumn" : 29,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 797,
            "endLine" : 801,
            "snippet" : {
              "text" : "\n        publicNumbers = ec.EllipticCurvePublicNumbers(\n            x=x, y=y, curve=_curveTable[curve]\n        )\n        if privateValue is None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1f1a37506353f5b6:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 835,
            "startColumn" : 31,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 833,
            "endLine" : 837,
            "snippet" : {
              "text" : "        else:\n            keyObject = ec.derive_private_key(\n                privateValue, _curveTable[curve], default_backend()\n            )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f65ae6e8cd9dfedf:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 935,
            "startColumn" : 17,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 933,
            "endLine" : 937,
            "snippet" : {
              "text" : "            self._keyObject,\n            (\n                rsa.RSAPublicKey,\n                dsa.DSAPublicKey,\n                ec.EllipticCurvePublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b4d649221b5734c5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1004,
            "startColumn" : 41,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1002,
            "endLine" : 1006,
            "snippet" : {
              "text" : "        @raises RuntimeError: If the object type is unknown.\n        \"\"\"\n        if isinstance(self._keyObject, (rsa.RSAPublicKey, rsa.RSAPrivateKey)):\n            return \"RSA\"\n        elif isinstance(self._keyObject, (dsa.DSAPublicKey, dsa.DSAPrivateKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "802c065e59a94d52:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1004,
            "startColumn" : 59,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1002,
            "endLine" : 1006,
            "snippet" : {
              "text" : "        @raises RuntimeError: If the object type is unknown.\n        \"\"\"\n        if isinstance(self._keyObject, (rsa.RSAPublicKey, rsa.RSAPrivateKey)):\n            return \"RSA\"\n        elif isinstance(self._keyObject, (dsa.DSAPublicKey, dsa.DSAPrivateKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "802c065e59a94d52:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1066,
            "startColumn" : 28,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1064,
            "endLine" : 1068,
            "snippet" : {
              "text" : "                keySize = self.size()\n                if keySize <= 256:\n                    return hashes.SHA256()\n                elif keySize <= 384:\n                    return hashes.SHA384()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3b3ac48f5796eb9:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1068,
            "startColumn" : 28,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1066,
            "endLine" : 1070,
            "snippet" : {
              "text" : "                    return hashes.SHA256()\n                elif keySize <= 384:\n                    return hashes.SHA384()\n                else:\n                    return hashes.SHA512()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8dfaf965dbf308b:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1070,
            "startColumn" : 28,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1068,
            "endLine" : 1072,
            "snippet" : {
              "text" : "                    return hashes.SHA384()\n                else:\n                    return hashes.SHA512()\n            else:\n                return None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c55567370e7d9591:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1075,
            "startColumn" : 38,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1073,
            "endLine" : 1077,
            "snippet" : {
              "text" : "        else:\n            return {\n                (\"RSA\", b\"ssh-rsa\"): hashes.SHA1(),\n                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97ec2e57a4c016e3:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1076,
            "startColumn" : 43,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1074,
            "endLine" : 1078,
            "snippet" : {
              "text" : "            return {\n                (\"RSA\", b\"ssh-rsa\"): hashes.SHA1(),\n                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "61d34a1ff114aca:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1077,
            "startColumn" : 43,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1075,
            "endLine" : 1079,
            "snippet" : {
              "text" : "                (\"RSA\", b\"ssh-rsa\"): hashes.SHA1(),\n                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n                (\"Ed25519\", b\"ssh-ed25519\"): hashes.SHA512(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b3798df4ceb9de11:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1078,
            "startColumn" : 38,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1076,
            "endLine" : 1080,
            "snippet" : {
              "text" : "                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n                (\"Ed25519\", b\"ssh-ed25519\"): hashes.SHA512(),\n            }.get((self.type(), signatureType))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9efb08d32d03df8:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1079,
            "startColumn" : 46,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1077,
            "endLine" : 1081,
            "snippet" : {
              "text" : "                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n                (\"Ed25519\", b\"ssh-ed25519\"): hashes.SHA512(),\n            }.get((self.type(), signatureType))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "441d54681331c11a:1",
        "primaryLocationStartColumnFingerprint" : "29"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1103,
            "startColumn" : 40,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1101,
            "endLine" : 1105,
            "snippet" : {
              "text" : "        @rtype: L{dict}\n        \"\"\"\n        if isinstance(self._keyObject, rsa.RSAPublicKey):\n            rsa_pub_numbers = self._keyObject.public_numbers()\n            return {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "376cba6da7bc616b:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1109,
            "startColumn" : 42,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1107,
            "endLine" : 1111,
            "snippet" : {
              "text" : "                \"e\": rsa_pub_numbers.e,\n            }\n        elif isinstance(self._keyObject, rsa.RSAPrivateKey):\n            rsa_priv_numbers = self._keyObject.private_numbers()\n            return {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ac25adfbed7e9908:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1118,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 1116,
            "endLine" : 1120,
            "snippet" : {
              "text" : "                \"q\": rsa_priv_numbers.q,\n                # Use a trick: iqmp is q^-1 % p, u is p^-1 % q\n                \"u\": rsa.rsa_crt_iqmp(rsa_priv_numbers.q, rsa_priv_numbers.p),\n            }\n        elif isinstance(self._keyObject, dsa.DSAPublicKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e2cb2279a45c52f9:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1277,
            "startColumn" : 20,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1275,
            "endLine" : 1279,
            "snippet" : {
              "text" : "        data = self.data()\n        if type == \"RSA\":\n            iqmp = rsa.rsa_crt_iqmp(data[\"p\"], data[\"q\"])\n            return (\n                common.NS(b\"ssh-rsa\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc43e478bb83aa6d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1446,
            "startColumn" : 17,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1444,
            "endLine" : 1448,
            "snippet" : {
              "text" : "            encKey = bcrypt.kdf(passphrase, salt, keySize + ivSize, 100)\n            encryptor = Cipher(\n                cipher(encKey[:keySize]),\n                modes.CTR(encKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea07577f782044e5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1447,
            "startColumn" : 17,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 1445,
            "endLine" : 1449,
            "snippet" : {
              "text" : "            encryptor = Cipher(\n                cipher(encKey[:keySize]),\n                modes.CTR(encKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n            ).encryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3151648cde421976:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1571,
            "startColumn" : 24,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1569,
            "endLine" : 1573,
            "snippet" : {
              "text" : "            if type == \"RSA\":\n                p, q = data[\"p\"], data[\"q\"]\n                iqmp = rsa.rsa_crt_iqmp(p, q)\n                return sexpy.pack(\n                    [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6577b7a2476e951:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1663,
            "startColumn" : 46,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 1661,
            "endLine" : 1665,
            "snippet" : {
              "text" : "\n        if keyType == \"RSA\":\n            sig = self._keyObject.sign(data, padding.PKCS1v15(), hashAlgorithm)\n            ret = common.NS(sig)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "30634af6e82c7928:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1738,
            "startColumn" : 17,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1736,
            "endLine" : 1740,
            "snippet" : {
              "text" : "                common.getNS(signature)[0],\n                data,\n                padding.PKCS1v15(),\n                hashAlgorithm,\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a43874601f245a0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 22,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "    # If it doesn't exist, we want to generate a new key and save it\n    if not location.exists():\n        privateKey = rsa.generate_private_key(\n            public_exponent=65537, key_size=keySize, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e600c8044bb894f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 22,
            "endLine" : 1800,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1802,
            "snippet" : {
              "text" : "    # If it doesn't exist, we want to generate a new key and save it\n    if not location.exists():\n        privateKey = rsa.generate_private_key(\n            public_exponent=65537, key_size=keySize, backend=default_backend()\n        )\n\n        pem = privateKey.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e600c8044bb894f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import warnings\nfrom base64 import b64encode, decodebytes, encodebytes\nfrom hashlib import md5, sha256\nfrom typing import Any\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e1f9cde2072f3f21:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 26,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import warnings\nfrom base64 import b64encode, decodebytes, encodebytes\nfrom hashlib import md5, sha256\nfrom typing import Any\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e1f9cde2072f3f21:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 82,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.primitives.asymmetric import dsa, ec, ed25519, padding, rsa\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.serialization import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f7f559f12b5a1fe1:1",
        "primaryLocationStartColumnFingerprint" : "81"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 52,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 50,
            "endLine" : 54,
            "snippet" : {
              "text" : "# Curve lookup table\n_curveTable = {\n    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "331ee3ae6f2418a:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "_curveTable = {\n    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ad6c5c25910e1b9:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "47ecd05b79d23f84:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/client/knownhosts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 234,
            "startColumn" : 37,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 232,
            "endLine" : 236,
            "snippet" : {
              "text" : "    @rtype: L{bytes}\n    \"\"\"\n    hash = hmac.HMAC(key, digestmod=sha1)\n    if isinstance(string, str):\n        string = string.encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6858fcde0fb9066:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/client/knownhosts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from binascii import Error as DecodeError, a2b_base64, b2a_base64\nfrom contextlib import closing\nfrom hashlib import sha1\n\nfrom zope.interface import implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b797d9f671c7b63a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/maildir.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import socket\nimport stat\nfrom hashlib import md5\nfrom typing import IO\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e5b705662f3ba6c5:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/spread/pb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "\nimport random\nfrom hashlib import md5\n\nfrom zope.interface import Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d59f1fe69f14831:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/pop3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import binascii\nimport warnings\nfrom hashlib import md5\nfrom typing import Optional\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "704721b2eaea463f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/protocols/jabber/sasl_mechanisms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import random\nimport time\nfrom hashlib import md5\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "634b78a8d7b610bb:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_cramauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 62,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 38,
            "endLine" : 42,
            "snippet" : {
              "text" : "        c = CramMD5Credentials()\n        chal = c.getChallenge()\n        c.response = hexlify(HMAC(b\"secret\", chal, digestmod=hashlib.md5).digest())\n        self.assertTrue(c.checkPassword(b\"secret\"))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82b3412edd1d86dd:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_cramauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 53,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "        chal = c.getChallenge()\n        c.response = hexlify(\n            HMAC(b\"thewrongsecret\", chal, digestmod=hashlib.md5).digest()\n        )\n        self.assertFalse(c.checkPassword(b\"secret\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d79e61318b5c00a:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_cramauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 66,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "                (\n                    b\"squirrel\",\n                    hexlify(HMAC(b\"supersecret\", chal, digestmod=hashlib.md5).digest()),\n                )\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc7b34c745c3c4a9:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_digestauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import base64\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\nfrom zope.interface.verify import verifyObject\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5e13632112471f0:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_digestauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import base64\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\nfrom zope.interface.verify import verifyObject\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5e13632112471f0:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/test/test_jabberclient.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1\nfrom unittest import skipIf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5df04cae5add76ac:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/test/test_jabbercomponent.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "Tests for L{twisted.words.protocols.jabber.component}\n\"\"\"\nfrom hashlib import sha1\n\nfrom zope.interface.verify import verifyObject\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa03acfb96d85b4b:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 942,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 940,
            "endLine" : 944,
            "snippet" : {
              "text" : "            x=keydata.ECDatanistp256[\"x\"],\n            y=keydata.ECDatanistp256[\"y\"],\n            curve=ec.SECP256R1(),\n        )\n        ecblob = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2475aba446c033a:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA1()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9160a0d549c010d:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 71,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA1()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9160a0d549c010d:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1357,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1355,
            "endLine" : 1359,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA256()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e26b0aca640d2159:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1357,
            "startColumn" : 71,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1355,
            "endLine" : 1359,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA256()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e26b0aca640d2159:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1375,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1373,
            "endLine" : 1377,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA512()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd0bf852ae30635d:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1375,
            "startColumn" : 71,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1373,
            "endLine" : 1377,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA512()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd0bf852ae30635d:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/trial/test/test_loader.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import sys\nimport unittest as pyunit\nfrom hashlib import md5\nfrom operator import attrgetter\nfrom types import ModuleType\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0aff83616365e8e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/test/test_mail.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 19,
            "endLine" : 23,
            "snippet" : {
              "text" : "import textwrap\nimport time\nfrom hashlib import md5\nfrom unittest import skipIf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5239428c5a89e23d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/test/test_pop3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 1056,
            "startColumn" : 56,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1054,
            "endLine" : 1058,
            "snippet" : {
              "text" : "        chal = base64.b64decode(chal)\n        response = (\n            hmac.HMAC(b\"testpassword\", chal, digestmod=md5).hexdigest().encode(\"ascii\")\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1376f20c1d763384:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/test/test_pop3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "import itertools\nfrom collections import OrderedDict\nfrom hashlib import md5\nfrom io import BytesIO\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7e213b462231078:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "    )\n    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b637cc716fabac11:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 23,
            "endLine" : 175,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 177,
            "snippet" : {
              "text" : "    )\n    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForCA = privateKeyForCA.public_key()\n    caCertificate = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b637cc716fabac11:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 191,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 189,
            "endLine" : 193,
            "snippet" : {
              "text" : "        .sign(\n            private_key=privateKeyForCA,\n            algorithm=hashes.SHA256(),\n            backend=default_backend(),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51e82d6593e290e5:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 196,
            "startColumn" : 27,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 194,
            "endLine" : 198,
            "snippet" : {
              "text" : "    )\n\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8efee025aa65cabb:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 196,
            "startColumn" : 27,
            "endLine" : 198,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 194,
            "endLine" : 200,
            "snippet" : {
              "text" : "    )\n\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForServer = privateKeyForServer.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8efee025aa65cabb:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 228,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 226,
            "endLine" : 230,
            "snippet" : {
              "text" : "        .sign(\n            private_key=privateKeyForCA,\n            algorithm=hashes.SHA256(),\n            backend=default_backend(),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "308c3145fcf10ecc:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 46,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 44,
            "endLine" : 48,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives.asymmetric import rsa\n    from cryptography.hazmat.primitives.serialization import (\n        Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95d5bad7bdf75517:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 351,
            "startColumn" : 33,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 349,
            "endLine" : 353,
            "snippet" : {
              "text" : "    y = pow(g, x, p)\n    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a54a307e7b287b2:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 352,
            "startColumn" : 16,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 350,
            "endLine" : 354,
            "snippet" : {
              "text" : "    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9682b1a9d543326e:1",
        "primaryLocationStartColumnFingerprint" : "3"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 352,
            "startColumn" : 38,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 350,
            "endLine" : 354,
            "snippet" : {
              "text" : "    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9682b1a9d543326e:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2463,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2461,
            "endLine" : 2465,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2467,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2465,
            "endLine" : 2469,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:1",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2473,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 2471,
            "endLine" : 2475,
            "snippet" : {
              "text" : "            serialization.Encoding.X962, serialization.PublicFormat.UncompressedPoint\n        )\n        self.proto.curve = ec.SECP256R1()\n\n        self.proto.kexAlg = b\"ecdh-sha2-nistp256\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58e0c0e4b1cf4a3c:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2652,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2650,
            "endLine" : 2654,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:2",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2656,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2654,
            "endLine" : 2658,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:2",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2662,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 2660,
            "endLine" : 2664,
            "snippet" : {
              "text" : "            serialization.Encoding.X962, serialization.PublicFormat.UncompressedPoint\n        )\n        self.proto.curve = ec.SECP256R1()\n\n        self.proto.kexAlg = b\"ecdh-sha2-nistp256\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58e0c0e4b1cf4a3c:2",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 40,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 48,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 59,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import dh, ec\n\n    from twisted.conch.ssh import common, factory, keys, transport\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d7147c3e60e2d85:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/internet/test/test_unix.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "\n\nfrom hashlib import md5\nfrom os import close, fstat, stat, unlink, urandom\nfrom pprint import pformat\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fade2a3fbc82fe69:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/python/test/test_zipstream.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 13,
            "snippet" : {
              "text" : "import struct\nimport zipfile\nfrom hashlib import md5\n\nfrom twisted.python import filepath, zipstream\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cfe6d3ad90e4d077:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 258,
            "startColumn" : 49,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 256,
            "endLine" : 260,
            "snippet" : {
              "text" : "            return b\"\"\n        data = struct.pack(\">L\", seqid) + data\n        return hmac.HMAC(self.outMAC.key, data, self.outMAC[0]).digest()\n\n    def verify(self, seqid, data, mac):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0ad9ba6f0777ce1:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 279,
            "startColumn" : 49,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 277,
            "endLine" : 281,
            "snippet" : {
              "text" : "            return mac == b\"\"\n        data = struct.pack(\">L\", seqid) + data\n        outer = hmac.HMAC(self.inMAC.key, data, self.inMAC[0]).digest()\n        return hmac.compare_digest(mac, outer)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9bb939ad972204e3:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1146,
            "startColumn" : 19,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1144,
            "endLine" : 1148,
            "snippet" : {
              "text" : "        \"\"\"\n\n        numbers = dh.DHParameterNumbers(self.p, self.g)\n        parameters = numbers.parameters(default_backend())\n        self.dhSecretKey = parameters.generate_private_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7440275ef25cb69:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1163,
            "startColumn" : 21,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1161,
            "endLine" : 1165,
            "snippet" : {
              "text" : "        \"\"\"\n\n        remoteKey = dh.DHPublicNumbers(\n            remoteDHpublicKey, dh.DHParameterNumbers(self.p, self.g)\n        ).public_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb52c79d9e9e3061:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1164,
            "startColumn" : 32,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 1162,
            "endLine" : 1166,
            "snippet" : {
              "text" : "\n        remoteKey = dh.DHPublicNumbers(\n            remoteDHpublicKey, dh.DHParameterNumbers(self.p, self.g)\n        ).public_key(default_backend())\n        secret = self.dhSecretKey.exchange(remoteKey)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "94d7bb9291b613f2:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1354,
            "startColumn" : 25,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1352,
            "endLine" : 1356,
            "snippet" : {
              "text" : "        if self.kexAlg.startswith(b\"ecdh-sha2-nistp\"):\n            try:\n                curve = keys._curveTable[b\"ecdsa\" + self.kexAlg[4:]]\n            except KeyError:\n                raise UnsupportedAlgorithm(\"unused-key\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ba39c3e7c4d73e13:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 40,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 48,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 55,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import dh, ec, x25519\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom typing_extensions import Literal\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c3a83b6d24d49ea:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/protocols/jabber/xmlstream.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 25,
            "endLine" : 29,
            "snippet" : {
              "text" : "\nfrom binascii import hexlify\nfrom hashlib import sha1\nfrom sys import intern\nfrom typing import Optional, Tuple\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97a41ad673f77168:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 447,
            "startColumn" : 27,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 445,
            "endLine" : 449,
            "snippet" : {
              "text" : "            decryptor = Cipher(\n                algorithmClass(decKey[:keySize]),\n                modes.CTR(decKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n            ).decryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b94c4ad6df77155d:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1447,
            "startColumn" : 27,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1445,
            "endLine" : 1449,
            "snippet" : {
              "text" : "            encryptor = Cipher(\n                cipher(encKey[:keySize]),\n                modes.CTR(encKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n            ).encryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3151648cde421976:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/python/randbytes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 50,
            "startColumn" : 20,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 48,
            "endLine" : 52,
            "snippet" : {
              "text" : "        \"\"\"\n        try:\n            return os.urandom(nbytes)\n        except (AttributeError, NotImplementedError) as e:\n            raise SourceNotAvailable(e)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8156f23760e03afb:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/python/randbytes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 90,
            "startColumn" : 20,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 88,
            "endLine" : 92,
            "snippet" : {
              "text" : "            n = self.getrandbits(nbytes * 8)\n            hexBytes = (\"%%0%dx\" % (nbytes * 2)) % n\n            return _fromhex(hexBytes)\n        raise SourceNotAvailable(\"random.getrandbits is not available\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab1e1950d6602284:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/python/randbytes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 100,
            "startColumn" : 16,
            "endColumn" : 86
          },
          "contextRegion" : {
            "startLine" : 98,
            "endLine" : 102,
            "snippet" : {
              "text" : "        Wrapper around the C{random} module.\n        \"\"\"\n        return b\"\".join([bytes([random.choice(self._BYTES)]) for i in range(nbytes)])\n\n    def insecureRandom(self, nbytes: int) -> bytes:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "919171410fd6ead1:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 138,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 136,
            "endLine" : 140,
            "snippet" : {
              "text" : "def generateRSAkey(options):\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    if not options[\"bits\"]:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4f9c63f68b46c74a:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 20,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 144,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "567f715de58b903e:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 20,
            "endLine" : 146,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 148,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "567f715de58b903e:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 158,
            "startColumn" : 20,
            "endLine" : 161,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 156,
            "endLine" : 163,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 1024\n    keyPrimitive = dsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c9a7e3d08a431b2:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "    curve = b\"ecdsa-sha2-nistp\" + str(options[\"bits\"]).encode(\"ascii\")\n    keyPrimitive = ec.generate_private_key(\n        curve=keys._curveTable[curve], backend=default_backend()\n    )\n    key = keys.Key(keyPrimitive)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8949f4a44a537935:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 258,
            "startColumn" : 24,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 256,
            "endLine" : 260,
            "snippet" : {
              "text" : "        if keyType == b\"ssh-rsa\":\n            e, n, rest = common.getMP(rest, 2)\n            return cls(rsa.RSAPublicNumbers(e, n).public_key(default_backend()))\n        elif keyType == b\"ssh-dss\":\n            p, q, g, y, rest = common.getMP(rest, 4)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f9a5bee0aab8e55a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 727,
            "startColumn" : 25,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 725,
            "endLine" : 729,
            "snippet" : {
              "text" : "        @return: An RSA key constructed from the values as given.\n        \"\"\"\n        publicNumbers = rsa.RSAPublicNumbers(e=e, n=n)\n        if d is None:\n            # We have public components.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec12f4a87824af11:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 732,
            "startColumn" : 30,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 730,
            "endLine" : 734,
            "snippet" : {
              "text" : "            keyObject = publicNumbers.public_key(default_backend())\n        else:\n            privateNumbers = rsa.RSAPrivateNumbers(\n                p=p,\n                q=q,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ca4fda5abc6eb4e9:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 736,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 734,
            "endLine" : 738,
            "snippet" : {
              "text" : "                q=q,\n                d=d,\n                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a280e6c321331e0:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 737,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 735,
            "endLine" : 739,
            "snippet" : {
              "text" : "                d=d,\n                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n                public_numbers=publicNumbers,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c0d5142c99b111a:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 738,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 736,
            "endLine" : 740,
            "snippet" : {
              "text" : "                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n                public_numbers=publicNumbers,\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e12f301b4565c8c3:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 799,
            "startColumn" : 29,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 797,
            "endLine" : 801,
            "snippet" : {
              "text" : "\n        publicNumbers = ec.EllipticCurvePublicNumbers(\n            x=x, y=y, curve=_curveTable[curve]\n        )\n        if privateValue is None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1f1a37506353f5b6:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 835,
            "startColumn" : 31,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 833,
            "endLine" : 837,
            "snippet" : {
              "text" : "        else:\n            keyObject = ec.derive_private_key(\n                privateValue, _curveTable[curve], default_backend()\n            )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f65ae6e8cd9dfedf:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 935,
            "startColumn" : 17,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 933,
            "endLine" : 937,
            "snippet" : {
              "text" : "            self._keyObject,\n            (\n                rsa.RSAPublicKey,\n                dsa.DSAPublicKey,\n                ec.EllipticCurvePublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b4d649221b5734c5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1004,
            "startColumn" : 41,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1002,
            "endLine" : 1006,
            "snippet" : {
              "text" : "        @raises RuntimeError: If the object type is unknown.\n        \"\"\"\n        if isinstance(self._keyObject, (rsa.RSAPublicKey, rsa.RSAPrivateKey)):\n            return \"RSA\"\n        elif isinstance(self._keyObject, (dsa.DSAPublicKey, dsa.DSAPrivateKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "802c065e59a94d52:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1004,
            "startColumn" : 59,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1002,
            "endLine" : 1006,
            "snippet" : {
              "text" : "        @raises RuntimeError: If the object type is unknown.\n        \"\"\"\n        if isinstance(self._keyObject, (rsa.RSAPublicKey, rsa.RSAPrivateKey)):\n            return \"RSA\"\n        elif isinstance(self._keyObject, (dsa.DSAPublicKey, dsa.DSAPrivateKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "802c065e59a94d52:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1103,
            "startColumn" : 40,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1101,
            "endLine" : 1105,
            "snippet" : {
              "text" : "        @rtype: L{dict}\n        \"\"\"\n        if isinstance(self._keyObject, rsa.RSAPublicKey):\n            rsa_pub_numbers = self._keyObject.public_numbers()\n            return {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "376cba6da7bc616b:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1109,
            "startColumn" : 42,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1107,
            "endLine" : 1111,
            "snippet" : {
              "text" : "                \"e\": rsa_pub_numbers.e,\n            }\n        elif isinstance(self._keyObject, rsa.RSAPrivateKey):\n            rsa_priv_numbers = self._keyObject.private_numbers()\n            return {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ac25adfbed7e9908:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1118,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 1116,
            "endLine" : 1120,
            "snippet" : {
              "text" : "                \"q\": rsa_priv_numbers.q,\n                # Use a trick: iqmp is q^-1 % p, u is p^-1 % q\n                \"u\": rsa.rsa_crt_iqmp(rsa_priv_numbers.q, rsa_priv_numbers.p),\n            }\n        elif isinstance(self._keyObject, dsa.DSAPublicKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e2cb2279a45c52f9:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1277,
            "startColumn" : 20,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1275,
            "endLine" : 1279,
            "snippet" : {
              "text" : "        data = self.data()\n        if type == \"RSA\":\n            iqmp = rsa.rsa_crt_iqmp(data[\"p\"], data[\"q\"])\n            return (\n                common.NS(b\"ssh-rsa\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc43e478bb83aa6d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1571,
            "startColumn" : 24,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1569,
            "endLine" : 1573,
            "snippet" : {
              "text" : "            if type == \"RSA\":\n                p, q = data[\"p\"], data[\"q\"]\n                iqmp = rsa.rsa_crt_iqmp(p, q)\n                return sexpy.pack(\n                    [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6577b7a2476e951:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 22,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "    # If it doesn't exist, we want to generate a new key and save it\n    if not location.exists():\n        privateKey = rsa.generate_private_key(\n            public_exponent=65537, key_size=keySize, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e600c8044bb894f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 22,
            "endLine" : 1800,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1802,
            "snippet" : {
              "text" : "    # If it doesn't exist, we want to generate a new key and save it\n    if not location.exists():\n        privateKey = rsa.generate_private_key(\n            public_exponent=65537, key_size=keySize, backend=default_backend()\n        )\n\n        pem = privateKey.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e600c8044bb894f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 82,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.primitives.asymmetric import dsa, ec, ed25519, padding, rsa\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.serialization import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f7f559f12b5a1fe1:1",
        "primaryLocationStartColumnFingerprint" : "81"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 52,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 50,
            "endLine" : 54,
            "snippet" : {
              "text" : "# Curve lookup table\n_curveTable = {\n    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "331ee3ae6f2418a:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "_curveTable = {\n    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ad6c5c25910e1b9:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "47ecd05b79d23f84:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 942,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 940,
            "endLine" : 944,
            "snippet" : {
              "text" : "            x=keydata.ECDatanistp256[\"x\"],\n            y=keydata.ECDatanistp256[\"y\"],\n            curve=ec.SECP256R1(),\n        )\n        ecblob = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2475aba446c033a:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "    )\n    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b637cc716fabac11:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 23,
            "endLine" : 175,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 177,
            "snippet" : {
              "text" : "    )\n    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForCA = privateKeyForCA.public_key()\n    caCertificate = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b637cc716fabac11:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 196,
            "startColumn" : 27,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 194,
            "endLine" : 198,
            "snippet" : {
              "text" : "    )\n\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8efee025aa65cabb:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 196,
            "startColumn" : 27,
            "endLine" : 198,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 194,
            "endLine" : 200,
            "snippet" : {
              "text" : "    )\n\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForServer = privateKeyForServer.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8efee025aa65cabb:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 46,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 44,
            "endLine" : 48,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives.asymmetric import rsa\n    from cryptography.hazmat.primitives.serialization import (\n        Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95d5bad7bdf75517:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 351,
            "startColumn" : 33,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 349,
            "endLine" : 353,
            "snippet" : {
              "text" : "    y = pow(g, x, p)\n    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a54a307e7b287b2:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 352,
            "startColumn" : 16,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 350,
            "endLine" : 354,
            "snippet" : {
              "text" : "    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9682b1a9d543326e:1",
        "primaryLocationStartColumnFingerprint" : "3"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 352,
            "startColumn" : 38,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 350,
            "endLine" : 354,
            "snippet" : {
              "text" : "    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9682b1a9d543326e:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2463,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2461,
            "endLine" : 2465,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2467,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2465,
            "endLine" : 2469,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:1",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2473,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 2471,
            "endLine" : 2475,
            "snippet" : {
              "text" : "            serialization.Encoding.X962, serialization.PublicFormat.UncompressedPoint\n        )\n        self.proto.curve = ec.SECP256R1()\n\n        self.proto.kexAlg = b\"ecdh-sha2-nistp256\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58e0c0e4b1cf4a3c:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2652,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2650,
            "endLine" : 2654,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:2",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2656,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2654,
            "endLine" : 2658,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:2",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2662,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 2660,
            "endLine" : 2664,
            "snippet" : {
              "text" : "            serialization.Encoding.X962, serialization.PublicFormat.UncompressedPoint\n        )\n        self.proto.curve = ec.SECP256R1()\n\n        self.proto.kexAlg = b\"ecdh-sha2-nistp256\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58e0c0e4b1cf4a3c:2",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 59,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import dh, ec\n\n    from twisted.conch.ssh import common, factory, keys, transport\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d7147c3e60e2d85:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1146,
            "startColumn" : 19,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1144,
            "endLine" : 1148,
            "snippet" : {
              "text" : "        \"\"\"\n\n        numbers = dh.DHParameterNumbers(self.p, self.g)\n        parameters = numbers.parameters(default_backend())\n        self.dhSecretKey = parameters.generate_private_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7440275ef25cb69:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1163,
            "startColumn" : 21,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1161,
            "endLine" : 1165,
            "snippet" : {
              "text" : "        \"\"\"\n\n        remoteKey = dh.DHPublicNumbers(\n            remoteDHpublicKey, dh.DHParameterNumbers(self.p, self.g)\n        ).public_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb52c79d9e9e3061:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1164,
            "startColumn" : 32,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 1162,
            "endLine" : 1166,
            "snippet" : {
              "text" : "\n        remoteKey = dh.DHPublicNumbers(\n            remoteDHpublicKey, dh.DHParameterNumbers(self.p, self.g)\n        ).public_key(default_backend())\n        secret = self.dhSecretKey.exchange(remoteKey)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "94d7bb9291b613f2:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1354,
            "startColumn" : 25,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1352,
            "endLine" : 1356,
            "snippet" : {
              "text" : "        if self.kexAlg.startswith(b\"ecdh-sha2-nistp\"):\n            try:\n                curve = keys._curveTable[b\"ecdsa\" + self.kexAlg[4:]]\n            except KeyError:\n                raise UnsupportedAlgorithm(\"unused-key\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ba39c3e7c4d73e13:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 55,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import dh, ec, x25519\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom typing_extensions import Literal\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c3a83b6d24d49ea:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 351,
            "startColumn" : 33,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 349,
            "endLine" : 353,
            "snippet" : {
              "text" : "    y = pow(g, x, p)\n    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a54a307e7b287b2:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 352,
            "startColumn" : 16,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 350,
            "endLine" : 354,
            "snippet" : {
              "text" : "    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9682b1a9d543326e:1",
        "primaryLocationStartColumnFingerprint" : "3"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 352,
            "startColumn" : 38,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 350,
            "endLine" : 354,
            "snippet" : {
              "text" : "    try:\n        transport.dhSecretKey = dh.DHPrivateNumbers(\n            x, dh.DHPublicNumbers(y, dh.DHParameterNumbers(p, g))\n        ).private_key(default_backend())\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9682b1a9d543326e:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 59,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import dh, ec\n\n    from twisted.conch.ssh import common, factory, keys, transport\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d7147c3e60e2d85:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1146,
            "startColumn" : 19,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1144,
            "endLine" : 1148,
            "snippet" : {
              "text" : "        \"\"\"\n\n        numbers = dh.DHParameterNumbers(self.p, self.g)\n        parameters = numbers.parameters(default_backend())\n        self.dhSecretKey = parameters.generate_private_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7440275ef25cb69:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1163,
            "startColumn" : 21,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1161,
            "endLine" : 1165,
            "snippet" : {
              "text" : "        \"\"\"\n\n        remoteKey = dh.DHPublicNumbers(\n            remoteDHpublicKey, dh.DHParameterNumbers(self.p, self.g)\n        ).public_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb52c79d9e9e3061:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1164,
            "startColumn" : 32,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 1162,
            "endLine" : 1166,
            "snippet" : {
              "text" : "\n        remoteKey = dh.DHPublicNumbers(\n            remoteDHpublicKey, dh.DHParameterNumbers(self.p, self.g)\n        ).public_key(default_backend())\n        secret = self.dhSecretKey.exchange(remoteKey)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "94d7bb9291b613f2:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-exchange",
      "ruleIndex" : 5,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-exchange",
        "index" : 5
      },
      "message" : {
        "text" : "Use of algorithm DIFFIEHELLMAN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 55,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import dh, ec, x25519\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom typing_extensions import Literal\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c3a83b6d24d49ea:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/_cred.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 29,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 27,
            "endLine" : 31,
            "snippet" : {
              "text" : "\n    def challengeResponse(self, secret, chal):\n        response = hmac.HMAC(secret, chal, digestmod=hashlib.md5).hexdigest()\n        return self.user + b\" \" + response.encode(\"ascii\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d07a44156eaa58e:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/_digest.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\n# The digest math\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86a976f0ffc942bb:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/_digest.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\n# The digest math\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86a976f0ffc942bb:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 27,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 35,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/_kex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 43,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1, sha256, sha384, sha512\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae35c002feea2f14:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/_pop3client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "\nimport re\nfrom hashlib import md5\nfrom typing import List\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b056ae81fe7a1ec7:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/internet/_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "from binascii import hexlify\nfrom functools import lru_cache\nfrom hashlib import md5\nfrom typing import Dict\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "beda04afaac4e847:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/credentials.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 442,
            "startColumn" : 72,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 440,
            "endLine" : 444,
            "snippet" : {
              "text" : "\n    def checkPassword(self, password):\n        verify = hexlify(hmac.HMAC(password, self.challenge, digestmod=md5).digest())\n        return verify == self.response\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "96be356834cd440:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/credentials.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 18,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 16,
            "endLine" : 20,
            "snippet" : {
              "text" : "import time\nfrom binascii import hexlify\nfrom hashlib import md5\n\nfrom zope.interface import Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cf4c4716710e2e41:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1066,
            "startColumn" : 28,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1064,
            "endLine" : 1068,
            "snippet" : {
              "text" : "                keySize = self.size()\n                if keySize <= 256:\n                    return hashes.SHA256()\n                elif keySize <= 384:\n                    return hashes.SHA384()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3b3ac48f5796eb9:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1068,
            "startColumn" : 28,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1066,
            "endLine" : 1070,
            "snippet" : {
              "text" : "                    return hashes.SHA256()\n                elif keySize <= 384:\n                    return hashes.SHA384()\n                else:\n                    return hashes.SHA512()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8dfaf965dbf308b:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1070,
            "startColumn" : 28,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1068,
            "endLine" : 1072,
            "snippet" : {
              "text" : "                    return hashes.SHA384()\n                else:\n                    return hashes.SHA512()\n            else:\n                return None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c55567370e7d9591:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1075,
            "startColumn" : 38,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1073,
            "endLine" : 1077,
            "snippet" : {
              "text" : "        else:\n            return {\n                (\"RSA\", b\"ssh-rsa\"): hashes.SHA1(),\n                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97ec2e57a4c016e3:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1076,
            "startColumn" : 43,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1074,
            "endLine" : 1078,
            "snippet" : {
              "text" : "            return {\n                (\"RSA\", b\"ssh-rsa\"): hashes.SHA1(),\n                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "61d34a1ff114aca:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1077,
            "startColumn" : 43,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1075,
            "endLine" : 1079,
            "snippet" : {
              "text" : "                (\"RSA\", b\"ssh-rsa\"): hashes.SHA1(),\n                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n                (\"Ed25519\", b\"ssh-ed25519\"): hashes.SHA512(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b3798df4ceb9de11:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1078,
            "startColumn" : 38,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1076,
            "endLine" : 1080,
            "snippet" : {
              "text" : "                (\"RSA\", b\"rsa-sha2-256\"): hashes.SHA256(),\n                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n                (\"Ed25519\", b\"ssh-ed25519\"): hashes.SHA512(),\n            }.get((self.type(), signatureType))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9efb08d32d03df8:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1079,
            "startColumn" : 46,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1077,
            "endLine" : 1081,
            "snippet" : {
              "text" : "                (\"RSA\", b\"rsa-sha2-512\"): hashes.SHA512(),\n                (\"DSA\", b\"ssh-dss\"): hashes.SHA1(),\n                (\"Ed25519\", b\"ssh-ed25519\"): hashes.SHA512(),\n            }.get((self.type(), signatureType))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "441d54681331c11a:1",
        "primaryLocationStartColumnFingerprint" : "29"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import warnings\nfrom base64 import b64encode, decodebytes, encodebytes\nfrom hashlib import md5, sha256\nfrom typing import Any\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e1f9cde2072f3f21:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 26,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import warnings\nfrom base64 import b64encode, decodebytes, encodebytes\nfrom hashlib import md5, sha256\nfrom typing import Any\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e1f9cde2072f3f21:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/client/knownhosts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 234,
            "startColumn" : 37,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 232,
            "endLine" : 236,
            "snippet" : {
              "text" : "    @rtype: L{bytes}\n    \"\"\"\n    hash = hmac.HMAC(key, digestmod=sha1)\n    if isinstance(string, str):\n        string = string.encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6858fcde0fb9066:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/client/knownhosts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from binascii import Error as DecodeError, a2b_base64, b2a_base64\nfrom contextlib import closing\nfrom hashlib import sha1\n\nfrom zope.interface import implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b797d9f671c7b63a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/maildir.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import socket\nimport stat\nfrom hashlib import md5\nfrom typing import IO\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e5b705662f3ba6c5:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/spread/pb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 32,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 30,
            "endLine" : 34,
            "snippet" : {
              "text" : "\nimport random\nfrom hashlib import md5\n\nfrom zope.interface import Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d59f1fe69f14831:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/pop3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import binascii\nimport warnings\nfrom hashlib import md5\nfrom typing import Optional\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "704721b2eaea463f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/protocols/jabber/sasl_mechanisms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import random\nimport time\nfrom hashlib import md5\n\nfrom zope.interface import Attribute, Interface, implementer\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "634b78a8d7b610bb:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_cramauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 62,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 38,
            "endLine" : 42,
            "snippet" : {
              "text" : "        c = CramMD5Credentials()\n        chal = c.getChallenge()\n        c.response = hexlify(HMAC(b\"secret\", chal, digestmod=hashlib.md5).digest())\n        self.assertTrue(c.checkPassword(b\"secret\"))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82b3412edd1d86dd:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_cramauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 53,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "        chal = c.getChallenge()\n        c.response = hexlify(\n            HMAC(b\"thewrongsecret\", chal, digestmod=hashlib.md5).digest()\n        )\n        self.assertFalse(c.checkPassword(b\"secret\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d79e61318b5c00a:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_cramauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 66,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "                (\n                    b\"squirrel\",\n                    hexlify(HMAC(b\"supersecret\", chal, digestmod=hashlib.md5).digest()),\n                )\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc7b34c745c3c4a9:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_digestauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import base64\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\nfrom zope.interface.verify import verifyObject\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5e13632112471f0:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/cred/test/test_digestauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import base64\nfrom binascii import hexlify\nfrom hashlib import md5, sha1\n\nfrom zope.interface.verify import verifyObject\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5e13632112471f0:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/test/test_jabberclient.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "\n\nfrom hashlib import sha1\nfrom unittest import skipIf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5df04cae5add76ac:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/test/test_jabbercomponent.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "Tests for L{twisted.words.protocols.jabber.component}\n\"\"\"\nfrom hashlib import sha1\n\nfrom zope.interface.verify import verifyObject\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa03acfb96d85b4b:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 71,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA1()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9160a0d549c010d:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1357,
            "startColumn" : 71,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1355,
            "endLine" : 1359,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA256()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e26b0aca640d2159:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1375,
            "startColumn" : 71,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1373,
            "endLine" : 1377,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA512()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd0bf852ae30635d:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/trial/test/test_loader.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import sys\nimport unittest as pyunit\nfrom hashlib import md5\nfrom operator import attrgetter\nfrom types import ModuleType\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0aff83616365e8e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/test/test_mail.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 19,
            "endLine" : 23,
            "snippet" : {
              "text" : "import textwrap\nimport time\nfrom hashlib import md5\nfrom unittest import skipIf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5239428c5a89e23d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/test/test_pop3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 1056,
            "startColumn" : 56,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1054,
            "endLine" : 1058,
            "snippet" : {
              "text" : "        chal = base64.b64decode(chal)\n        response = (\n            hmac.HMAC(b\"testpassword\", chal, digestmod=md5).hexdigest().encode(\"ascii\")\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1376f20c1d763384:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/mail/test/test_pop3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "import itertools\nfrom collections import OrderedDict\nfrom hashlib import md5\nfrom io import BytesIO\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7e213b462231078:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 191,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 189,
            "endLine" : 193,
            "snippet" : {
              "text" : "        .sign(\n            private_key=privateKeyForCA,\n            algorithm=hashes.SHA256(),\n            backend=default_backend(),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51e82d6593e290e5:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 228,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 226,
            "endLine" : 230,
            "snippet" : {
              "text" : "        .sign(\n            private_key=privateKeyForCA,\n            algorithm=hashes.SHA256(),\n            backend=default_backend(),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "308c3145fcf10ecc:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 40,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 48,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "import struct\nimport types\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Dict, List, Optional, Tuple, Type\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "557dbcdc749f2e4a:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/internet/test/test_unix.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "\n\nfrom hashlib import md5\nfrom os import close, fstat, stat, unlink, urandom\nfrom pprint import pformat\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fade2a3fbc82fe69:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/python/test/test_zipstream.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 13,
            "snippet" : {
              "text" : "import struct\nimport zipfile\nfrom hashlib import md5\n\nfrom twisted.python import filepath, zipstream\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cfe6d3ad90e4d077:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 258,
            "startColumn" : 49,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 256,
            "endLine" : 260,
            "snippet" : {
              "text" : "            return b\"\"\n        data = struct.pack(\">L\", seqid) + data\n        return hmac.HMAC(self.outMAC.key, data, self.outMAC[0]).digest()\n\n    def verify(self, seqid, data, mac):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0ad9ba6f0777ce1:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 279,
            "startColumn" : 49,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 277,
            "endLine" : 281,
            "snippet" : {
              "text" : "            return mac == b\"\"\n        data = struct.pack(\">L\", seqid) + data\n        outer = hmac.HMAC(self.inMAC.key, data, self.inMAC[0]).digest()\n        return hmac.compare_digest(mac, outer)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9bb939ad972204e3:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 40,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 48,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "import types\nimport zlib\nfrom hashlib import md5, sha1, sha256, sha384, sha512\nfrom typing import Any, Callable, Dict, Tuple, Union\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2532be94bc15df99:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/words/protocols/jabber/xmlstream.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 27,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 25,
            "endLine" : 29,
            "snippet" : {
              "text" : "\nfrom binascii import hexlify\nfrom hashlib import sha1\nfrom sys import intern\nfrom typing import Optional, Tuple\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97a41ad673f77168:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 446,
            "startColumn" : 17,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 444,
            "endLine" : 448,
            "snippet" : {
              "text" : "                raise BadKeyError(\"bad padding\")\n            decryptor = Cipher(\n                algorithmClass(decKey[:keySize]),\n                modes.CTR(decKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e779ff94797e053a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1446,
            "startColumn" : 17,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 1444,
            "endLine" : 1448,
            "snippet" : {
              "text" : "            encKey = bcrypt.kdf(passphrase, salt, keySize + ivSize, 100)\n            encryptor = Cipher(\n                cipher(encKey[:keySize]),\n                modes.CTR(encKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea07577f782044e5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for int()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 20,
            "endLine" : 146,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 148,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "567f715de58b903e:1",
        "primaryLocationStartColumnFingerprint" : "15"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 143,
            "startColumn" : 18,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 141,
            "endLine" : 145,
            "snippet" : {
              "text" : "        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n        backend=default_backend(),\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for int()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm DSA with key config source [ControlFlowNode for int()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 158,
            "startColumn" : 20,
            "endLine" : 161,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 156,
            "endLine" : 163,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 1024\n    keyPrimitive = dsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c9a7e3d08a431b2:1",
        "primaryLocationStartColumnFingerprint" : "15"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 159,
            "startColumn" : 18,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 157,
            "endLine" : 161,
            "snippet" : {
              "text" : "        options[\"bits\"] = 1024\n    keyPrimitive = dsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        backend=default_backend(),\n    )\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for int()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Subscript](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 20,
            "endLine" : 178,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 180,
            "snippet" : {
              "text" : "    # See https://www.openssh.com/txt/release-5.7\n    curve = b\"ecdsa-sha2-nistp\" + str(options[\"bits\"]).encode(\"ascii\")\n    keyPrimitive = ec.generate_private_key(\n        curve=keys._curveTable[curve], backend=default_backend()\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bde445da4cb9067a:1",
        "primaryLocationStartColumnFingerprint" : "15"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "    curve = b\"ecdsa-sha2-nistp\" + str(options[\"bits\"]).encode(\"ascii\")\n    keyPrimitive = ec.generate_private_key(\n        curve=keys._curveTable[curve], backend=default_backend()\n    )\n    key = keys.Key(keyPrimitive)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Subscript"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for int()](2)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for int()](3)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](4)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](5)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](6)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](7)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](8)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 22,
            "endLine" : 1800,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1802,
            "snippet" : {
              "text" : "    # If it doesn't exist, we want to generate a new key and save it\n    if not location.exists():\n        privateKey = rsa.generate_private_key(\n            public_exponent=65537, key_size=keySize, backend=default_backend()\n        )\n\n        pem = privateKey.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e600c8044bb894f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1778,
            "startColumn" : 44,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 1776,
            "endLine" : 1780,
            "snippet" : {
              "text" : "\n\ndef _getPersistentRSAKey(location, keySize=4096):\n    \"\"\"\n    This function returns a persistent L{Key}.\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "file:/usr/lib/python3/dist-packages/twisted/conch/manhole_tap.py",
            "index" : 28
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 57,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "        keyLocation = filepath.FilePath(keyDir).child(options[\"sshKeyName\"])\n\n        sshKey = keys._getPersistentRSAKey(keyLocation, int(options[\"sshKeySize\"]))\n        sshFactory.publicKeys[b\"ssh-rsa\"] = sshKey\n        sshFactory.privateKeys[b\"ssh-rsa\"] = sshKey\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for int()"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/manhole_tap.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 57,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "        keyLocation = filepath.FilePath(keyDir).child(options[\"sshKeyName\"])\n\n        sshKey = keys._getPersistentRSAKey(keyLocation, int(options[\"sshKeySize\"]))\n        sshFactory.publicKeys[b\"ssh-rsa\"] = sshKey\n        sshFactory.privateKeys[b\"ssh-rsa\"] = sshKey\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for int()"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1678,
            "startColumn" : 58,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1676,
            "endLine" : 1680,
            "snippet" : {
              "text" : "        keyFile = tempDir.child(\"mykey.pem\")\n\n        key = keys._getPersistentRSAKey(keyFile, keySize=512)\n        self.assertEqual(key.size(), 512)\n        self.assertTrue(keyFile.exists())\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1690,
            "startColumn" : 58,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1688,
            "endLine" : 1692,
            "snippet" : {
              "text" : "        keyFile = tempDir.child(\"mykey.pem\")\n\n        key = keys._getPersistentRSAKey(keyFile, keySize=512)\n        self.assertEqual(key.size(), 512)\n        self.assertTrue(keyFile.exists())\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1697,
            "startColumn" : 58,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 1695,
            "endLine" : 1699,
            "snippet" : {
              "text" : "        # Set the key size to 1024 bits. Since it exists already, it will find\n        # the 512 bit key, and not generate a 1024 bit key.\n        key = keys._getPersistentRSAKey(keyFile, keySize=1024)\n        self.assertEqual(key.size(), 512)\n        self.assertEqual(keyFile.getContent(), keyContent)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 7,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1709,
            "startColumn" : 58,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1707,
            "endLine" : 1711,
            "snippet" : {
              "text" : "        keyFile = tempDir.child(\"mykey.pem\")\n\n        key = keys._getPersistentRSAKey(keyFile, keySize=512)\n        key._keyObject = None\n        self.assertEqual(key.size(), 0)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 8,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_recvline.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 509,
            "startColumn" : 55,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 507,
            "endLine" : 511,
            "snippet" : {
              "text" : "\n        sshKey = keys._getPersistentRSAKey(\n            filepath.FilePath(self.mktemp()), keySize=1024\n        )\n        sshFactory.publicKeys[b\"ssh-rsa\"] = sshKey\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 23,
            "endLine" : 175,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 177,
            "snippet" : {
              "text" : "    )\n    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForCA = privateKeyForCA.public_key()\n    caCertificate = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b637cc716fabac11:1",
        "primaryLocationStartColumnFingerprint" : "18"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 41,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForCA = privateKeyForCA.public_key()\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 196,
            "startColumn" : 27,
            "endLine" : 198,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 194,
            "endLine" : 200,
            "snippet" : {
              "text" : "    )\n\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForServer = privateKeyForServer.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8efee025aa65cabb:1",
        "primaryLocationStartColumnFingerprint" : "22"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 197,
            "startColumn" : 41,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 195,
            "endLine" : 199,
            "snippet" : {
              "text" : "\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForServer = privateKeyForServer.public_key()\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm SECP256R1 with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2463,
            "startColumn" : 29,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 2461,
            "endLine" : 2465,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:1",
        "primaryLocationStartColumnFingerprint" : "20"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2463,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2461,
            "endLine" : 2465,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm SECP256R1 with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2467,
            "startColumn" : 20,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 2465,
            "endLine" : 2469,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:1",
        "primaryLocationStartColumnFingerprint" : "11"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2467,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2465,
            "endLine" : 2469,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm SECP256R1 with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2652,
            "startColumn" : 29,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 2650,
            "endLine" : 2654,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:2",
        "primaryLocationStartColumnFingerprint" : "20"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2652,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2650,
            "endLine" : 2654,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm SECP256R1 with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2656,
            "startColumn" : 20,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 2654,
            "endLine" : 2658,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:2",
        "primaryLocationStartColumnFingerprint" : "11"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2656,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2654,
            "endLine" : 2658,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Subscript](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1358,
            "startColumn" : 20,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1356,
            "endLine" : 1360,
            "snippet" : {
              "text" : "                raise UnsupportedAlgorithm(\"unused-key\")\n\n            return ec.generate_private_key(curve, default_backend())\n        elif self.kexAlg in (b\"curve25519-sha256\", b\"curve25519-sha256@libssh.org\"):\n            return x25519.X25519PrivateKey.generate()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e4c8b63d7995f1ce:1",
        "primaryLocationStartColumnFingerprint" : "7"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 1354,
            "startColumn" : 25,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1352,
            "endLine" : 1356,
            "snippet" : {
              "text" : "        if self.kexAlg.startswith(b\"ecdh-sha2-nistp\"):\n            try:\n                curve = keys._curveTable[b\"ecdsa\" + self.kexAlg[4:]]\n            except KeyError:\n                raise UnsupportedAlgorithm(\"unused-key\")\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Subscript"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1663,
            "startColumn" : 46,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 1661,
            "endLine" : 1665,
            "snippet" : {
              "text" : "\n        if keyType == \"RSA\":\n            sig = self._keyObject.sign(data, padding.PKCS1v15(), hashAlgorithm)\n            ret = common.NS(sig)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "30634af6e82c7928:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1738,
            "startColumn" : 17,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1736,
            "endLine" : 1740,
            "snippet" : {
              "text" : "                common.getNS(signature)[0],\n                data,\n                padding.PKCS1v15(),\n                hashAlgorithm,\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a43874601f245a0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA1()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9160a0d549c010d:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1357,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1355,
            "endLine" : 1359,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA256()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e26b0aca640d2159:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1375,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 1373,
            "endLine" : 1377,
            "snippet" : {
              "text" : "        self.assertIsNone(\n            key._keyObject.public_key().verify(\n                common.getNS(signature)[0], data, padding.PKCS1v15(), hashes.SHA512()\n            )\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd0bf852ae30635d:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/signing-algorithms",
      "ruleIndex" : 11,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/signing-algorithms",
        "index" : 11
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 158,
            "startColumn" : 20,
            "endLine" : 161,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 156,
            "endLine" : 163,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 1024\n    keyPrimitive = dsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c9a7e3d08a431b2:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 138,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 136,
            "endLine" : 140,
            "snippet" : {
              "text" : "def generateRSAkey(options):\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    if not options[\"bits\"]:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4f9c63f68b46c74a:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 20,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 144,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "567f715de58b903e:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/scripts/ckeygen.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 20,
            "endLine" : 146,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 148,
            "snippet" : {
              "text" : "    if not options[\"bits\"]:\n        options[\"bits\"] = 2048\n    keyPrimitive = rsa.generate_private_key(\n        key_size=int(options[\"bits\"]),\n        public_exponent=65537,\n        backend=default_backend(),\n    )\n    key = keys.Key(keyPrimitive)\n    _saveKey(key, options)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "567f715de58b903e:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 258,
            "startColumn" : 24,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 256,
            "endLine" : 260,
            "snippet" : {
              "text" : "        if keyType == b\"ssh-rsa\":\n            e, n, rest = common.getMP(rest, 2)\n            return cls(rsa.RSAPublicNumbers(e, n).public_key(default_backend()))\n        elif keyType == b\"ssh-dss\":\n            p, q, g, y, rest = common.getMP(rest, 4)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f9a5bee0aab8e55a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 727,
            "startColumn" : 25,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 725,
            "endLine" : 729,
            "snippet" : {
              "text" : "        @return: An RSA key constructed from the values as given.\n        \"\"\"\n        publicNumbers = rsa.RSAPublicNumbers(e=e, n=n)\n        if d is None:\n            # We have public components.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec12f4a87824af11:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 732,
            "startColumn" : 30,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 730,
            "endLine" : 734,
            "snippet" : {
              "text" : "            keyObject = publicNumbers.public_key(default_backend())\n        else:\n            privateNumbers = rsa.RSAPrivateNumbers(\n                p=p,\n                q=q,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ca4fda5abc6eb4e9:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 736,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 734,
            "endLine" : 738,
            "snippet" : {
              "text" : "                q=q,\n                d=d,\n                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a280e6c321331e0:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 737,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 735,
            "endLine" : 739,
            "snippet" : {
              "text" : "                d=d,\n                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n                public_numbers=publicNumbers,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c0d5142c99b111a:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 738,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 736,
            "endLine" : 740,
            "snippet" : {
              "text" : "                dmp1=rsa.rsa_crt_dmp1(d, p),\n                dmq1=rsa.rsa_crt_dmq1(d, q),\n                iqmp=rsa.rsa_crt_iqmp(p, q),\n                public_numbers=publicNumbers,\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e12f301b4565c8c3:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 935,
            "startColumn" : 17,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 933,
            "endLine" : 937,
            "snippet" : {
              "text" : "            self._keyObject,\n            (\n                rsa.RSAPublicKey,\n                dsa.DSAPublicKey,\n                ec.EllipticCurvePublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b4d649221b5734c5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1004,
            "startColumn" : 41,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1002,
            "endLine" : 1006,
            "snippet" : {
              "text" : "        @raises RuntimeError: If the object type is unknown.\n        \"\"\"\n        if isinstance(self._keyObject, (rsa.RSAPublicKey, rsa.RSAPrivateKey)):\n            return \"RSA\"\n        elif isinstance(self._keyObject, (dsa.DSAPublicKey, dsa.DSAPrivateKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "802c065e59a94d52:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1004,
            "startColumn" : 59,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1002,
            "endLine" : 1006,
            "snippet" : {
              "text" : "        @raises RuntimeError: If the object type is unknown.\n        \"\"\"\n        if isinstance(self._keyObject, (rsa.RSAPublicKey, rsa.RSAPrivateKey)):\n            return \"RSA\"\n        elif isinstance(self._keyObject, (dsa.DSAPublicKey, dsa.DSAPrivateKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "802c065e59a94d52:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1103,
            "startColumn" : 40,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1101,
            "endLine" : 1105,
            "snippet" : {
              "text" : "        @rtype: L{dict}\n        \"\"\"\n        if isinstance(self._keyObject, rsa.RSAPublicKey):\n            rsa_pub_numbers = self._keyObject.public_numbers()\n            return {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "376cba6da7bc616b:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1109,
            "startColumn" : 42,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1107,
            "endLine" : 1111,
            "snippet" : {
              "text" : "                \"e\": rsa_pub_numbers.e,\n            }\n        elif isinstance(self._keyObject, rsa.RSAPrivateKey):\n            rsa_priv_numbers = self._keyObject.private_numbers()\n            return {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ac25adfbed7e9908:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1118,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 1116,
            "endLine" : 1120,
            "snippet" : {
              "text" : "                \"q\": rsa_priv_numbers.q,\n                # Use a trick: iqmp is q^-1 % p, u is p^-1 % q\n                \"u\": rsa.rsa_crt_iqmp(rsa_priv_numbers.q, rsa_priv_numbers.p),\n            }\n        elif isinstance(self._keyObject, dsa.DSAPublicKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e2cb2279a45c52f9:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1277,
            "startColumn" : 20,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1275,
            "endLine" : 1279,
            "snippet" : {
              "text" : "        data = self.data()\n        if type == \"RSA\":\n            iqmp = rsa.rsa_crt_iqmp(data[\"p\"], data[\"q\"])\n            return (\n                common.NS(b\"ssh-rsa\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc43e478bb83aa6d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1571,
            "startColumn" : 24,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1569,
            "endLine" : 1573,
            "snippet" : {
              "text" : "            if type == \"RSA\":\n                p, q = data[\"p\"], data[\"q\"]\n                iqmp = rsa.rsa_crt_iqmp(p, q)\n                return sexpy.pack(\n                    [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6577b7a2476e951:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 22,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "    # If it doesn't exist, we want to generate a new key and save it\n    if not location.exists():\n        privateKey = rsa.generate_private_key(\n            public_exponent=65537, key_size=keySize, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e600c8044bb894f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 22,
            "endLine" : 1800,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1802,
            "snippet" : {
              "text" : "    # If it doesn't exist, we want to generate a new key and save it\n    if not location.exists():\n        privateKey = rsa.generate_private_key(\n            public_exponent=65537, key_size=keySize, backend=default_backend()\n        )\n\n        pem = privateKey.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e600c8044bb894f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 82,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.primitives.asymmetric import dsa, ec, ed25519, padding, rsa\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.serialization import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f7f559f12b5a1fe1:1",
        "primaryLocationStartColumnFingerprint" : "81"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "    )\n    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b637cc716fabac11:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 23,
            "endLine" : 175,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 177,
            "snippet" : {
              "text" : "    )\n    oneDay = datetime.timedelta(1, 0, 0)\n    privateKeyForCA = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForCA = privateKeyForCA.public_key()\n    caCertificate = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b637cc716fabac11:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 196,
            "startColumn" : 27,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 194,
            "endLine" : 198,
            "snippet" : {
              "text" : "    )\n\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8efee025aa65cabb:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 196,
            "startColumn" : 27,
            "endLine" : 198,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 194,
            "endLine" : 200,
            "snippet" : {
              "text" : "    )\n\n    privateKeyForServer = rsa.generate_private_key(\n        public_exponent=65537, key_size=4096, backend=default_backend()\n    )\n    publicKeyForServer = privateKeyForServer.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8efee025aa65cabb:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/test/test_sslverify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 46,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 44,
            "endLine" : 48,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives.asymmetric import rsa\n    from cryptography.hazmat.primitives.serialization import (\n        Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95d5bad7bdf75517:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 447,
            "startColumn" : 17,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 445,
            "endLine" : 449,
            "snippet" : {
              "text" : "            decryptor = Cipher(\n                algorithmClass(decKey[:keySize]),\n                modes.CTR(decKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n            ).decryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b94c4ad6df77155d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1447,
            "startColumn" : 17,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 1445,
            "endLine" : 1449,
            "snippet" : {
              "text" : "            encryptor = Cipher(\n                cipher(encKey[:keySize]),\n                modes.CTR(encKey[keySize : keySize + ivSize]),\n                backend=default_backend(),\n            ).encryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3151648cde421976:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 52,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 50,
            "endLine" : 54,
            "snippet" : {
              "text" : "# Curve lookup table\n_curveTable = {\n    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "331ee3ae6f2418a:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1 with key size (in bits) 384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "_curveTable = {\n    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ad6c5c25910e1b9:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1 with key size (in bits) 521"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/ssh/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 29,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "    b\"ecdsa-sha2-nistp256\": ec.SECP256R1(),\n    b\"ecdsa-sha2-nistp384\": ec.SECP384R1(),\n    b\"ecdsa-sha2-nistp521\": ec.SECP521R1(),\n}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "47ecd05b79d23f84:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 942,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 940,
            "endLine" : 944,
            "snippet" : {
              "text" : "            x=keydata.ECDatanistp256[\"x\"],\n            y=keydata.ECDatanistp256[\"y\"],\n            curve=ec.SECP256R1(),\n        )\n        ecblob = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2475aba446c033a:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2463,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2461,
            "endLine" : 2465,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2467,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2465,
            "endLine" : 2469,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:1",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2473,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 2471,
            "endLine" : 2475,
            "snippet" : {
              "text" : "            serialization.Encoding.X962, serialization.PublicFormat.UncompressedPoint\n        )\n        self.proto.curve = ec.SECP256R1()\n\n        self.proto.kexAlg = b\"ecdh-sha2-nistp256\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58e0c0e4b1cf4a3c:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2652,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2650,
            "endLine" : 2654,
            "snippet" : {
              "text" : "        self.proto.dataReceived(b\"SSH-2.0-OpenSSH\\r\\n\")\n\n        self.proto.ecPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        self.proto.ecPub = self.proto.ecPriv.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1e2f8f191055289:2",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2656,
            "startColumn" : 44,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 2654,
            "endLine" : 2658,
            "snippet" : {
              "text" : "\n        # Generate the private key\n        thisPriv = ec.generate_private_key(ec.SECP256R1(), default_backend())\n        # Get the public key\n        thisPub = thisPriv.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9054c3ab0f95db2:2",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/twisted/conch/test/test_transport.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 2662,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 2660,
            "endLine" : 2664,
            "snippet" : {
              "text" : "            serialization.Encoding.X962, serialization.PublicFormat.UncompressedPoint\n        )\n        self.proto.curve = ec.SECP256R1()\n\n        self.proto.kexAlg = b\"ecdh-sha2-nistp256\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "58e0c0e4b1cf4a3c:2",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:twisted/twisted/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}