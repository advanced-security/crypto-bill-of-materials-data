{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "dns/dnssec.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "dns/dnssecalgs/dsa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "dns/dnssecalgs/ecdsa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "dns/dnssecalgs/eddsa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "dns/entropy.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "dns/dnssecalgs/rsa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "tests/test_dnssecalgs.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "tests/test_dnssec.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "dns/tsig.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "dns/zonetypes.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 236,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 234,
            "endLine" : 238,
            "snippet" : {
              "text" : "        raise ValueError(\"key is not a DNSKEY/CDNSKEY\")\n    if algorithm == DSDigest.SHA1:\n        dshash = hashlib.sha1()\n    elif algorithm == DSDigest.SHA256:\n        dshash = hashlib.sha256()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16b867e9d62197dd:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 238,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 236,
            "endLine" : 240,
            "snippet" : {
              "text" : "        dshash = hashlib.sha1()\n    elif algorithm == DSDigest.SHA256:\n        dshash = hashlib.sha256()\n    elif algorithm == DSDigest.SHA384:\n        dshash = hashlib.sha384()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a88e78c4ba04f26:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "        dshash = hashlib.sha256()\n    elif algorithm == DSDigest.SHA384:\n        dshash = hashlib.sha384()\n    else:\n        raise UnsupportedAlgorithm('unsupported algorithm \"%s\"' % algorithm)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9dbd7502604fd2cb:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 784,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 782,
            "endLine" : 786,
            "snippet" : {
              "text" : "    assert domain_encoded is not None\n\n    digest = hashlib.sha1(domain_encoded + salt_encoded).digest()\n    for _ in range(iterations):\n        digest = hashlib.sha1(digest + salt_encoded).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d167dca296ebd354:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 786,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 784,
            "endLine" : 788,
            "snippet" : {
              "text" : "    digest = hashlib.sha1(domain_encoded + salt_encoded).digest()\n    for _ in range(iterations):\n        digest = hashlib.sha1(digest + salt_encoded).digest()\n\n    output = base64.b32encode(digest).decode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f7e56e7cdcd02e82:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 483,
            "startColumn" : 20,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 481,
            "endLine" : 485,
            "snippet" : {
              "text" : "    expiration: Optional[Union[datetime, str, int, float]] = None,\n    lifetime: Optional[int] = None,\n    verify: bool = False,\n    policy: Optional[Policy] = None,\n    origin: Optional[dns.name.Name] = None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3ec073d6695e06a:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1177,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 1175,
            "endLine" : 1179,
            "snippet" : {
              "text" : "    from cryptography.hazmat.primitives.asymmetric import ec  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import ed448  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import rsa  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import (  # pylint: disable=W0611\n        ed25519,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec90505d909a5e32:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/dsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "    key_cls = dsa.DSAPublicKey\n    algorithm = Algorithm.DSA\n    chosen_hash = hashes.SHA1()\n\n    def verify(self, signature: bytes, data: bytes) -> None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4b138b27ec52f556:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/dsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 92,
            "startColumn" : 17,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 90,
            "endLine" : 94,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateDSA\":\n        return cls(\n            key=dsa.generate_private_key(key_size=key_size),\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad7e3c6716e07445:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 38,
            "startColumn" : 23,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 36,
            "endLine" : 40,
            "snippet" : {
              "text" : "        return cls(\n            key=ec.EllipticCurvePublicNumbers(\n                curve=cls.curve,\n                x=int.from_bytes(ecdsa_x, \"big\"),\n                y=int.from_bytes(ecdsa_y, \"big\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3a330d6ca36af7d9:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 23,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "        return cls(\n            key=ec.generate_private_key(\n                curve=cls.public_cls.curve, backend=default_backend()\n            ),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5424456f0411d00:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 70,
            "endLine" : 74,
            "snippet" : {
              "text" : "class PublicECDSAP256SHA256(PublicECDSA):\n    algorithm = Algorithm.ECDSAP256SHA256\n    chosen_hash = hashes.SHA256()\n    curve = ec.SECP256R1()\n    octets = 32\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "26cfd6edd3af867f:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 73,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 71,
            "endLine" : 75,
            "snippet" : {
              "text" : "    algorithm = Algorithm.ECDSAP256SHA256\n    chosen_hash = hashes.SHA256()\n    curve = ec.SECP256R1()\n    octets = 32\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ec0822186af93cd:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "class PublicECDSAP384SHA384(PublicECDSA):\n    algorithm = Algorithm.ECDSAP384SHA384\n    chosen_hash = hashes.SHA384()\n    curve = ec.SECP384R1()\n    octets = 48\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f171d98699d1db42:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "    algorithm = Algorithm.ECDSAP384SHA384\n    chosen_hash = hashes.SHA384()\n    curve = ec.SECP384R1()\n    octets = 48\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7af9855bb77e333:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/eddsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 13,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "        signature = self.key.sign(data)\n        if verify:\n            self.public_key().verify(signature, data)\n        return signature\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b89425deeb36ef4b:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/entropy.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        self.next_byte = 0\n        self.lock = threading.Lock()\n        self.hash = hashlib.sha1()\n        self.hash_len = 20\n        self.pool = bytearray(b\"\\0\" * self.hash_len)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f37f3eb33165a56d:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 42,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "\n    def verify(self, signature: bytes, data: bytes) -> None:\n        self.key.verify(signature, data, padding.PKCS1v15(), self.chosen_hash)\n\n    def encode_key_bytes(self) -> bytes:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9bd5bbeabf45be29:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 17,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "        rsa_n = keyptr[bytes_:]\n        return cls(\n            key=rsa.RSAPublicNumbers(\n                int.from_bytes(rsa_e, \"big\"), int.from_bytes(rsa_n, \"big\")\n            ).public_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e39011d128fdff03:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 10,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "\nclass PublicRSA(CryptographyPublicKey):\n    key: rsa.RSAPublicKey\n    key_cls = rsa.RSAPublicKey\n    algorithm: Algorithm\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "830fd95893dcd41e:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 15,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "class PublicRSA(CryptographyPublicKey):\n    key: rsa.RSAPublicKey\n    key_cls = rsa.RSAPublicKey\n    algorithm: Algorithm\n    chosen_hash: hashes.HashAlgorithm\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "609cd9f126fef1eb:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 41,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "    def sign(self, data: bytes, verify: bool = False) -> bytes:\n        \"\"\"Sign using a private key per RFC 3110, section 3.\"\"\"\n        signature = self.key.sign(data, padding.PKCS1v15(), self.public_cls.chosen_hash)\n        if verify:\n            self.public_key().verify(signature, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4afb64dbc1df1756:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 17,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 71,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateRSA\":\n        return cls(\n            key=rsa.generate_private_key(\n                public_exponent=cls.default_public_exponent,\n                key_size=key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "712e31ad7ce6d4b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 17,
            "endLine" : 73,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 75,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateRSA\":\n        return cls(\n            key=rsa.generate_private_key(\n                public_exponent=cls.default_public_exponent,\n                key_size=key_size,\n                backend=default_backend(),\n            )\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "712e31ad7ce6d4b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 10,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "\nclass PrivateRSA(CryptographyPrivateKey):\n    key: rsa.RSAPrivateKey\n    key_cls = rsa.RSAPrivateKey\n    public_cls = PublicRSA\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1bcbc5bafcc488:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 15,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "class PrivateRSA(CryptographyPrivateKey):\n    key: rsa.RSAPrivateKey\n    key_cls = rsa.RSAPrivateKey\n    public_cls = PublicRSA\n    default_public_exponent = 65537\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "784ec0433cae42b3:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 19,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "class PublicRSAMD5(PublicRSA):\n    algorithm = Algorithm.RSAMD5\n    chosen_hash = hashes.MD5()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "973c2a9bcc390e76:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 86,
            "endLine" : 90,
            "snippet" : {
              "text" : "class PublicRSASHA1(PublicRSA):\n    algorithm = Algorithm.RSASHA1\n    chosen_hash = hashes.SHA1()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79ebe213601d8c20:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "class PublicRSASHA1NSEC3SHA1(PublicRSA):\n    algorithm = Algorithm.RSASHA1NSEC3SHA1\n    chosen_hash = hashes.SHA1()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c0d1f1863225d1eb:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 106,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 104,
            "endLine" : 108,
            "snippet" : {
              "text" : "class PublicRSASHA256(PublicRSA):\n    algorithm = Algorithm.RSASHA256\n    chosen_hash = hashes.SHA256()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b432b1a108def2b7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 115,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 113,
            "endLine" : 117,
            "snippet" : {
              "text" : "class PublicRSASHA512(PublicRSA):\n    algorithm = Algorithm.RSASHA512\n    chosen_hash = hashes.SHA512()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d2fd6c8945582221:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 64,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding, rsa\n\nfrom dns.dnssecalgs.cryptography import CryptographyPrivateKey, CryptographyPublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84f28e70925adb1c:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 158,
            "startColumn" : 20,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 156,
            "endLine" : 160,
            "snippet" : {
              "text" : "            lifetime=lifetime,\n            signer=signer,\n            verify=True,\n            policy=None,\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f19ea4b544699392:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1322,
            "snippet" : {
              "text" : "\n    def testInvalidMakeDNSKEY(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4224eb9414529bd:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 15,
            "endLine" : 1324,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1326,
            "snippet" : {
              "text" : "\n    def testInvalidMakeDNSKEY(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n            backend=default_backend(),\n        )\n        with self.assertRaises(dns.exception.AlgorithmKeyMismatch):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.ED448)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4224eb9414529bd:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1331,
            "startColumn" : 15,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 1329,
            "endLine" : 1333,
            "snippet" : {
              "text" : "            dns.dnssec.make_dnskey(\"xyzzy\", dns.dnssec.Algorithm.ED448)\n\n        key = dsa.generate_private_key(2048)\n        with self.assertRaises(ValueError):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.DSA)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2422bc2a0d7fb591:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1391,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 15,
            "endLine" : 1391,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1393,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA1, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1395,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1393,
            "endLine" : 1397,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:2",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1395,
            "startColumn" : 15,
            "endLine" : 1397,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1393,
            "endLine" : 1399,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA256, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:2",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1401,
            "startColumn" : 45,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1399,
            "endLine" : 1403,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP256SHA256(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP256R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP256SHA256, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "213cb42db085212a:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1405,
            "startColumn" : 45,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1403,
            "endLine" : 1407,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP384SHA384(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP384R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP384SHA384, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "537914037c516fb0:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1449,
            "startColumn" : 20,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 1447,
            "endLine" : 1451,
            "snippet" : {
              "text" : "            lifetime=lifetime,\n            signer=signer,\n            verify=True,\n            policy=policy,\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68c6a23b841d49b5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 84,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "try:\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives.asymmetric import dsa, ec, ed448, ed25519, rsa\n    from cryptography.hazmat.primitives.serialization import load_pem_private_key\nexcept ImportError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "605c32259cb3f191:1",
        "primaryLocationStartColumnFingerprint" : "79"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 188,
            "startColumn" : 24,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 186,
            "endLine" : 190,
            "snippet" : {
              "text" : "    def __init__(self, key, algorithm):\n        try:\n            hashinfo = self._hashes[algorithm]\n        except KeyError:\n            raise NotImplementedError(f\"TSIG algorithm {algorithm} is not supported\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d647c5e21b860921:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 194,
            "startColumn" : 57,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 192,
            "endLine" : 196,
            "snippet" : {
              "text" : "        # create the HMAC context\n        if isinstance(hashinfo, tuple):\n            self.hmac_context = hmac.new(key, digestmod=hashinfo[0])\n            self.size = hashinfo[1]\n        else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab40cd307273edf6:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 175,
            "startColumn" : 20,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 173,
            "endLine" : 177,
            "snippet" : {
              "text" : "\n    _hashes = {\n        HMAC_SHA1: hashlib.sha1,\n        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95dec7453ada36fc:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "    _hashes = {\n        HMAC_SHA1: hashlib.sha1,\n        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5e2c64e0c24d7600:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "        HMAC_SHA1: hashlib.sha1,\n        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d7c7ecf7c018b2a:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 176,
            "endLine" : 180,
            "snippet" : {
              "text" : "        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d4132c24c40ee76:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 179,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 177,
            "endLine" : 181,
            "snippet" : {
              "text" : "        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "28304ae600b90542:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa1f285fd97046a2:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 181,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 179,
            "endLine" : 183,
            "snippet" : {
              "text" : "        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n        HMAC_MD5: hashlib.md5,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc754fe9dd4e7dd7:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 182,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 180,
            "endLine" : 184,
            "snippet" : {
              "text" : "        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n        HMAC_MD5: hashlib.md5,\n    }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "260ee8f82a98588:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n        HMAC_MD5: hashlib.md5,\n    }\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "473cc2192280d8fd:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/zonetypes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "\n_digest_hashers = {\n    DigestHashAlgorithm.SHA384: hashlib.sha384,\n    DigestHashAlgorithm.SHA512: hashlib.sha512,\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec910253c9f0cddc:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/zonetypes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 37,
            "snippet" : {
              "text" : "_digest_hashers = {\n    DigestHashAlgorithm.SHA384: hashlib.sha384,\n    DigestHashAlgorithm.SHA512: hashlib.sha512,\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9750354a38e2cc68:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1177,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 1175,
            "endLine" : 1179,
            "snippet" : {
              "text" : "    from cryptography.hazmat.primitives.asymmetric import ec  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import ed448  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import rsa  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import (  # pylint: disable=W0611\n        ed25519,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec90505d909a5e32:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/dsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 92,
            "startColumn" : 17,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 90,
            "endLine" : 94,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateDSA\":\n        return cls(\n            key=dsa.generate_private_key(key_size=key_size),\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad7e3c6716e07445:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 38,
            "startColumn" : 23,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 36,
            "endLine" : 40,
            "snippet" : {
              "text" : "        return cls(\n            key=ec.EllipticCurvePublicNumbers(\n                curve=cls.curve,\n                x=int.from_bytes(ecdsa_x, \"big\"),\n                y=int.from_bytes(ecdsa_y, \"big\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3a330d6ca36af7d9:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 23,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "        return cls(\n            key=ec.generate_private_key(\n                curve=cls.public_cls.curve, backend=default_backend()\n            ),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5424456f0411d00:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 73,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 71,
            "endLine" : 75,
            "snippet" : {
              "text" : "    algorithm = Algorithm.ECDSAP256SHA256\n    chosen_hash = hashes.SHA256()\n    curve = ec.SECP256R1()\n    octets = 32\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ec0822186af93cd:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "    algorithm = Algorithm.ECDSAP384SHA384\n    chosen_hash = hashes.SHA384()\n    curve = ec.SECP384R1()\n    octets = 48\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7af9855bb77e333:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 17,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "        rsa_n = keyptr[bytes_:]\n        return cls(\n            key=rsa.RSAPublicNumbers(\n                int.from_bytes(rsa_e, \"big\"), int.from_bytes(rsa_n, \"big\")\n            ).public_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e39011d128fdff03:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 10,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "\nclass PublicRSA(CryptographyPublicKey):\n    key: rsa.RSAPublicKey\n    key_cls = rsa.RSAPublicKey\n    algorithm: Algorithm\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "830fd95893dcd41e:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 15,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "class PublicRSA(CryptographyPublicKey):\n    key: rsa.RSAPublicKey\n    key_cls = rsa.RSAPublicKey\n    algorithm: Algorithm\n    chosen_hash: hashes.HashAlgorithm\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "609cd9f126fef1eb:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 17,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 71,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateRSA\":\n        return cls(\n            key=rsa.generate_private_key(\n                public_exponent=cls.default_public_exponent,\n                key_size=key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "712e31ad7ce6d4b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 17,
            "endLine" : 73,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 75,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateRSA\":\n        return cls(\n            key=rsa.generate_private_key(\n                public_exponent=cls.default_public_exponent,\n                key_size=key_size,\n                backend=default_backend(),\n            )\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "712e31ad7ce6d4b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 10,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "\nclass PrivateRSA(CryptographyPrivateKey):\n    key: rsa.RSAPrivateKey\n    key_cls = rsa.RSAPrivateKey\n    public_cls = PublicRSA\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1bcbc5bafcc488:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 15,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "class PrivateRSA(CryptographyPrivateKey):\n    key: rsa.RSAPrivateKey\n    key_cls = rsa.RSAPrivateKey\n    public_cls = PublicRSA\n    default_public_exponent = 65537\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "784ec0433cae42b3:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 64,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding, rsa\n\nfrom dns.dnssecalgs.cryptography import CryptographyPrivateKey, CryptographyPublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84f28e70925adb1c:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1322,
            "snippet" : {
              "text" : "\n    def testInvalidMakeDNSKEY(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4224eb9414529bd:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 15,
            "endLine" : 1324,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1326,
            "snippet" : {
              "text" : "\n    def testInvalidMakeDNSKEY(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n            backend=default_backend(),\n        )\n        with self.assertRaises(dns.exception.AlgorithmKeyMismatch):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.ED448)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4224eb9414529bd:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1331,
            "startColumn" : 15,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 1329,
            "endLine" : 1333,
            "snippet" : {
              "text" : "            dns.dnssec.make_dnskey(\"xyzzy\", dns.dnssec.Algorithm.ED448)\n\n        key = dsa.generate_private_key(2048)\n        with self.assertRaises(ValueError):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.DSA)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2422bc2a0d7fb591:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1391,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 15,
            "endLine" : 1391,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1393,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA1, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1395,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1393,
            "endLine" : 1397,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:2",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1395,
            "startColumn" : 15,
            "endLine" : 1397,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1393,
            "endLine" : 1399,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA256, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:2",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1401,
            "startColumn" : 45,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1399,
            "endLine" : 1403,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP256SHA256(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP256R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP256SHA256, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "213cb42db085212a:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1405,
            "startColumn" : 45,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1403,
            "endLine" : 1407,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP384SHA384(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP384R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP384SHA384, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "537914037c516fb0:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 84,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "try:\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives.asymmetric import dsa, ec, ed448, ed25519, rsa\n    from cryptography.hazmat.primitives.serialization import load_pem_private_key\nexcept ImportError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "605c32259cb3f191:1",
        "primaryLocationStartColumnFingerprint" : "79"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 236,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 234,
            "endLine" : 238,
            "snippet" : {
              "text" : "        raise ValueError(\"key is not a DNSKEY/CDNSKEY\")\n    if algorithm == DSDigest.SHA1:\n        dshash = hashlib.sha1()\n    elif algorithm == DSDigest.SHA256:\n        dshash = hashlib.sha256()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16b867e9d62197dd:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 238,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 236,
            "endLine" : 240,
            "snippet" : {
              "text" : "        dshash = hashlib.sha1()\n    elif algorithm == DSDigest.SHA256:\n        dshash = hashlib.sha256()\n    elif algorithm == DSDigest.SHA384:\n        dshash = hashlib.sha384()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a88e78c4ba04f26:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "        dshash = hashlib.sha256()\n    elif algorithm == DSDigest.SHA384:\n        dshash = hashlib.sha384()\n    else:\n        raise UnsupportedAlgorithm('unsupported algorithm \"%s\"' % algorithm)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9dbd7502604fd2cb:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 784,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 782,
            "endLine" : 786,
            "snippet" : {
              "text" : "    assert domain_encoded is not None\n\n    digest = hashlib.sha1(domain_encoded + salt_encoded).digest()\n    for _ in range(iterations):\n        digest = hashlib.sha1(digest + salt_encoded).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d167dca296ebd354:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 786,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 784,
            "endLine" : 788,
            "snippet" : {
              "text" : "    digest = hashlib.sha1(domain_encoded + salt_encoded).digest()\n    for _ in range(iterations):\n        digest = hashlib.sha1(digest + salt_encoded).digest()\n\n    output = base64.b32encode(digest).decode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f7e56e7cdcd02e82:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/dsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "    key_cls = dsa.DSAPublicKey\n    algorithm = Algorithm.DSA\n    chosen_hash = hashes.SHA1()\n\n    def verify(self, signature: bytes, data: bytes) -> None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4b138b27ec52f556:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 70,
            "endLine" : 74,
            "snippet" : {
              "text" : "class PublicECDSAP256SHA256(PublicECDSA):\n    algorithm = Algorithm.ECDSAP256SHA256\n    chosen_hash = hashes.SHA256()\n    curve = ec.SECP256R1()\n    octets = 32\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "26cfd6edd3af867f:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "class PublicECDSAP384SHA384(PublicECDSA):\n    algorithm = Algorithm.ECDSAP384SHA384\n    chosen_hash = hashes.SHA384()\n    curve = ec.SECP384R1()\n    octets = 48\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f171d98699d1db42:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/entropy.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        self.next_byte = 0\n        self.lock = threading.Lock()\n        self.hash = hashlib.sha1()\n        self.hash_len = 20\n        self.pool = bytearray(b\"\\0\" * self.hash_len)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f37f3eb33165a56d:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 19,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "class PublicRSAMD5(PublicRSA):\n    algorithm = Algorithm.RSAMD5\n    chosen_hash = hashes.MD5()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "973c2a9bcc390e76:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 86,
            "endLine" : 90,
            "snippet" : {
              "text" : "class PublicRSASHA1(PublicRSA):\n    algorithm = Algorithm.RSASHA1\n    chosen_hash = hashes.SHA1()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79ebe213601d8c20:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "class PublicRSASHA1NSEC3SHA1(PublicRSA):\n    algorithm = Algorithm.RSASHA1NSEC3SHA1\n    chosen_hash = hashes.SHA1()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c0d1f1863225d1eb:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 106,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 104,
            "endLine" : 108,
            "snippet" : {
              "text" : "class PublicRSASHA256(PublicRSA):\n    algorithm = Algorithm.RSASHA256\n    chosen_hash = hashes.SHA256()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b432b1a108def2b7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 115,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 113,
            "endLine" : 117,
            "snippet" : {
              "text" : "class PublicRSASHA512(PublicRSA):\n    algorithm = Algorithm.RSASHA512\n    chosen_hash = hashes.SHA512()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d2fd6c8945582221:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 188,
            "startColumn" : 24,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 186,
            "endLine" : 190,
            "snippet" : {
              "text" : "    def __init__(self, key, algorithm):\n        try:\n            hashinfo = self._hashes[algorithm]\n        except KeyError:\n            raise NotImplementedError(f\"TSIG algorithm {algorithm} is not supported\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d647c5e21b860921:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 194,
            "startColumn" : 57,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 192,
            "endLine" : 196,
            "snippet" : {
              "text" : "        # create the HMAC context\n        if isinstance(hashinfo, tuple):\n            self.hmac_context = hmac.new(key, digestmod=hashinfo[0])\n            self.size = hashinfo[1]\n        else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab40cd307273edf6:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 175,
            "startColumn" : 20,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 173,
            "endLine" : 177,
            "snippet" : {
              "text" : "\n    _hashes = {\n        HMAC_SHA1: hashlib.sha1,\n        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95dec7453ada36fc:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "    _hashes = {\n        HMAC_SHA1: hashlib.sha1,\n        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5e2c64e0c24d7600:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "        HMAC_SHA1: hashlib.sha1,\n        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d7c7ecf7c018b2a:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 176,
            "endLine" : 180,
            "snippet" : {
              "text" : "        HMAC_SHA224: hashlib.sha224,\n        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d4132c24c40ee76:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 179,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 177,
            "endLine" : 181,
            "snippet" : {
              "text" : "        HMAC_SHA256: hashlib.sha256,\n        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "28304ae600b90542:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "        HMAC_SHA256_128: (hashlib.sha256, 128),\n        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa1f285fd97046a2:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 181,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 179,
            "endLine" : 183,
            "snippet" : {
              "text" : "        HMAC_SHA384: hashlib.sha384,\n        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n        HMAC_MD5: hashlib.md5,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc754fe9dd4e7dd7:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 182,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 180,
            "endLine" : 184,
            "snippet" : {
              "text" : "        HMAC_SHA384_192: (hashlib.sha384, 192),\n        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n        HMAC_MD5: hashlib.md5,\n    }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "260ee8f82a98588:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/tsig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "        HMAC_SHA512: hashlib.sha512,\n        HMAC_SHA512_256: (hashlib.sha512, 256),\n        HMAC_MD5: hashlib.md5,\n    }\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "473cc2192280d8fd:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/zonetypes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "\n_digest_hashers = {\n    DigestHashAlgorithm.SHA384: hashlib.sha384,\n    DigestHashAlgorithm.SHA512: hashlib.sha512,\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec910253c9f0cddc:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/zonetypes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 33,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 37,
            "snippet" : {
              "text" : "_digest_hashers = {\n    DigestHashAlgorithm.SHA384: hashlib.sha384,\n    DigestHashAlgorithm.SHA512: hashlib.sha512,\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9750354a38e2cc68:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](1)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](2)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](3)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](4)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](5)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](6)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](7)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](8)\nAsymmetric key generation for algorithm DSA with key config source [ControlFlowNode for None](9)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/dsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 92,
            "startColumn" : 17,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 90,
            "endLine" : 94,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateDSA\":\n        return cls(\n            key=dsa.generate_private_key(key_size=key_size),\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad7e3c6716e07445:1",
        "primaryLocationStartColumnFingerprint" : "4"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 82,
            "startColumn" : 46,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 80,
            "endLine" : 84,
            "snippet" : {
              "text" : "\n    def test_rsa(self):\n        self._test_dnssec_alg(PrivateRSAMD5, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 47,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "    def test_rsa(self):\n        self._test_dnssec_alg(PrivateRSAMD5, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 56,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "        self._test_dnssec_alg(PrivateRSAMD5, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n        self._test_dnssec_alg(PrivateRSASHA512, 2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 85,
            "startColumn" : 49,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 83,
            "endLine" : 87,
            "snippet" : {
              "text" : "        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n        self._test_dnssec_alg(PrivateRSASHA512, 2048)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 49,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n        self._test_dnssec_alg(PrivateRSASHA512, 2048)\n\n    def test_dsa(self):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 89,
            "startColumn" : 43,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 87,
            "endLine" : 91,
            "snippet" : {
              "text" : "\n    def test_dsa(self):\n        self._test_dnssec_alg(PrivateDSA, 1024)\n        self._test_dnssec_alg(PrivateDSANSEC3SHA1, 1024)\n        with self.assertRaises(ValueError):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 7,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 90,
            "startColumn" : 52,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 88,
            "endLine" : 92,
            "snippet" : {
              "text" : "    def test_dsa(self):\n        self._test_dnssec_alg(PrivateDSA, 1024)\n        self._test_dnssec_alg(PrivateDSANSEC3SHA1, 1024)\n        with self.assertRaises(ValueError):\n            k = PrivateDSA.generate(2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 8,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 92,
            "startColumn" : 37,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 90,
            "endLine" : 94,
            "snippet" : {
              "text" : "        self._test_dnssec_alg(PrivateDSANSEC3SHA1, 1024)\n        with self.assertRaises(ValueError):\n            k = PrivateDSA.generate(2048)\n            k.sign(b\"hello\")\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 9,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 48,
            "startColumn" : 54,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 46,
            "endLine" : 50,
            "snippet" : {
              "text" : "@unittest.skipUnless(dns.dnssec._have_pyca, \"Python Cryptography cannot be imported\")\nclass DNSSECAlgorithm(unittest.TestCase):\n    def _test_dnssec_alg(self, private_cls, key_size=None):\n        public_cls = private_cls.public_cls\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for None"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Attribute](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 64,
            "startColumn" : 17,
            "endLine" : 66,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 62,
            "endLine" : 68,
            "snippet" : {
              "text" : "    def generate(cls) -> \"PrivateECDSA\":\n        return cls(\n            key=ec.generate_private_key(\n                curve=cls.public_cls.curve, backend=default_backend()\n            ),\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e1eda9f9de68d227:1",
        "primaryLocationStartColumnFingerprint" : "4"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 23,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "        return cls(\n            key=ec.generate_private_key(\n                curve=cls.public_cls.curve, backend=default_backend()\n            ),\n        )\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](2)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](3)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](4)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](5)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](6)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](7)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for None](8)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 17,
            "endLine" : 73,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 75,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateRSA\":\n        return cls(\n            key=rsa.generate_private_key(\n                public_exponent=cls.default_public_exponent,\n                key_size=key_size,\n                backend=default_backend(),\n            )\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "712e31ad7ce6d4b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 82,
            "startColumn" : 46,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 80,
            "endLine" : 84,
            "snippet" : {
              "text" : "\n    def test_rsa(self):\n        self._test_dnssec_alg(PrivateRSAMD5, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 47,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "    def test_rsa(self):\n        self._test_dnssec_alg(PrivateRSAMD5, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 56,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "        self._test_dnssec_alg(PrivateRSAMD5, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n        self._test_dnssec_alg(PrivateRSASHA512, 2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 85,
            "startColumn" : 49,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 83,
            "endLine" : 87,
            "snippet" : {
              "text" : "        self._test_dnssec_alg(PrivateRSASHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n        self._test_dnssec_alg(PrivateRSASHA512, 2048)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 49,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "        self._test_dnssec_alg(PrivateRSASHA1NSEC3SHA1, 2048)\n        self._test_dnssec_alg(PrivateRSASHA256, 2048)\n        self._test_dnssec_alg(PrivateRSASHA512, 2048)\n\n    def test_dsa(self):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 89,
            "startColumn" : 43,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 87,
            "endLine" : 91,
            "snippet" : {
              "text" : "\n    def test_dsa(self):\n        self._test_dnssec_alg(PrivateDSA, 1024)\n        self._test_dnssec_alg(PrivateDSANSEC3SHA1, 1024)\n        with self.assertRaises(ValueError):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 7,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 90,
            "startColumn" : 52,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 88,
            "endLine" : 92,
            "snippet" : {
              "text" : "    def test_dsa(self):\n        self._test_dnssec_alg(PrivateDSA, 1024)\n        self._test_dnssec_alg(PrivateDSANSEC3SHA1, 1024)\n        with self.assertRaises(ValueError):\n            k = PrivateDSA.generate(2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 8,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 48,
            "startColumn" : 54,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 46,
            "endLine" : 50,
            "snippet" : {
              "text" : "@unittest.skipUnless(dns.dnssec._have_pyca, \"Python Cryptography cannot be imported\")\nclass DNSSECAlgorithm(unittest.TestCase):\n    def _test_dnssec_alg(self, private_cls, key_size=None):\n        public_cls = private_cls.public_cls\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for None"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 15,
            "endLine" : 1324,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1326,
            "snippet" : {
              "text" : "\n    def testInvalidMakeDNSKEY(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n            backend=default_backend(),\n        )\n        with self.assertRaises(dns.exception.AlgorithmKeyMismatch):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.ED448)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4224eb9414529bd:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1322,
            "startColumn" : 22,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 1320,
            "endLine" : 1324,
            "snippet" : {
              "text" : "        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n            backend=default_backend(),\n        )\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1331,
            "startColumn" : 15,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 1329,
            "endLine" : 1333,
            "snippet" : {
              "text" : "            dns.dnssec.make_dnskey(\"xyzzy\", dns.dnssec.Algorithm.ED448)\n\n        key = dsa.generate_private_key(2048)\n        with self.assertRaises(ValueError):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.DSA)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2422bc2a0d7fb591:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1331,
            "startColumn" : 40,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 1329,
            "endLine" : 1333,
            "snippet" : {
              "text" : "            dns.dnssec.make_dnskey(\"xyzzy\", dns.dnssec.Algorithm.ED448)\n\n        key = dsa.generate_private_key(2048)\n        with self.assertRaises(ValueError):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.DSA)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 15,
            "endLine" : 1391,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1393,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA1, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1390,
            "startColumn" : 45,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1388,
            "endLine" : 1392,
            "snippet" : {
              "text" : "    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA1, abs_soa)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1395,
            "startColumn" : 15,
            "endLine" : 1397,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1393,
            "endLine" : 1399,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA256, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:2",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1396,
            "startColumn" : 45,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1394,
            "endLine" : 1398,
            "snippet" : {
              "text" : "    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA256, abs_soa)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Attribute](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1401,
            "startColumn" : 15,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 1399,
            "endLine" : 1403,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP256SHA256(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP256R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP256SHA256, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "213cb42db085212a:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1401,
            "startColumn" : 45,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1399,
            "endLine" : 1403,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP256SHA256(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP256R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP256SHA256, abs_soa)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Attribute](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1405,
            "startColumn" : 15,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 1403,
            "endLine" : 1407,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP384SHA384(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP384R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP384SHA384, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "537914037c516fb0:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1405,
            "startColumn" : 45,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1403,
            "endLine" : 1407,
            "snippet" : {
              "text" : "\n    def testSignatureECDSAP384SHA384(self):  # type: () -> None\n        key = ec.generate_private_key(curve=ec.SECP384R1, backend=default_backend())\n        self._test_signature(key, dns.dnssec.Algorithm.ECDSAP384SHA384, abs_soa)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 483,
            "startColumn" : 20,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 481,
            "endLine" : 485,
            "snippet" : {
              "text" : "    expiration: Optional[Union[datetime, str, int, float]] = None,\n    lifetime: Optional[int] = None,\n    verify: bool = False,\n    policy: Optional[Policy] = None,\n    origin: Optional[dns.name.Name] = None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3ec073d6695e06a:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/eddsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 13,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "        signature = self.key.sign(data)\n        if verify:\n            self.public_key().verify(signature, data)\n        return signature\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b89425deeb36ef4b:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 42,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "\n    def verify(self, signature: bytes, data: bytes) -> None:\n        self.key.verify(signature, data, padding.PKCS1v15(), self.chosen_hash)\n\n    def encode_key_bytes(self) -> bytes:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9bd5bbeabf45be29:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 41,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "    def sign(self, data: bytes, verify: bool = False) -> bytes:\n        \"\"\"Sign using a private key per RFC 3110, section 3.\"\"\"\n        signature = self.key.sign(data, padding.PKCS1v15(), self.public_cls.chosen_hash)\n        if verify:\n            self.public_key().verify(signature, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4afb64dbc1df1756:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssecalgs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 158,
            "startColumn" : 20,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 156,
            "endLine" : 160,
            "snippet" : {
              "text" : "            lifetime=lifetime,\n            signer=signer,\n            verify=True,\n            policy=None,\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f19ea4b544699392:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1449,
            "startColumn" : 20,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 1447,
            "endLine" : 1451,
            "snippet" : {
              "text" : "            lifetime=lifetime,\n            signer=signer,\n            verify=True,\n            policy=policy,\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68c6a23b841d49b5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/signing-algorithms",
      "ruleIndex" : 11,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/signing-algorithms",
        "index" : 11
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/dsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 92,
            "startColumn" : 17,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 90,
            "endLine" : 94,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateDSA\":\n        return cls(\n            key=dsa.generate_private_key(key_size=key_size),\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad7e3c6716e07445:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/signing-algorithms",
      "ruleIndex" : 11,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/signing-algorithms",
        "index" : 11
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1331,
            "startColumn" : 15,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 1329,
            "endLine" : 1333,
            "snippet" : {
              "text" : "            dns.dnssec.make_dnskey(\"xyzzy\", dns.dnssec.Algorithm.ED448)\n\n        key = dsa.generate_private_key(2048)\n        with self.assertRaises(ValueError):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.DSA)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2422bc2a0d7fb591:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1177,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 1175,
            "endLine" : 1179,
            "snippet" : {
              "text" : "    from cryptography.hazmat.primitives.asymmetric import ec  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import ed448  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import rsa  # pylint: disable=W0611\n    from cryptography.hazmat.primitives.asymmetric import (  # pylint: disable=W0611\n        ed25519,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec90505d909a5e32:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 17,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "        rsa_n = keyptr[bytes_:]\n        return cls(\n            key=rsa.RSAPublicNumbers(\n                int.from_bytes(rsa_e, \"big\"), int.from_bytes(rsa_n, \"big\")\n            ).public_key(default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e39011d128fdff03:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 14,
            "startColumn" : 10,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 12,
            "endLine" : 16,
            "snippet" : {
              "text" : "\nclass PublicRSA(CryptographyPublicKey):\n    key: rsa.RSAPublicKey\n    key_cls = rsa.RSAPublicKey\n    algorithm: Algorithm\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "830fd95893dcd41e:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 15,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "class PublicRSA(CryptographyPublicKey):\n    key: rsa.RSAPublicKey\n    key_cls = rsa.RSAPublicKey\n    algorithm: Algorithm\n    chosen_hash: hashes.HashAlgorithm\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "609cd9f126fef1eb:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 17,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 71,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateRSA\":\n        return cls(\n            key=rsa.generate_private_key(\n                public_exponent=cls.default_public_exponent,\n                key_size=key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "712e31ad7ce6d4b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 17,
            "endLine" : 73,
            "endColumn" : 14
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 75,
            "snippet" : {
              "text" : "    def generate(cls, key_size: int) -> \"PrivateRSA\":\n        return cls(\n            key=rsa.generate_private_key(\n                public_exponent=cls.default_public_exponent,\n                key_size=key_size,\n                backend=default_backend(),\n            )\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "712e31ad7ce6d4b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 10,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "\nclass PrivateRSA(CryptographyPrivateKey):\n    key: rsa.RSAPrivateKey\n    key_cls = rsa.RSAPrivateKey\n    public_cls = PublicRSA\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1bcbc5bafcc488:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 15,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "class PrivateRSA(CryptographyPrivateKey):\n    key: rsa.RSAPrivateKey\n    key_cls = rsa.RSAPrivateKey\n    public_cls = PublicRSA\n    default_public_exponent = 65537\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "784ec0433cae42b3:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/rsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 64,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding, rsa\n\nfrom dns.dnssecalgs.cryptography import CryptographyPrivateKey, CryptographyPublicKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84f28e70925adb1c:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1322,
            "snippet" : {
              "text" : "\n    def testInvalidMakeDNSKEY(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4224eb9414529bd:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 15,
            "endLine" : 1324,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1326,
            "snippet" : {
              "text" : "\n    def testInvalidMakeDNSKEY(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=1024,\n            backend=default_backend(),\n        )\n        with self.assertRaises(dns.exception.AlgorithmKeyMismatch):\n            dns.dnssec.make_dnskey(key.public_key(), dns.dnssec.Algorithm.ED448)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a4224eb9414529bd:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1391,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1389,
            "startColumn" : 15,
            "endLine" : 1391,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1387,
            "endLine" : 1393,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA1(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA1, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1395,
            "startColumn" : 15,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1393,
            "endLine" : 1397,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:2",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 1395,
            "startColumn" : 15,
            "endLine" : 1397,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 1393,
            "endLine" : 1399,
            "snippet" : {
              "text" : "\n    def testSignatureRSASHA256(self):  # type: () -> None\n        key = rsa.generate_private_key(\n            public_exponent=65537, key_size=2048, backend=default_backend()\n        )\n        self._test_signature(key, dns.dnssec.Algorithm.RSASHA256, abs_soa)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "418c903d58b58eb7:2",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dnssec.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 84,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "try:\n    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives.asymmetric import dsa, ec, ed448, ed25519, rsa\n    from cryptography.hazmat.primitives.serialization import load_pem_private_key\nexcept ImportError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "605c32259cb3f191:1",
        "primaryLocationStartColumnFingerprint" : "79"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 73,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 71,
            "endLine" : 75,
            "snippet" : {
              "text" : "    algorithm = Algorithm.ECDSAP256SHA256\n    chosen_hash = hashes.SHA256()\n    curve = ec.SECP256R1()\n    octets = 32\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ec0822186af93cd:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1 with key size (in bits) 384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "dns/dnssecalgs/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "    algorithm = Algorithm.ECDSAP384SHA384\n    chosen_hash = hashes.SHA384()\n    curve = ec.SECP384R1()\n    octets = 48\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7af9855bb77e333:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:rthalley/dnspython/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}