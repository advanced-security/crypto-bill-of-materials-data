{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "python/ccxt/async_support/ace.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/ace.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/ascendex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/ascendex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/ascendex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/binance.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/binance.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/binance.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bingx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bingx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bit2c.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bit2c.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitbank.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitbank.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitbns.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitbns.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitfinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bitfinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitfinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bitfinex2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitfinex2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitfinex2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitflyer.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitflyer.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitforex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitforex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 25
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitget.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 26
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitget.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 27
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bitget.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 28
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bithumb.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 29
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bithumb.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 30
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitmart.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 31
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bitmart.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 32
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitmart.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 33
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bitmex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 34
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitmex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 35
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitmex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 36
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bitopro.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 37
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitopro.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 38
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitopro.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 39
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitrue.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 40
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitrue.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 41
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitso.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 42
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitso.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 43
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitstamp.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 44
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitstamp.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 45
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bittrex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 46
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bittrex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 47
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bittrex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 48
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bitvavo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 49
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bitvavo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 50
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bitvavo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 51
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bl3p.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 52
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bl3p.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 53
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/btcalpha.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 54
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/btcalpha.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 55
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/btcbox.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 56
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/btcbox.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 57
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/btcmarkets.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 58
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/btcmarkets.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 59
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/btcturk.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 60
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/btcturk.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 61
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/bybit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 62
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/bybit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 63
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/bybit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 64
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/cex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 65
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/cex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 66
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/cex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 67
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinbase.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 68
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinbase.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 69
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/coinbase.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 70
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/coinbasepro.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 71
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinbasepro.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 72
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinbasepro.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 73
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coincheck.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 74
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coincheck.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 75
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/coinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 76
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 77
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 78
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinlist.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 79
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinlist.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 80
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinmate.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 81
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinmate.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 82
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinone.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 83
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinone.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 84
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinsph.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 85
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinsph.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 86
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/coinspot.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 87
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/coinspot.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 88
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/cryptocom.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 89
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/cryptocom.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 90
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/cryptocom.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 91
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/currencycom.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 92
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/currencycom.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 93
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/currencycom.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 94
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/delta.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 95
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/delta.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 96
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/deribit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 97
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/deribit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 98
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/deribit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 99
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/digifinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 100
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/digifinex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 101
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/static_dependencies/ecdsa/ecdsa.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 102
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/base/exchange.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 103
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/exmo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 104
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/exmo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 105
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/exmo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 106
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/gate.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 107
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/gate.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 108
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/gate.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 109
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/gemini.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 110
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/gemini.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 111
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/gemini.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 112
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/hitbtc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 113
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/hitbtc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 114
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/hitbtc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 115
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/hollaex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 116
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/hollaex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 117
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/hollaex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 118
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/htx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 119
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/htx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 120
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/htx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 121
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/huobijp.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 122
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/huobijp.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 123
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/idex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 124
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/idex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 125
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/independentreserve.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 126
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/independentreserve.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 127
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/indodax.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 128
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/indodax.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 129
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 130
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/kraken.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 131
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/kraken.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 132
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/krakenfutures.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 133
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/krakenfutures.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 134
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/krakenfutures.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 135
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/kucoin.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 136
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/kucoin.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 137
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/kuna.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 138
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/kuna.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 139
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/latoken.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 140
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/latoken.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 141
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/lbank.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 142
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/lbank.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 143
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/mercado.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 144
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/mercado.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 145
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/mexc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 146
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/mexc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 147
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/mexc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 148
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/ndax.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 149
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/ndax.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 150
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/novadax.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 151
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/novadax.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 152
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/okcoin.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 153
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/okcoin.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 154
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/okcoin.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 155
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/okx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 156
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/okx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 157
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/okx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 158
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/p2b.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 159
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/p2b.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 160
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/paymium.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 161
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/paymium.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 162
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/phemex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 163
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/phemex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 164
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/phemex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 165
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/poloniex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 166
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/poloniex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 167
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/poloniex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 168
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/poloniexfutures.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 169
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/poloniexfutures.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 170
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/test/base/test_crypto.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 171
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/tidex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 172
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/tidex.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 173
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/tokocrypto.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 174
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/tokocrypto.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 175
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/upbit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 176
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/upbit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 177
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/static_dependencies/ecdsa/util.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 178
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/wazirx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 179
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/wazirx.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 180
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/whitebit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 181
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/whitebit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 182
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/woo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 183
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/pro/woo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 184
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/woo.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 185
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/yobit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 186
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/yobit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 187
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/zaif.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 188
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/zaif.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 189
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/async_support/zonda.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 190
      }
    }, {
      "location" : {
        "uri" : "python/ccxt/zonda.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 191
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/ace.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 980,
            "startColumn" : 54,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 978,
            "endLine" : 982,
            "snippet" : {
              "text" : "                key = sortedDataKeys[i]\n                auth += self.safe_string(data, key)\n            signature = self.hash(self.encode(auth), 'sha256', 'hex')\n            data['signKey'] = signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f16efa03133907ad:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/ace.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 980,
            "startColumn" : 54,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 978,
            "endLine" : 982,
            "snippet" : {
              "text" : "                key = sortedDataKeys[i]\n                auth += self.safe_string(data, key)\n            signature = self.hash(self.encode(auth), 'sha256', 'hex')\n            data['signKey'] = signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f16efa03133907ad:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/ascendex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 3130,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 3128,
            "endLine" : 3132,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            payload = timestamp + '+' + request\n            hmac = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'x-auth-key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e641090c8830010:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/ascendex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 3130,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 3128,
            "endLine" : 3132,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            payload = timestamp + '+' + request\n            hmac = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'x-auth-key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e641090c8830010:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/ascendex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 894,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 892,
            "endLine" : 896,
            "snippet" : {
              "text" : "            auth = timestamp + '+' + version + '/' + path\n            secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha256, 'base64')\n            request = {\n                'op': 'auth',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99e4b25c5b30227b:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/binance.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1134,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1132,
            "endLine" : 1136,
            "snippet" : {
              "text" : "                signature = self.eddsa(self.encode(query), self.secret, 'ed25519')\n        else:\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n        extendedParams['signature'] = signature\n        return extendedParams\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "834ffc9c389b04c3:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/binance.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 7952,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 7950,
            "endLine" : 7954,
            "snippet" : {
              "text" : "                    signature = self.encode_uri_component(self.eddsa(self.encode(query), self.secret, 'ed25519'))\n            else:\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/binance.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 7953,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 7951,
            "endLine" : 7955,
            "snippet" : {
              "text" : "                    signature = self.encode_uri_component(self.eddsa(self.encode(query), self.secret, 'ed25519'))\n            else:\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bingx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 3196,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 3194,
            "endLine" : 3198,
            "snippet" : {
              "text" : "            parsedParams = self.parse_params(params)\n            query = self.urlencode(parsedParams)\n            signature = self.hmac(self.encode(self.rawencode(parsedParams)), self.encode(self.secret), hashlib.sha256)\n            if params:\n                query = '?' + query + '&'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4902301200e39b14:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bingx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 3197,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 3195,
            "endLine" : 3199,
            "snippet" : {
              "text" : "            parsedParams = self.parse_params(params)\n            query = self.urlencode(parsedParams)\n            signature = self.hmac(self.encode(self.rawencode(parsedParams)), self.encode(self.secret), hashlib.sha256)\n            if params:\n                query = '?' + query + '&'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4902301200e39b14:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bit2c.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 823,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 821,
            "endLine" : 825,
            "snippet" : {
              "text" : "            else:\n                body = auth\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6eb159139c6eeb75:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bit2c.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 823,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 821,
            "endLine" : 825,
            "snippet" : {
              "text" : "            else:\n                body = auth\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6eb159139c6eeb75:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 872,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 870,
            "endLine" : 874,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 872,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 870,
            "endLine" : 874,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitbns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1131,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1129,
            "endLine" : 1133,
            "snippet" : {
              "text" : "            }\n            payload = self.string_to_base64(self.json(auth))\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers['X-BITBNS-PAYLOAD'] = payload\n            headers['X-BITBNS-SIGNATURE'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84b4a16642268d9c:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitbns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1131,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1129,
            "endLine" : 1133,
            "snippet" : {
              "text" : "            }\n            payload = self.string_to_base64(self.json(auth))\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers['X-BITBNS-PAYLOAD'] = payload\n            headers['X-BITBNS-SIGNATURE'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84b4a16642268d9c:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitfinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 1542,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1540,
            "endLine" : 1544,
            "snippet" : {
              "text" : "            payload = self.string_to_base64(body)\n            secret = self.encode(self.secret)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha384)\n            headers = {\n                'X-BFX-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6b046f103af90418:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitfinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 392,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 390,
            "endLine" : 394,
            "snippet" : {
              "text" : "            nonce = self.milliseconds()\n            payload = 'AUTH' + str(nonce)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384, 'hex')\n            request = {\n                'apiKey': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a0c8024ce61c3a3:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitfinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 1542,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1540,
            "endLine" : 1544,
            "snippet" : {
              "text" : "            payload = self.string_to_base64(body)\n            secret = self.encode(self.secret)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha384)\n            headers = {\n                'X-BFX-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6b046f103af90418:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitfinex2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 798,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 796,
            "endLine" : 800,
            "snippet" : {
              "text" : "            nonce = self.milliseconds()\n            payload = 'AUTH' + str(nonce)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384, 'hex')\n            event = 'auth'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5b101f4c9fd8fff7:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitfinex2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 2457,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2455,
            "endLine" : 2459,
            "snippet" : {
              "text" : "            body = self.json(query)\n            auth = '/api/' + request + nonce + body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'bfx-nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92a773349f739521:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitfinex2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 2457,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2455,
            "endLine" : 2459,
            "snippet" : {
              "text" : "            body = self.json(query)\n            auth = '/api/' + request + nonce + body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'bfx-nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92a773349f739521:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitflyer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 971,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 969,
            "endLine" : 973,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-TIMESTAMP': nonce,\n                'ACCESS-SIGN': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b56502179ebc34c5:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitflyer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 971,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 969,
            "endLine" : 973,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-TIMESTAMP': nonce,\n                'ACCESS-SIGN': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b56502179ebc34c5:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitforex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 788,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 786,
            "endLine" : 790,
            "snippet" : {
              "text" : "            # message = '/' + 'api/' + self.version + '/' + path + '?' + payload\n            message = '/' + path + '?' + payload\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            body = payload + '&signData=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7b191fae938f27a:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitforex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 788,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 786,
            "endLine" : 790,
            "snippet" : {
              "text" : "            # message = '/' + 'api/' + self.version + '/' + path + '?' + payload\n            message = '/' + path + '?' + payload\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            body = payload + '&signData=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7b191fae938f27a:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitget.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 6602,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 6600,
            "endLine" : 6604,
            "snippet" : {
              "text" : "                    url += queryInner\n                    auth += queryInner\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            broker = self.safe_string(self.options, 'broker')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7eab5152cdd1d44:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitget.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 6603,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 6601,
            "endLine" : 6605,
            "snippet" : {
              "text" : "                    url += queryInner\n                    auth += queryInner\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            broker = self.safe_string(self.options, 'broker')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7eab5152cdd1d44:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitget.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 1435,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1433,
            "endLine" : 1437,
            "snippet" : {
              "text" : "            timestamp = str(self.seconds())\n            auth = timestamp + 'GET' + '/user/verify'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            operation = 'login'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "27dd2f1829f324a7:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bithumb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 997,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 995,
            "endLine" : 999,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = endpoint + \"\\0\" + body + \"\\0\" + nonce  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            signature64 = self.string_to_base64(signature)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a93465ab28d28b05:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bithumb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 997,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 995,
            "endLine" : 999,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = endpoint + \"\\0\" + body + \"\\0\" + nonce  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            signature64 = self.string_to_base64(signature)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a93465ab28d28b05:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitmart.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 3953,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3951,
            "endLine" : 3955,
            "snippet" : {
              "text" : "                queryString = body\n            auth = timestamp + '#' + self.uid + '#' + queryString\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-BM-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f06f40ce082190:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitmart.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 483,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 481,
            "endLine" : 485,
            "snippet" : {
              "text" : "            path = 'bitmart.WebSocket'\n            auth = timestamp + '#' + memo + '#' + path\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            operation = 'login'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "40f4bbb7ab3957f2:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitmart.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 3953,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3951,
            "endLine" : 3955,
            "snippet" : {
              "text" : "                queryString = body\n            auth = timestamp + '#' + self.uid + '#' + queryString\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-BM-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f06f40ce082190:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitmex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 34
          },
          "region" : {
            "startLine" : 562,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 560,
            "endLine" : 564,
            "snippet" : {
              "text" : "            timestamp = self.milliseconds()\n            payload = 'GET' + '/realtime' + str(timestamp)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'op': 'authKeyExpires',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "62792d98efcfb7e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitmex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 35
          },
          "region" : {
            "startLine" : 2628,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2626,
            "endLine" : 2629,
            "snippet" : {
              "text" : "                    body = self.json(params)\n                    auth += body\n            headers['api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "166b61e5f9866e8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitmex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 36
          },
          "region" : {
            "startLine" : 2628,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2626,
            "endLine" : 2629,
            "snippet" : {
              "text" : "                    body = self.json(params)\n                    auth += body\n            headers['api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "166b61e5f9866e8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 37
          },
          "region" : {
            "startLine" : 223,
            "startColumn" : 66,
            "endColumn" : 80
          },
          "contextRegion" : {
            "startLine" : 221,
            "endLine" : 225,
            "snippet" : {
              "text" : "        })\n        payload = self.string_to_base64(rawData)\n        signature = self.hmac(payload, self.encode(self.secret), hashlib.sha384)\n        defaultOptions = {\n            'ws': {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "844e6b41cfd5ba08:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 38
          },
          "region" : {
            "startLine" : 1589,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1587,
            "endLine" : 1591,
            "snippet" : {
              "text" : "                body = self.json(params)\n                payload = self.string_to_base64(body)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 38
          },
          "region" : {
            "startLine" : 1602,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1600,
            "endLine" : 1604,
            "snippet" : {
              "text" : "                data = self.json(rawData)\n                payload = self.string_to_base64(data)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 39
          },
          "region" : {
            "startLine" : 1589,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1587,
            "endLine" : 1591,
            "snippet" : {
              "text" : "                body = self.json(params)\n                payload = self.string_to_base64(body)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 39
          },
          "region" : {
            "startLine" : 1602,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1600,
            "endLine" : 1604,
            "snippet" : {
              "text" : "                data = self.json(rawData)\n                payload = self.string_to_base64(data)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 2908,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2906,
            "endLine" : 2910,
            "snippet" : {
              "text" : "                signMessage = timestamp + method + signPath\n                if method == 'GET':\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'X-CH-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd481dc:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 2921,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2919,
            "endLine" : 2923,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    signMessage = signMessage + json.dumps(body)\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd41b44:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 2888,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 2886,
            "endLine" : 2890,
            "snippet" : {
              "text" : "                    'recvWindow': recvWindow,\n                }, params))\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n                query += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 2887,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 2885,
            "endLine" : 2889,
            "snippet" : {
              "text" : "                    'recvWindow': recvWindow,\n                }, params))\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n                query += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 2920,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2918,
            "endLine" : 2922,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    signMessage = signMessage + json.dumps(body)\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd41b44:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 2907,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2905,
            "endLine" : 2909,
            "snippet" : {
              "text" : "                signMessage = timestamp + method + signPath\n                if method == 'GET':\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'X-CH-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd481dc:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitso.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 42
          },
          "region" : {
            "startLine" : 1620,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1618,
            "endLine" : 1622,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    request += body\n            signature = self.hmac(self.encode(request), self.encode(self.secret), hashlib.sha256)\n            auth = self.apiKey + ':' + nonce + ':' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5990606e16bf38a2:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitso.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 43
          },
          "region" : {
            "startLine" : 1620,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1618,
            "endLine" : 1622,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    request += body\n            signature = self.hmac(self.encode(request), self.encode(self.secret), hashlib.sha256)\n            auth = self.apiKey + ':' + nonce + ':' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5990606e16bf38a2:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitstamp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 1967,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1965,
            "endLine" : 1969,
            "snippet" : {
              "text" : "            authBody = body if body else ''\n            auth = xAuth + method + url.replace('https://', '') + contentType + xAuthNonce + xAuthTimestamp + xAuthVersion + authBody\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-Auth-Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f07f03a88cec73:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitstamp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 45
          },
          "region" : {
            "startLine" : 1967,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1965,
            "endLine" : 1969,
            "snippet" : {
              "text" : "            authBody = body if body else ''\n            auth = xAuth + method + url.replace('https://', '') + contentType + xAuthNonce + xAuthTimestamp + xAuthVersion + authBody\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-Auth-Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f07f03a88cec73:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 46
          },
          "region" : {
            "startLine" : 2031,
            "startColumn" : 62,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 2029,
            "endLine" : 2033,
            "snippet" : {
              "text" : "                if params:\n                    url += '?' + self.rawencode(params)\n            contentHash = self.hash(self.encode(hashString), 'sha512', 'hex')\n            timestamp = str(self.milliseconds())\n            auth = timestamp + url + method + contentHash\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6a1a93049ddf77c:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 46
          },
          "region" : {
            "startLine" : 2037,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2035,
            "endLine" : 2039,
            "snippet" : {
              "text" : "            if subaccountId is not None:\n                auth += subaccountId\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Api-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8b70ae5d47106bb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 47
          },
          "region" : {
            "startLine" : 2037,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2035,
            "endLine" : 2039,
            "snippet" : {
              "text" : "            if subaccountId is not None:\n                auth += subaccountId\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Api-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8b70ae5d47106bb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 47
          },
          "region" : {
            "startLine" : 2031,
            "startColumn" : 62,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 2029,
            "endLine" : 2033,
            "snippet" : {
              "text" : "                if params:\n                    url += '?' + self.rawencode(params)\n            contentHash = self.hash(self.encode(hashString), 'sha512', 'hex')\n            timestamp = str(self.milliseconds())\n            auth = timestamp + url + method + contentHash\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6a1a93049ddf77c:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 48
          },
          "region" : {
            "startLine" : 99,
            "startColumn" : 76,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 97,
            "endLine" : 101,
            "snippet" : {
              "text" : "        uuid = self.uuid()\n        auth = str(timestamp) + uuid\n        signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n        args = [self.apiKey, timestamp, uuid, signature]\n        method = 'Authenticate'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a315bebb7e6d5924:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitvavo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 49
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            auth = timestamp + method + url + payload\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            accessWindow = self.safe_string(self.options, 'BITVAVO-ACCESS-WINDOW', '10000')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea4adf341612b980:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitvavo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 50
          },
          "region" : {
            "startLine" : 562,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 560,
            "endLine" : 564,
            "snippet" : {
              "text" : "            stringTimestamp = str(timestamp)\n            auth = stringTimestamp + 'GET/' + self.version + '/websocket'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            action = 'authenticate'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99e04d934f3ac497:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitvavo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 51
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            auth = timestamp + method + url + payload\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            accessWindow = self.safe_string(self.options, 'BITVAVO-ACCESS-WINDOW', '10000')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea4adf341612b980:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bl3p.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 417,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 415,
            "endLine" : 419,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            auth = request + \"\\0\" + body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "680d0e0461be4bae:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bl3p.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 53
          },
          "region" : {
            "startLine" : 417,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 415,
            "endLine" : 419,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            auth = request + \"\\0\" + body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "680d0e0461be4bae:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcalpha.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 54
          },
          "region" : {
            "startLine" : 847,
            "startColumn" : 91,
            "endColumn" : 105
          },
          "contextRegion" : {
            "startLine" : 845,
            "endLine" : 849,
            "snippet" : {
              "text" : "                url += '?' + query\n            headers['X-KEY'] = self.apiKey\n            headers['X-SIGN'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            headers['X-NONCE'] = str(self.nonce())\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "203f7583ab1f0a6f:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcalpha.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 55
          },
          "region" : {
            "startLine" : 847,
            "startColumn" : 91,
            "endColumn" : 105
          },
          "contextRegion" : {
            "startLine" : 845,
            "endLine" : 849,
            "snippet" : {
              "text" : "                url += '?' + query\n            headers['X-KEY'] = self.apiKey\n            headers['X-SIGN'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            headers['X-NONCE'] = str(self.nonce())\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "203f7583ab1f0a6f:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 56
          },
          "region" : {
            "startLine" : 501,
            "startColumn" : 58,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 499,
            "endLine" : 503,
            "snippet" : {
              "text" : "            }, params)\n            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a12f6cc464a8e841:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 56
          },
          "region" : {
            "startLine" : 502,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 500,
            "endLine" : 504,
            "snippet" : {
              "text" : "            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cde5cccd0c487435:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 501,
            "startColumn" : 58,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 499,
            "endLine" : 503,
            "snippet" : {
              "text" : "            }, params)\n            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a12f6cc464a8e841:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 502,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 500,
            "endLine" : 504,
            "snippet" : {
              "text" : "            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cde5cccd0c487435:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcmarkets.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 1121,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1119,
            "endLine" : 1123,
            "snippet" : {
              "text" : "                body = self.json(query)\n                auth += body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Accept': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2b07f1307d1b809:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcmarkets.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 59
          },
          "region" : {
            "startLine" : 1121,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1119,
            "endLine" : 1123,
            "snippet" : {
              "text" : "                body = self.json(query)\n                auth += body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Accept': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2b07f1307d1b809:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcturk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 868,
            "startColumn" : 69,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 866,
            "endLine" : 870,
            "snippet" : {
              "text" : "                'X-PCK': self.apiKey,\n                'X-Stamp': nonce,\n                'X-Signature': self.hmac(self.encode(auth), secret, hashlib.sha256, 'base64'),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ee99f3e8af89827:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcturk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 61
          },
          "region" : {
            "startLine" : 868,
            "startColumn" : 69,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 866,
            "endLine" : 870,
            "snippet" : {
              "text" : "                'X-PCK': self.apiKey,\n                'X-Stamp': nonce,\n                'X-Signature': self.hmac(self.encode(auth), secret, hashlib.sha256, 'base64'),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ee99f3e8af89827:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 6945,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6943,
            "endLine" : 6947,
            "snippet" : {
              "text" : "                    body = '{}'\n                payload = timestamp + self.apiKey + body\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n                headers = {\n                    'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea7f4d1d282e105e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 6989,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 6987,
            "endLine" : 6991,
            "snippet" : {
              "text" : "                    signature = self.rsa(auth, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                if method == 'POST':\n                    isSpot = url.find('spot') >= 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7f0b1aed5c0b120:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 6975,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 6973,
            "endLine" : 6977,
            "snippet" : {
              "text" : "                    signature = self.rsa(authFull, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(authFull), self.encode(self.secret), hashlib.sha256)\n                headers['X-BAPI-SIGN'] = signature\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa7d9d173894cd11:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 63
          },
          "region" : {
            "startLine" : 1605,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1603,
            "endLine" : 1607,
            "snippet" : {
              "text" : "            path = 'GET/realtime'\n            auth = path + expires\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'hex')\n            request = {\n                'op': 'auth',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b65307d6cff9fbe0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 6944,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6942,
            "endLine" : 6946,
            "snippet" : {
              "text" : "                    body = '{}'\n                payload = timestamp + self.apiKey + body\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n                headers = {\n                    'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea7f4d1d282e105e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 6988,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 6986,
            "endLine" : 6990,
            "snippet" : {
              "text" : "                    signature = self.rsa(auth, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                if method == 'POST':\n                    isSpot = url.find('spot') >= 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7f0b1aed5c0b120:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 6974,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 6972,
            "endLine" : 6976,
            "snippet" : {
              "text" : "                    signature = self.rsa(authFull, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(authFull), self.encode(self.secret), hashlib.sha256)\n                headers['X-BAPI-SIGN'] = signature\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa7d9d173894cd11:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/cex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 65
          },
          "region" : {
            "startLine" : 1132,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1130,
            "endLine" : 1134,
            "snippet" : {
              "text" : "            nonce = str(self.seconds())\n            auth = nonce + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'e': 'auth',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1cdc72c96fb6e7b:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/cex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 66
          },
          "region" : {
            "startLine" : 1503,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1501,
            "endLine" : 1505,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.json(self.extend({\n                'key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b036cc9281b5f169:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/cex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 67
          },
          "region" : {
            "startLine" : 1503,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1501,
            "endLine" : 1505,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.json(self.extend({\n                'key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b036cc9281b5f169:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinbase.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 68
          },
          "region" : {
            "startLine" : 2948,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2946,
            "endLine" : 2950,
            "snippet" : {
              "text" : "                else:\n                    auth = nonce + method + fullPath + payload\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdca2e7ec9eeefd:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinbase.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 69
          },
          "region" : {
            "startLine" : 2948,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2946,
            "endLine" : 2950,
            "snippet" : {
              "text" : "                else:\n                    auth = nonce + method + fullPath + payload\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdca2e7ec9eeefd:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinbase.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 70
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "            'api_key': self.apiKey,\n            'timestamp': timestamp,\n            'signature': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n        }\n        return await self.watch(url, messageHash, subscribe, messageHash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad4226ce0c90522f:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinbasepro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 71
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "        nonce = self.nonce()\n        payload = str(nonce) + 'GET' + path\n        signature = self.hmac(self.encode(payload), self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\n        return {\n            'timestamp': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95ef82f804984cdd:1",
        "primaryLocationStartColumnFingerprint" : "80"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinbasepro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 72
          },
          "region" : {
            "startLine" : 1738,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1736,
            "endLine" : 1740,
            "snippet" : {
              "text" : "            except Exception as e:\n                raise AuthenticationError(self.id + ' sign() invalid base64 secret')\n            signature = self.hmac(self.encode(what), secret, hashlib.sha256, 'base64')\n            headers = {\n                'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6c507b0a213952b:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinbasepro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 73
          },
          "region" : {
            "startLine" : 1738,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1736,
            "endLine" : 1740,
            "snippet" : {
              "text" : "            except Exception as e:\n                raise AuthenticationError(self.id + ' sign() invalid base64 secret')\n            signature = self.hmac(self.encode(what), secret, hashlib.sha256, 'base64')\n            headers = {\n                'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6c507b0a213952b:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coincheck.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 74
          },
          "region" : {
            "startLine" : 773,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 771,
            "endLine" : 775,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coincheck.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 75
          },
          "region" : {
            "startLine" : 773,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 771,
            "endLine" : 775,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 76
          },
          "region" : {
            "startLine" : 502,
            "startColumn" : 91,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 500,
            "endLine" : 504,
            "snippet" : {
              "text" : "        }\n        self.options['watchOrderBookSubscriptions'] = watchOrderBookSubscriptions\n        subscriptionHash = self.hash(self.encode(self.json(watchOrderBookSubscriptions)), 'sha256')\n        request = self.deep_extend(subscribe, params)\n        orderbook = await self.watch(url, messageHash, request, subscriptionHash, request)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "69d77b8d5e9f2ed6:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 76
          },
          "region" : {
            "startLine" : 1011,
            "startColumn" : 53,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 1009,
            "endLine" : 1013,
            "snippet" : {
              "text" : "            }\n            signData = 'access_id=' + self.apiKey + '&tonce=' + self.number_to_string(time) + '&secret_key=' + self.secret\n            hash = self.hash(self.encode(signData), 'md5')\n            request = {\n                'method': 'server.sign',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9e793d832f118630:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 76
          },
          "region" : {
            "startLine" : 1035,
            "startColumn" : 53,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1033,
            "endLine" : 1037,
            "snippet" : {
              "text" : "            }\n            signData = 'access_id=' + self.apiKey + '&timestamp=' + self.number_to_string(time) + '&secret_key=' + self.secret\n            hash = self.hash(self.encode(signData), 'sha256', 'hex')\n            request = {\n                'method': 'server.sign',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79c5d80771bc6b1f:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 77
          },
          "region" : {
            "startLine" : 4573,
            "startColumn" : 91,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 4571,
            "endLine" : 4575,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'sha256')\n            headers = {\n                'Authorization': signature.lower(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e03cd1c0458f88af:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 77
          },
          "region" : {
            "startLine" : 4594,
            "startColumn" : 91,
            "endColumn" : 96
          },
          "contextRegion" : {
            "startLine" : 4592,
            "endLine" : 4596,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'md5')\n            headers = {\n                'Authorization': signature.upper(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d17b22b9c180bdea:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 78
          },
          "region" : {
            "startLine" : 4574,
            "startColumn" : 91,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 4572,
            "endLine" : 4576,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'sha256')\n            headers = {\n                'Authorization': signature.lower(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e03cd1c0458f88af:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 78
          },
          "region" : {
            "startLine" : 4595,
            "startColumn" : 91,
            "endColumn" : 96
          },
          "contextRegion" : {
            "startLine" : 4593,
            "endLine" : 4597,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'md5')\n            headers = {\n                'Authorization': signature.upper(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d17b22b9c180bdea:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinlist.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 79
          },
          "region" : {
            "startLine" : 2178,
            "startColumn" : 90,
            "endColumn" : 104
          },
          "contextRegion" : {
            "startLine" : 2176,
            "endLine" : 2180,
            "snippet" : {
              "text" : "                auth += '?' + query\n                url += '?' + query\n            signature = self.hmac(self.encode(auth), self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'CL-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd3507922e10ac84:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinlist.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 80
          },
          "region" : {
            "startLine" : 2178,
            "startColumn" : 90,
            "endColumn" : 104
          },
          "contextRegion" : {
            "startLine" : 2176,
            "endLine" : 2180,
            "snippet" : {
              "text" : "                auth += '?' + query\n                url += '?' + query\n            signature = self.hmac(self.encode(auth), self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'CL-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd3507922e10ac84:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinmate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 81
          },
          "region" : {
            "startLine" : 907,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 905,
            "endLine" : 909,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.urlencode(self.extend({\n                'clientId': self.uid,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0f237605dfab03e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinmate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 82
          },
          "region" : {
            "startLine" : 907,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 905,
            "endLine" : 909,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.urlencode(self.extend({\n                'clientId': self.uid,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0f237605dfab03e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinone.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 83
          },
          "region" : {
            "startLine" : 851,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 849,
            "endLine" : 853,
            "snippet" : {
              "text" : "            body = payload\n            secret = self.secret.upper()\n            signature = self.hmac(self.encode(payload), self.encode(secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7cf8667feb4259f5:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinone.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 84
          },
          "region" : {
            "startLine" : 851,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 849,
            "endLine" : 853,
            "snippet" : {
              "text" : "            body = payload\n            secret = self.secret.upper()\n            signature = self.hmac(self.encode(payload), self.encode(secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7cf8667feb4259f5:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinsph.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 85
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "                    query['recvWindow'] = defaultRecvWindow\n            query = self.url_encode_query(query)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            url = url + '?' + query + '&signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ddee36a8de021d7:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinsph.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 86
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "                    query['recvWindow'] = defaultRecvWindow\n            query = self.url_encode_query(query)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            url = url + '?' + query + '&signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ddee36a8de021d7:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinspot.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 87
          },
          "region" : {
            "startLine" : 511,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 509,
            "endLine" : 513,
            "snippet" : {
              "text" : "                'Content-Type': 'application/json',\n                'key': self.apiKey,\n                'sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8933bd3eac00e75:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinspot.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 88
          },
          "region" : {
            "startLine" : 511,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 509,
            "endLine" : 513,
            "snippet" : {
              "text" : "                'Content-Type': 'application/json',\n                'key': self.apiKey,\n                'sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8933bd3eac00e75:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/cryptocom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 89
          },
          "region" : {
            "startLine" : 2862,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 2860,
            "endLine" : 2864,
            "snippet" : {
              "text" : "            strSortKey = self.params_to_string(requestParams, 0)\n            payload = path + nonce + self.apiKey + strSortKey + nonce\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            paramsKeysLength = len(paramsKeys)\n            body = self.json({\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5f5d8aca55ba0cfe:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/cryptocom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 90
          },
          "region" : {
            "startLine" : 2862,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 2860,
            "endLine" : 2864,
            "snippet" : {
              "text" : "            strSortKey = self.params_to_string(requestParams, 0)\n            payload = path + nonce + self.apiKey + strSortKey + nonce\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            paramsKeysLength = len(paramsKeys)\n            body = self.json({\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5f5d8aca55ba0cfe:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/cryptocom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 91
          },
          "region" : {
            "startLine" : 858,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 856,
            "endLine" : 860,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = method + nonce + self.apiKey + nonce\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'id': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1d0613f13485156:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/currencycom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 92
          },
          "region" : {
            "startLine" : 1752,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1750,
            "endLine" : 1754,
            "snippet" : {
              "text" : "                'recvWindow': self.options['recvWindow'],\n            }, params))\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/currencycom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 93
          },
          "region" : {
            "startLine" : 318,
            "startColumn" : 98,
            "endColumn" : 112
          },
          "contextRegion" : {
            "startLine" : 316,
            "endLine" : 320,
            "snippet" : {
              "text" : "            'payload': payload,\n        }, params)\n        request['payload']['signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        subscription = self.extend(request, {\n            'messageHash': messageHash,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "298048f575696938:1",
        "primaryLocationStartColumnFingerprint" : "89"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/currencycom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 94
          },
          "region" : {
            "startLine" : 1752,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1750,
            "endLine" : 1754,
            "snippet" : {
              "text" : "                'recvWindow': self.options['recvWindow'],\n            }, params))\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/delta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 95
          },
          "region" : {
            "startLine" : 3088,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3086,
            "endLine" : 3090,
            "snippet" : {
              "text" : "                auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7bad662c98186514:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/delta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 96
          },
          "region" : {
            "startLine" : 3088,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3086,
            "endLine" : 3090,
            "snippet" : {
              "text" : "                auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7bad662c98186514:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/deribit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 97
          },
          "region" : {
            "startLine" : 3078,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3076,
            "endLine" : 3080,
            "snippet" : {
              "text" : "            requestData = method + \"\\n\" + request + \"\\n\" + requestBody + \"\\n\"  # eslint-disable-line quotes\n            auth = timestamp + \"\\n\" + nonce + \"\\n\" + requestData  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers = {\n                'Authorization': 'deri-hmac-sha256 id=' + self.apiKey + ',ts=' + timestamp + ',sig=' + signature + ',' + 'nonce=' + nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdc5fa7930c80cb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/deribit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 98
          },
          "region" : {
            "startLine" : 771,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 769,
            "endLine" : 773,
            "snippet" : {
              "text" : "            self.check_required_credentials()\n            requestId = self.request_id()\n            signature = self.hmac(self.encode(timeString + '\\n' + nonce + '\\n'), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'jsonrpc': '2.0',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d298e4f00317bc55:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/deribit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 99
          },
          "region" : {
            "startLine" : 3078,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3076,
            "endLine" : 3080,
            "snippet" : {
              "text" : "            requestData = method + \"\\n\" + request + \"\\n\" + requestBody + \"\\n\"  # eslint-disable-line quotes\n            auth = timestamp + \"\\n\" + nonce + \"\\n\" + requestData  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers = {\n                'Authorization': 'deri-hmac-sha256 id=' + self.apiKey + ',ts=' + timestamp + ',sig=' + signature + ',' + 'nonce=' + nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdc5fa7930c80cb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/digifinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 100
          },
          "region" : {
            "startLine" : 3919,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3917,
            "endLine" : 3921,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = urlencoded\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            if method == 'GET':\n                if urlencoded:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7ec69ec88dc0d61:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/digifinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 101
          },
          "region" : {
            "startLine" : 3918,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3916,
            "endLine" : 3920,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = urlencoded\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            if method == 'GET':\n                if urlencoded:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7ec69ec88dc0d61:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 102
          },
          "region" : {
            "startLine" : 221,
            "startColumn" : 25,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 219,
            "endLine" : 223,
            "snippet" : {
              "text" : "    # in ECDSAVS.\n    #\n    from hashlib import sha1\n    return string_to_int(sha1(int_to_string(m)).digest())\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99a6110ae3eaa565:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1299,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 1297,
            "endLine" : 1301,
            "snippet" : {
              "text" : "    def jwt(request, secret, algorithm='sha256', is_rsa=False):\n        algos = {\n            'sha256': hashlib.sha256,\n            'sha384': hashlib.sha384,\n            'sha512': hashlib.sha512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "50c7d14ff2a15600:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1300,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 1298,
            "endLine" : 1302,
            "snippet" : {
              "text" : "        algos = {\n            'sha256': hashlib.sha256,\n            'sha384': hashlib.sha384,\n            'sha512': hashlib.sha512,\n        }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "866b8deb64f20191:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1301,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 1299,
            "endLine" : 1303,
            "snippet" : {
              "text" : "            'sha256': hashlib.sha256,\n            'sha384': hashlib.sha384,\n            'sha512': hashlib.sha512,\n        }\n        alg = ('RS' if is_rsa else 'HS') + algorithm[3:]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "70b2c7e47a434628:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1314,
            "startColumn" : 71,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 1312,
            "endLine" : 1316,
            "snippet" : {
              "text" : "            signature = Exchange.base64_to_binary(Exchange.rsa(token, Exchange.decode(secret), algorithm))\n        else:\n            signature = Exchange.hmac(Exchange.encode(token), secret, algos[algorithm], 'binary')\n        return token + '.' + Exchange.base64urlencode(signature)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f931ccf9ed1e7692:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1322,
            "snippet" : {
              "text" : "    def rsa(request, secret, alg='sha256'):\n        algorithms = {\n            \"sha256\": hashes.SHA256(),\n            \"sha384\": hashes.SHA384(),\n            \"sha512\": hashes.SHA512(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7a472206e3cecee:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1321,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1319,
            "endLine" : 1323,
            "snippet" : {
              "text" : "        algorithms = {\n            \"sha256\": hashes.SHA256(),\n            \"sha384\": hashes.SHA384(),\n            \"sha512\": hashes.SHA512(),\n        }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "144baa9e83b09c17:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1322,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1320,
            "endLine" : 1324,
            "snippet" : {
              "text" : "            \"sha256\": hashes.SHA256(),\n            \"sha384\": hashes.SHA384(),\n            \"sha512\": hashes.SHA512(),\n        }\n        algorithm = algorithms[alg]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8bd9a63e549b2fba:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1326,
            "startColumn" : 82,
            "endColumn" : 100
          },
          "contextRegion" : {
            "startLine" : 1324,
            "endLine" : 1328,
            "snippet" : {
              "text" : "        algorithm = algorithms[alg]\n        priv_key = load_pem_private_key(Exchange.encode(secret), None, backends.default_backend())\n        return Exchange.binary_to_base64(priv_key.sign(Exchange.encode(request), padding.PKCS1v15(), algorithm))\n\n    @staticmethod\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "893bcd6de3fa3e91:1",
        "primaryLocationStartColumnFingerprint" : "73"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1342,
            "startColumn" : 25,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1340,
            "endLine" : 1344,
            "snippet" : {
              "text" : "            raise ArgumentsRequired(algorithm + ' is not a supported algorithm')\n        curve_info = algorithms[algorithm]\n        hash_function = getattr(hashlib, curve_info[1])\n        encoded_request = Exchange.encode(request)\n        if hash is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f0b27f12e38f0571:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1372,
            "startColumn" : 42,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1370,
            "endLine" : 1374,
            "snippet" : {
              "text" : "    def eddsa(request, secret, curve='ed25519'):\n        private_key = load_pem_private_key(Exchange.encode(secret), None)\n        return Exchange.binary_to_base64(private_key.sign(request))\n\n    @staticmethod\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2264977996c7388d:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1554,
            "startColumn" : 99,
            "endColumn" : 111
          },
          "contextRegion" : {
            "startLine" : 1552,
            "endLine" : 1556,
            "snippet" : {
              "text" : "\n        epoch = int(time.time()) // 30\n        hmac_res = Exchange.hmac(epoch.to_bytes(8, 'big'), base32_to_bytes(key.replace(' ', '')), hashlib.sha1, 'hex')\n        offset = hex_to_dec(hmac_res[-1]) * 2\n        otp = str(hex_to_dec(hmac_res[offset: offset + 8]) & 0x7fffffff)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d3c550e911338e7:1",
        "primaryLocationStartColumnFingerprint" : "90"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1240,
            "startColumn" : 33,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 1238,
            "endLine" : 1242,
            "snippet" : {
              "text" : "\n    @staticmethod\n    def hash(request, algorithm='md5', digest='hex'):\n        if algorithm == 'keccak':\n            binary = bytes(keccak.SHA3(request))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84bc18c859df7fb3:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1253,
            "startColumn" : 41,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 1251,
            "endLine" : 1255,
            "snippet" : {
              "text" : "\n    @staticmethod\n    def hmac(request, secret, algorithm=hashlib.sha256, digest='hex'):\n        h = hmac.new(secret, request, algorithm)\n        binary = h.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3cfdfd999a1dc569:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1329,
            "startColumn" : 55,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1327,
            "endLine" : 1331,
            "snippet" : {
              "text" : "\n    @staticmethod\n    def ecdsa(request, secret, algorithm='p256', hash=None, fixed_length=False):\n        # your welcome - frosty00\n        algorithms = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4b8cb43a30d090c2:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/exmo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 104
          },
          "region" : {
            "startLine" : 2385,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2383,
            "endLine" : 2387,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/exmo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 105
          },
          "region" : {
            "startLine" : 616,
            "startColumn" : 79,
            "endColumn" : 93
          },
          "contextRegion" : {
            "startLine" : 614,
            "endLine" : 618,
            "snippet" : {
              "text" : "            requestId = self.request_id()\n            signData = self.apiKey + str(time)\n            sign = self.hmac(self.encode(signData), self.encode(self.secret), hashlib.sha512, 'base64')\n            request = {\n                'method': 'login',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f98ce3c703a5d529:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/exmo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 106
          },
          "region" : {
            "startLine" : 2385,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2383,
            "endLine" : 2387,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 107
          },
          "region" : {
            "startLine" : 5510,
            "startColumn" : 65,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 5508,
            "endLine" : 5512,
            "snippet" : {
              "text" : "                body = self.json(query)\n            bodyPayload = '' if (body is None) else body\n            bodySignature = self.hash(self.encode(bodyPayload), 'sha512')\n            timestamp = self.seconds()\n            timestampString = str(timestamp)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fd35269f3eb837f4:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 107
          },
          "region" : {
            "startLine" : 5517,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 5515,
            "endLine" : 5519,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join(payloadArray)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82d9ef060f8e89bd:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 108
          },
          "region" : {
            "startLine" : 5509,
            "startColumn" : 65,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 5507,
            "endLine" : 5511,
            "snippet" : {
              "text" : "                body = self.json(query)\n            bodyPayload = '' if (body is None) else body\n            bodySignature = self.hash(self.encode(bodyPayload), 'sha512')\n            timestamp = self.seconds()\n            timestampString = str(timestamp)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fd35269f3eb837f4:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 108
          },
          "region" : {
            "startLine" : 5516,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 5514,
            "endLine" : 5518,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join(payloadArray)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82d9ef060f8e89bd:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 109
          },
          "region" : {
            "startLine" : 1188,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 1186,
            "endLine" : 1190,
            "snippet" : {
              "text" : "        event = 'subscribe'\n        signaturePayload = 'channel=' + channel + '&' + 'event=' + event + '&' + 'time=' + str(time)\n        signature = self.hmac(self.encode(signaturePayload), self.encode(self.secret), hashlib.sha512, 'hex')\n        auth = {\n            'method': 'api_key',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f68516a63bfdf35:1",
        "primaryLocationStartColumnFingerprint" : "79"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/gemini.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 110
          },
          "region" : {
            "startLine" : 1617,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1615,
            "endLine" : 1619,
            "snippet" : {
              "text" : "            payload = self.json(request)\n            payload = self.string_to_base64(payload)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'Content-Type': 'text/plain',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bf2a4d387e8a8051:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/gemini.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 111
          },
          "region" : {
            "startLine" : 602,
            "startColumn" : 75,
            "endColumn" : 89
          },
          "contextRegion" : {
            "startLine" : 600,
            "endLine" : 604,
            "snippet" : {
              "text" : "        }\n        b64 = self.string_to_base64(self.json(payload))\n        signature = self.hmac(self.encode(b64), self.encode(self.secret), hashlib.sha384, 'hex')\n        defaultOptions = {\n            'ws': {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4b9908de0c546c7:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/gemini.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 112
          },
          "region" : {
            "startLine" : 1616,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1614,
            "endLine" : 1618,
            "snippet" : {
              "text" : "            payload = self.json(request)\n            payload = self.string_to_base64(payload)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'Content-Type': 'text/plain',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bf2a4d387e8a8051:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/hitbtc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 113
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 85,
            "endLine" : 89,
            "snippet" : {
              "text" : "        if authenticated is None:\n            timestamp = self.milliseconds()\n            signature = self.hmac(self.encode(self.number_to_string(timestamp)), self.encode(self.secret), hashlib.sha256, 'hex')\n            request = {\n                'method': 'login',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0707da294a9b5a:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/hitbtc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 114
          },
          "region" : {
            "startLine" : 3204,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 3202,
            "endLine" : 3206,
            "snippet" : {
              "text" : "            payload.append(timestamp)\n            payloadString = ''.join(payload)\n            signature = self.hmac(self.encode(payloadString), self.encode(self.secret), hashlib.sha256, 'hex')\n            secondPayload = self.apiKey + ':' + signature + ':' + timestamp\n            encoded = self.string_to_base64(secondPayload)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "43783a78b94db4ad:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/hitbtc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 115
          },
          "region" : {
            "startLine" : 3204,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 3202,
            "endLine" : 3206,
            "snippet" : {
              "text" : "            payload.append(timestamp)\n            payloadString = ''.join(payload)\n            signature = self.hmac(self.encode(payloadString), self.encode(self.secret), hashlib.sha256, 'hex')\n            secondPayload = self.apiKey + ':' + signature + ':' + timestamp\n            encoded = self.string_to_base64(secondPayload)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "43783a78b94db4ad:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/hollaex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 116
          },
          "region" : {
            "startLine" : 415,
            "startColumn" : 76,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 413,
            "endLine" : 417,
            "snippet" : {
              "text" : "        url = self.urls['api']['ws']\n        auth = 'CONNECT' + '/stream' + expires\n        signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        authParams = {\n            'api-key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1c2f4443a000a10a:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/hollaex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 117
          },
          "region" : {
            "startLine" : 1764,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1762,
            "endLine" : 1766,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    auth += body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['api-signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fb379b564e89c1d:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/hollaex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 118
          },
          "region" : {
            "startLine" : 1764,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1762,
            "endLine" : 1766,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    auth += body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['api-signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fb379b564e89c1d:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 119
          },
          "region" : {
            "startLine" : 2168,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 2166,
            "endLine" : 2170,
            "snippet" : {
              "text" : "            auth = self.urlencode(signatureParams)\n            payload = \"\\n\".join(['GET', hostname, relativePath, auth])  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            request = None\n            if type == 'spot':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec32e02f85e37ba:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 120
          },
          "region" : {
            "startLine" : 6290,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6288,
            "endLine" : 6292,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 120
          },
          "region" : {
            "startLine" : 6226,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6224,
            "endLine" : 6228,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, self.hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 121
          },
          "region" : {
            "startLine" : 6289,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6287,
            "endLine" : 6291,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 121
          },
          "region" : {
            "startLine" : 6225,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6223,
            "endLine" : 6227,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, self.hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/huobijp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 122
          },
          "region" : {
            "startLine" : 1740,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1738,
            "endLine" : 1742,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join([method, self.hostname, url, auth])\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            auth += '&' + self.urlencode({'Signature': signature})\n            url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/huobijp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 123
          },
          "region" : {
            "startLine" : 1740,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1738,
            "endLine" : 1742,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join([method, self.hostname, url, auth])\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            auth += '&' + self.urlencode({'Signature': signature})\n            url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1068,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1066,
            "endLine" : 1070,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        # {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf503d9c0e:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1201,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1199,
            "endLine" : 1203,
            "snippet" : {
              "text" : "        allBytes = self.array_concat(byteArray, after)\n        binary = self.binary_concat_array(allBytes)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1285,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1283,
            "endLine" : 1287,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:2",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "            request['parameters']['market'] = market['id']\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request['signature'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:3",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1367,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1365,
            "endLine" : 1369,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:4",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1619,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 1617,
            "endLine" : 1621,
            "snippet" : {
              "text" : "            else:\n                payload = body\n            headers['IDEX-HMAC-Signature'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87348da6f76ed099:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1632,
            "startColumn" : 76,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1630,
            "endLine" : 1634,
            "snippet" : {
              "text" : "        binaryMessage = self.base16_to_binary(self.remove0x_prefix(message))\n        prefix = self.encode('\\x19Ethereum Signed Message:\\n' + binaryMessage.byteLength)\n        return '0x' + self.hash(self.binary_concat(prefix, binaryMessage), 'keccak', 'hex')\n\n    def sign_hash(self, hash, privateKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "549a7182815ec57:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1635,
            "startColumn" : 75,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1633,
            "endLine" : 1637,
            "snippet" : {
              "text" : "\n    def sign_hash(self, hash, privateKey):\n        signature = self.ecdsa(hash[-64:], privateKey[-64:], 'secp256k1', None)\n        return {\n            'r': '0x' + signature['r'],\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ef8b89eb3bbebf56:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1068,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1066,
            "endLine" : 1070,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        # {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf503d9c0e:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1201,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1199,
            "endLine" : 1203,
            "snippet" : {
              "text" : "        allBytes = self.array_concat(byteArray, after)\n        binary = self.binary_concat_array(allBytes)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1285,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1283,
            "endLine" : 1287,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:2",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "            request['parameters']['market'] = market['id']\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request['signature'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:3",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1367,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1365,
            "endLine" : 1369,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:4",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1619,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 1617,
            "endLine" : 1621,
            "snippet" : {
              "text" : "            else:\n                payload = body\n            headers['IDEX-HMAC-Signature'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87348da6f76ed099:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1632,
            "startColumn" : 76,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1630,
            "endLine" : 1634,
            "snippet" : {
              "text" : "        binaryMessage = self.base16_to_binary(self.remove0x_prefix(message))\n        prefix = self.encode('\\x19Ethereum Signed Message:\\n' + binaryMessage.byteLength)\n        return '0x' + self.hash(self.binary_concat(prefix, binaryMessage), 'keccak', 'hex')\n\n    def sign_hash(self, hash, privateKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "549a7182815ec57:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1635,
            "startColumn" : 75,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1633,
            "endLine" : 1637,
            "snippet" : {
              "text" : "\n    def sign_hash(self, hash, privateKey):\n        signature = self.ecdsa(hash[-64:], privateKey[-64:], 'secp256k1', None)\n        return {\n            'r': '0x' + signature['r'],\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ef8b89eb3bbebf56:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/independentreserve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 126
          },
          "region" : {
            "startLine" : 690,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 688,
            "endLine" : 692,
            "snippet" : {
              "text" : "                auth.append(key + '=' + value)\n            message = ','.join(auth)\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            query = self.ordered({})\n            query['apiKey'] = self.apiKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ca2e9f6df6ef2ee:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/independentreserve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 127
          },
          "region" : {
            "startLine" : 690,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 688,
            "endLine" : 692,
            "snippet" : {
              "text" : "                auth.append(key + '=' + value)\n            message = ','.join(auth)\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            query = self.ordered({})\n            query['apiKey'] = self.apiKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ca2e9f6df6ef2ee:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/indodax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 128
          },
          "region" : {
            "startLine" : 984,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 982,
            "endLine" : 986,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/indodax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 129
          },
          "region" : {
            "startLine" : 984,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 982,
            "endLine" : 986,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 256,
            "startColumn" : 32,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 254,
            "endLine" : 258,
            "snippet" : {
              "text" : "                           sigencode=sigencode_string,\n                           extra_entropy=b''):\n        hashfunc = hashfunc or self.default_hashfunc\n        digest = hashfunc(data).digest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bab8ac49aabb49f0:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 253,
            "startColumn" : 49,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 251,
            "endLine" : 255,
            "snippet" : {
              "text" : "        return self.verifying_key\n\n    def sign_deterministic(self, data, hashfunc=None,\n                           sigencode=sigencode_string,\n                           extra_entropy=b''):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f0d8cef755cf215:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 263,
            "startColumn" : 58,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 261,
            "endLine" : 265,
            "snippet" : {
              "text" : "            extra_entropy=extra_entropy)\n\n    def sign_digest_deterministic(self, digest, hashfunc=None,\n                                  sigencode=sigencode_string,\n                                  extra_entropy=b''):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f87dfc9e517b9f8:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 13,
            "snippet" : {
              "text" : "from .util import sigencode_string, sigdecode_string\nfrom .util import oid_ecPublicKey, encoded_oid_ecPublicKey\nfrom hashlib import sha1\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6887a2bb8f9bf73:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 131
          },
          "region" : {
            "startLine" : 2468,
            "startColumn" : 36,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2466,
            "endLine" : 2470,
            "snippet" : {
              "text" : "                body = self.urlencode_nested(self.extend({'nonce': nonce}, params))\n            auth = self.encode(nonce + body)\n            hash = self.hash(auth, 'sha256', 'binary')\n            binary = self.encode(url)\n            binhash = self.binary_concat(binary, hash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab94eca550c6eb0d:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 131
          },
          "region" : {
            "startLine" : 2472,
            "startColumn" : 52,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 2470,
            "endLine" : 2474,
            "snippet" : {
              "text" : "            binhash = self.binary_concat(binary, hash)\n            secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(binhash, secret, hashlib.sha512, 'base64')\n            headers = {\n                'API-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9924a4759fbffdef:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 132
          },
          "region" : {
            "startLine" : 2472,
            "startColumn" : 52,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 2470,
            "endLine" : 2474,
            "snippet" : {
              "text" : "            binhash = self.binary_concat(binary, hash)\n            secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(binhash, secret, hashlib.sha512, 'base64')\n            headers = {\n                'API-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9924a4759fbffdef:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 132
          },
          "region" : {
            "startLine" : 2468,
            "startColumn" : 36,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2466,
            "endLine" : 2470,
            "snippet" : {
              "text" : "                body = self.urlencode_nested(self.extend({'nonce': nonce}, params))\n            auth = self.encode(nonce + body)\n            hash = self.hash(auth, 'sha256', 'binary')\n            binary = self.encode(url)\n            binhash = self.binary_concat(binary, hash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab94eca550c6eb0d:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 133
          },
          "region" : {
            "startLine" : 2225,
            "startColumn" : 49,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 2223,
            "endLine" : 2227,
            "snippet" : {
              "text" : "            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a611a2ebd17f9110:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 133
          },
          "region" : {
            "startLine" : 2223,
            "startColumn" : 49,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 2221,
            "endLine" : 2225,
            "snippet" : {
              "text" : "                auth += api + '/'\n            auth += endpoint  # 1\n            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb8f48850a10eee9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 134
          },
          "region" : {
            "startLine" : 2223,
            "startColumn" : 49,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 2221,
            "endLine" : 2225,
            "snippet" : {
              "text" : "                auth += api + '/'\n            auth += endpoint  # 1\n            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb8f48850a10eee9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 134
          },
          "region" : {
            "startLine" : 2225,
            "startColumn" : 49,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 2223,
            "endLine" : 2227,
            "snippet" : {
              "text" : "            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a611a2ebd17f9110:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 135
          },
          "region" : {
            "startLine" : 1406,
            "startColumn" : 65,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1404,
            "endLine" : 1408,
            "snippet" : {
              "text" : "        if event != 'error':\n            challenge = self.safe_value(message, 'message')\n            hashedChallenge = self.hash(self.encode(challenge), 'sha256', 'binary')\n            base64Secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(hashedChallenge, base64Secret, hashlib.sha512, 'base64')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9ee539935256ce34:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 135
          },
          "region" : {
            "startLine" : 1408,
            "startColumn" : 66,
            "endColumn" : 80
          },
          "contextRegion" : {
            "startLine" : 1406,
            "endLine" : 1410,
            "snippet" : {
              "text" : "            hashedChallenge = self.hash(self.encode(challenge), 'sha256', 'binary')\n            base64Secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(hashedChallenge, base64Secret, hashlib.sha512, 'base64')\n            self.options['challenge'] = challenge\n            self.options['signedChallenge'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "505d60185713a200:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 136
          },
          "region" : {
            "startLine" : 4086,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 4084,
            "endLine" : 4088,
            "snippet" : {
              "text" : "            apiKeyVersion = self.safe_string(headers, 'KC-API-KEY-VERSION')\n            if apiKeyVersion == '2':\n                passphrase = self.hmac(self.encode(self.password), self.encode(self.secret), hashlib.sha256, 'base64')\n                headers['KC-API-PASSPHRASE'] = passphrase\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a9279100eaf96244:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 136
          },
          "region" : {
            "startLine" : 4091,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 4089,
            "endLine" : 4093,
            "snippet" : {
              "text" : "                headers['KC-API-PASSPHRASE'] = self.password\n            payload = timestamp + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['KC-API-SIGN'] = signature\n            partner = self.safe_value(self.options, 'partner', {})\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254df34:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 136
          },
          "region" : {
            "startLine" : 4099,
            "startColumn" : 103,
            "endColumn" : 117
          },
          "contextRegion" : {
            "startLine" : 4097,
            "endLine" : 4101,
            "snippet" : {
              "text" : "            if (partnerId is not None) and (partnerSecret is not None):\n                partnerPayload = timestamp + partnerId + self.apiKey\n                partnerSignature = self.hmac(self.encode(partnerPayload), self.encode(partnerSecret), hashlib.sha256, 'base64')\n                headers['KC-API-PARTNER-SIGN'] = partnerSignature\n                headers['KC-API-PARTNER'] = partnerId\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9179fc22c6efd12:1",
        "primaryLocationStartColumnFingerprint" : "86"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 137
          },
          "region" : {
            "startLine" : 4087,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 4085,
            "endLine" : 4089,
            "snippet" : {
              "text" : "            apiKeyVersion = self.safe_string(headers, 'KC-API-KEY-VERSION')\n            if apiKeyVersion == '2':\n                passphrase = self.hmac(self.encode(self.password), self.encode(self.secret), hashlib.sha256, 'base64')\n                headers['KC-API-PASSPHRASE'] = passphrase\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a9279100eaf96244:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 137
          },
          "region" : {
            "startLine" : 4092,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 4090,
            "endLine" : 4094,
            "snippet" : {
              "text" : "                headers['KC-API-PASSPHRASE'] = self.password\n            payload = timestamp + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['KC-API-SIGN'] = signature\n            partner = self.safe_value(self.options, 'partner', {})\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254df34:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 137
          },
          "region" : {
            "startLine" : 4100,
            "startColumn" : 103,
            "endColumn" : 117
          },
          "contextRegion" : {
            "startLine" : 4098,
            "endLine" : 4102,
            "snippet" : {
              "text" : "            if (partnerId is not None) and (partnerSecret is not None):\n                partnerPayload = timestamp + partnerId + self.apiKey\n                partnerSignature = self.hmac(self.encode(partnerPayload), self.encode(partnerSecret), hashlib.sha256, 'base64')\n                headers['KC-API-PARTNER-SIGN'] = partnerSignature\n                headers['KC-API-PARTNER'] = partnerId\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9179fc22c6efd12:1",
        "primaryLocationStartColumnFingerprint" : "86"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 138
          },
          "region" : {
            "startLine" : 1801,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1799,
            "endLine" : 1803,
            "snippet" : {
              "text" : "                }, params))\n                auth = method + '|' + request + '|' + queryInner\n                signed = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                suffix = query + '&signature=' + signed\n                if method == 'GET':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4979321089a8ad79:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 138
          },
          "region" : {
            "startLine" : 1778,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 1776,
            "endLine" : 1780,
            "snippet" : {
              "text" : "                        'nonce': nonce,\n                        'public-key': self.apiKey,\n                        'signature': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384, 'hex'),\n                    }\n                    account = self.safe_string(self.options, 'account')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6da5c6409bfb5eb0:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 139
          },
          "region" : {
            "startLine" : 1801,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1799,
            "endLine" : 1803,
            "snippet" : {
              "text" : "                }, params))\n                auth = method + '|' + request + '|' + queryInner\n                signed = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                suffix = query + '&signature=' + signed\n                if method == 'GET':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4979321089a8ad79:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 139
          },
          "region" : {
            "startLine" : 1778,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 1776,
            "endLine" : 1780,
            "snippet" : {
              "text" : "                        'nonce': nonce,\n                        'public-key': self.apiKey,\n                        'signature': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384, 'hex'),\n                    }\n                    account = self.safe_string(self.options, 'account')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6da5c6409bfb5eb0:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/latoken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 140
          },
          "region" : {
            "startLine" : 1596,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1594,
            "endLine" : 1598,
            "snippet" : {
              "text" : "            self.check_required_credentials()\n            auth = method + request + urlencodedQuery\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'X-LA-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8c0d0fd90819de0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/latoken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 141
          },
          "region" : {
            "startLine" : 1596,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1594,
            "endLine" : 1598,
            "snippet" : {
              "text" : "            self.check_required_credentials()\n            auth = method + request + urlencodedQuery\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'X-LA-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8c0d0fd90819de0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 142
          },
          "region" : {
            "startLine" : 2478,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2476,
            "endLine" : 2480,
            "snippet" : {
              "text" : "            }, query)))\n            encoded = self.encode(auth)\n            hash = self.hash(encoded, 'md5')\n            uppercaseHash = hash.upper()\n            sign = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4f4ae2f4e70a5fd8:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 142
          },
          "region" : {
            "startLine" : 2493,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 2491,
            "endLine" : 2495,
            "snippet" : {
              "text" : "                sign = self.rsa(uppercaseHash, pem, 'sha256')\n            elif signatureMethod == 'HmacSHA256':\n                sign = self.hmac(self.encode(uppercaseHash), self.encode(self.secret), hashlib.sha256)\n            query['sign'] = sign\n            body = self.urlencode(self.keysort(query))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "90760e218cd1d5f5:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 143
          },
          "region" : {
            "startLine" : 2479,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2477,
            "endLine" : 2481,
            "snippet" : {
              "text" : "            }, query)))\n            encoded = self.encode(auth)\n            hash = self.hash(encoded, 'md5')\n            uppercaseHash = hash.upper()\n            sign = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4f4ae2f4e70a5fd8:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 143
          },
          "region" : {
            "startLine" : 2494,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 2492,
            "endLine" : 2496,
            "snippet" : {
              "text" : "                sign = self.rsa(uppercaseHash, pem, 'sha256')\n            elif signatureMethod == 'HmacSHA256':\n                sign = self.hmac(self.encode(uppercaseHash), self.encode(self.secret), hashlib.sha256)\n            query['sign'] = sign\n            body = self.urlencode(self.keysort(query))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "90760e218cd1d5f5:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/mercado.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 144
          },
          "region" : {
            "startLine" : 819,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 817,
            "endLine" : 821,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'TAPI-ID': self.apiKey,\n                'TAPI-MAC': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79779be2abd49277:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/mercado.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 145
          },
          "region" : {
            "startLine" : 819,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 817,
            "endLine" : 821,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'TAPI-ID': self.apiKey,\n                'TAPI-MAC': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79779be2abd49277:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 146
          },
          "region" : {
            "startLine" : 191,
            "startColumn" : 79,
            "endColumn" : 93
          },
          "contextRegion" : {
            "startLine" : 189,
            "endLine" : 193,
            "snippet" : {
              "text" : "        timestamp = str(self.milliseconds())\n        payload = self.apiKey + timestamp\n        signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n        request = {\n            'method': channel,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "62792d838692221:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 147
          },
          "region" : {
            "startLine" : 4966,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 4964,
            "endLine" : 4968,
            "snippet" : {
              "text" : "                        url += '?' + auth\n                auth = self.apiKey + timestamp + auth\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers['Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2caa81dfe9ca3d74:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 147
          },
          "region" : {
            "startLine" : 4933,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 4931,
            "endLine" : 4935,
            "snippet" : {
              "text" : "            if access == 'private':\n                self.check_required_credentials()\n                signature = self.hmac(self.encode(paramsEncoded), self.encode(self.secret), hashlib.sha256)\n                url += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ee9c1146b54a3658:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 148
          },
          "region" : {
            "startLine" : 4966,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 4964,
            "endLine" : 4968,
            "snippet" : {
              "text" : "                        url += '?' + auth\n                auth = self.apiKey + timestamp + auth\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers['Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2caa81dfe9ca3d74:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 148
          },
          "region" : {
            "startLine" : 4933,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 4931,
            "endLine" : 4935,
            "snippet" : {
              "text" : "            if access == 'private':\n                self.check_required_credentials()\n                signature = self.hmac(self.encode(paramsEncoded), self.encode(self.secret), hashlib.sha256)\n                url += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ee9c1146b54a3658:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/ndax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 149
          },
          "region" : {
            "startLine" : 2291,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2289,
            "endLine" : 2293,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = nonce + self.uid + self.apiKey\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'Nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fe24c8ce113c95f:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/ndax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 150
          },
          "region" : {
            "startLine" : 2291,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2289,
            "endLine" : 2293,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = nonce + self.uid + self.apiKey\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'Nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fe24c8ce113c95f:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 151
          },
          "region" : {
            "startLine" : 1440,
            "startColumn" : 60,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 1438,
            "endLine" : 1442,
            "snippet" : {
              "text" : "            if method == 'POST':\n                body = self.json(query)\n                queryString = self.hash(self.encode(body), 'md5')\n                headers['Content-Type'] = 'application/json'\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa5f49e6d6a7dd32:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 151
          },
          "region" : {
            "startLine" : 1447,
            "startColumn" : 98,
            "endColumn" : 112
          },
          "contextRegion" : {
            "startLine" : 1445,
            "endLine" : 1449,
            "snippet" : {
              "text" : "                queryString = self.urlencode(self.keysort(query))\n            auth = method + \"\\n\" + request + \"\\n\" + queryString + \"\\n\" + timestamp  # eslint-disable-line quotes\n            headers['X-Nova-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fff4c205ee2df62:1",
        "primaryLocationStartColumnFingerprint" : "85"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 152
          },
          "region" : {
            "startLine" : 1440,
            "startColumn" : 60,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 1438,
            "endLine" : 1442,
            "snippet" : {
              "text" : "            if method == 'POST':\n                body = self.json(query)\n                queryString = self.hash(self.encode(body), 'md5')\n                headers['Content-Type'] = 'application/json'\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa5f49e6d6a7dd32:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 152
          },
          "region" : {
            "startLine" : 1447,
            "startColumn" : 98,
            "endColumn" : 112
          },
          "contextRegion" : {
            "startLine" : 1445,
            "endLine" : 1449,
            "snippet" : {
              "text" : "                queryString = self.urlencode(self.keysort(query))\n            auth = method + \"\\n\" + request + \"\\n\" + queryString + \"\\n\" + timestamp  # eslint-disable-line quotes\n            headers['X-Nova-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fff4c205ee2df62:1",
        "primaryLocationStartColumnFingerprint" : "85"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/okcoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 153
          },
          "region" : {
            "startLine" : 2809,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2807,
            "endLine" : 2811,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/okcoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 154
          },
          "region" : {
            "startLine" : 443,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 441,
            "endLine" : 445,
            "snippet" : {
              "text" : "            path = '/users/self/verify'\n            auth = timestamp + method + path\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            request = {\n                'op': messageHash,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2e8f1d9dedcb3ccb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/okcoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 155
          },
          "region" : {
            "startLine" : 2809,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2807,
            "endLine" : 2811,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/okx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 156
          },
          "region" : {
            "startLine" : 5229,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 5227,
            "endLine" : 5231,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/okx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 157
          },
          "region" : {
            "startLine" : 5228,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 5226,
            "endLine" : 5230,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/okx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 158
          },
          "region" : {
            "startLine" : 664,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 662,
            "endLine" : 666,
            "snippet" : {
              "text" : "            path = '/users/self/verify'\n            auth = timestamp + method + path\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            operation = 'login'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "27dd2f1829f324a7:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/p2b.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 159
          },
          "region" : {
            "startLine" : 1176,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 1174,
            "endLine" : 1178,
            "snippet" : {
              "text" : "                'X-TXC-APIKEY': self.apiKey,\n                'X-TXC-PAYLOAD': payload,\n                'X-TXC-SIGNATURE': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n            }\n            body = self.json(params)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2a42b55974608064:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/p2b.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 160
          },
          "region" : {
            "startLine" : 1176,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 1174,
            "endLine" : 1178,
            "snippet" : {
              "text" : "                'X-TXC-APIKEY': self.apiKey,\n                'X-TXC-PAYLOAD': payload,\n                'X-TXC-SIGNATURE': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n            }\n            body = self.json(params)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2a42b55974608064:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/paymium.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 161
          },
          "region" : {
            "startLine" : 552,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 550,
            "endLine" : 554,
            "snippet" : {
              "text" : "                    auth += queryString\n                    url += '?' + queryString\n            headers['Api-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7198da0e2a176a8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/paymium.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 162
          },
          "region" : {
            "startLine" : 552,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 550,
            "endLine" : 554,
            "snippet" : {
              "text" : "                    auth += queryString\n                    url += '?' + queryString\n            headers['Api-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7198da0e2a176a8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/phemex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 163
          },
          "region" : {
            "startLine" : 1417,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1415,
            "endLine" : 1419,
            "snippet" : {
              "text" : "            expiration = self.seconds() + expiryDelta\n            payload = self.apiKey + str(expiration)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            method = 'user.auth'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "46fcd7335c1ce24e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/phemex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 164
          },
          "region" : {
            "startLine" : 3840,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 3838,
            "endLine" : 3842,
            "snippet" : {
              "text" : "                headers['Content-Type'] = 'application/json'\n            auth = requestPath + queryString + expiryString + payload\n            headers['x-phemex-request-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        url = self.implode_hostname(self.urls['api'][api]) + url\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cda3e1a89ae6a37:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/phemex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 165
          },
          "region" : {
            "startLine" : 3840,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 3838,
            "endLine" : 3842,
            "snippet" : {
              "text" : "                headers['Content-Type'] = 'application/json'\n            auth = requestPath + queryString + expiryString + payload\n            headers['x-phemex-request-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        url = self.implode_hostname(self.urls['api'][api]) + url\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cda3e1a89ae6a37:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/poloniex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 166
          },
          "region" : {
            "startLine" : 2181,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2179,
            "endLine" : 2183,
            "snippet" : {
              "text" : "                if query:\n                    url += '?' + self.urlencode(query)\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc5535eeb5e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/poloniex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 167
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "            accessPath = '/ws'\n            requestString = 'GET\\n' + accessPath + '\\nsignTimestamp=' + timestamp\n            signature = self.hmac(self.encode(requestString), self.encode(self.secret), hashlib.sha256, 'base64')\n            request = {\n                'event': 'subscribe',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3befd54f4c86a610:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/poloniex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 168
          },
          "region" : {
            "startLine" : 2181,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2179,
            "endLine" : 2183,
            "snippet" : {
              "text" : "                if query:\n                    url += '?' + self.urlencode(query)\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc5535eeb5e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/poloniexfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 169
          },
          "region" : {
            "startLine" : 1662,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1660,
            "endLine" : 1664,
            "snippet" : {
              "text" : "                endpart = body\n            payload = now + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'PF-API-SIGN': signature,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254db32:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/poloniexfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 170
          },
          "region" : {
            "startLine" : 1662,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1660,
            "endLine" : 1664,
            "snippet" : {
              "text" : "                endpart = body\n            payload = now + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'PF-API-SIGN': signature,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254db32:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 25,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "# ---------------------------------------------------------------------------------------------------------------------\n\nassert hash(encode(''), 'sha256', 'hex') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\nassert hash(encode('cheese'), 'sha256', 'hex') == '873ac9ffea4dd04fa719e8920cd6938f0c23cd678af330939cff53c3d2855f34'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "922fd6768e65f752:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 31,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "\nassert hash(encode(''), 'sha256', 'hex') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\nassert hash(encode('cheese'), 'sha256', 'hex') == '873ac9ffea4dd04fa719e8920cd6938f0c23cd678af330939cff53c3d2855f34'\n\nassert hash(encode(''), 'md5', 'hex') == 'd41d8cd98f00b204e9800998ecf8427e'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1775621be86c84b5:1",
        "primaryLocationStartColumnFingerprint" : "30"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 25,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 37,
            "endLine" : 41,
            "snippet" : {
              "text" : "assert hash(encode('cheese'), 'sha256', 'hex') == '873ac9ffea4dd04fa719e8920cd6938f0c23cd678af330939cff53c3d2855f34'\n\nassert hash(encode(''), 'md5', 'hex') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert hash(encode('sexyfish'), 'md5', 'hex') == 'c8a35464aa9d5683585786f44d5889f8'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "70f27105f150d096:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 33,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 38,
            "endLine" : 42,
            "snippet" : {
              "text" : "\nassert hash(encode(''), 'md5', 'hex') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert hash(encode('sexyfish'), 'md5', 'hex') == 'c8a35464aa9d5683585786f44d5889f8'\n\nassert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea4c662706605938:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "assert hash(encode('sexyfish'), 'md5', 'hex') == 'c8a35464aa9d5683585786f44d5889f8'\n\nassert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\nassert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c35636da1f7095af:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "\nassert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\nassert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\nassert hmac(encode('a message'), encode('a secret'), 'md5', 'hex') == '0bfa503bdbc7358185fcd49b4869e23d'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8fcfd7ae4a324949:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "assert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\nassert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\nassert hmac(encode('a message'), encode('a secret'), 'md5', 'hex') == '0bfa503bdbc7358185fcd49b4869e23d'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "85b8baf729b7d905:1",
        "primaryLocationStartColumnFingerprint" : "46"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 54,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "assert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\nassert hmac(encode('a message'), encode('a secret'), 'md5', 'hex') == '0bfa503bdbc7358185fcd49b4869e23d'\n\n# ---------------------------------------------------------------------------------------------------------------------\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f91ef21bec6f4bf4:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 52,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "\n\nassert(equals(ecdsa('1a', privateKey, 'secp256k1', 'sha256'), {\n    'r': '23dcb2a2a3728a35eb1a35cc01743c4609550d9cceaf2083550f13a9eb135f9f',\n    's': '317963fcac18e4ec9f7921b97d7ea0c82a873dd6299cbfb6af016e08ef5ed667',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c07b278d37558d87:1",
        "primaryLocationStartColumnFingerprint" : "51"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 58,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 58,
            "endLine" : 62,
            "snippet" : {
              "text" : "\n\nassert(equals(ecdsa(privateKey, privateKey, 'secp256k1', None), {\n    'r': 'b84a36a6fbabd5277ede578448b93d48e70b38efb5b15b1d4e2a298accf938b1',\n    's': '66ebfb8221cda925526e699a59cd221bb4cc84bdc563024b1802c4d9e1d8bbe9',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "936c4534efc24166:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/tidex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 172
          },
          "region" : {
            "startLine" : 932,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 930,
            "endLine" : 934,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/tidex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 173
          },
          "region" : {
            "startLine" : 932,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 930,
            "endLine" : 934,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/tokocrypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 174
          },
          "region" : {
            "startLine" : 2284,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 2282,
            "endLine" : 2286,
            "snippet" : {
              "text" : "            else:\n                query = self.urlencode(extendedParams)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/tokocrypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 175
          },
          "region" : {
            "startLine" : 2284,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 2282,
            "endLine" : 2286,
            "snippet" : {
              "text" : "            else:\n                query = self.urlencode(extendedParams)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/upbit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 176
          },
          "region" : {
            "startLine" : 1695,
            "startColumn" : 53,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1693,
            "endLine" : 1697,
            "snippet" : {
              "text" : "            if query:\n                auth = self.urlencode(query)\n                hash = self.hash(self.encode(auth), 'sha512')\n                request['query_hash'] = hash\n                request['query_hash_alg'] = 'SHA512'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "648cd197016540d9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/upbit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 177
          },
          "region" : {
            "startLine" : 1695,
            "startColumn" : 53,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1693,
            "endLine" : 1697,
            "snippet" : {
              "text" : "            if query:\n                auth = self.urlencode(query)\n                hash = self.hash(self.encode(auth), 'sha512')\n                request['query_hash'] = hash\n                request['query_hash_alg'] = 'SHA512'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "648cd197016540d9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 178
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import math\nimport binascii\nfrom hashlib import sha256\nfrom . import der\nfrom .curves import orderlen\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "47acddac99eafbe4:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/wazirx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 179
          },
          "region" : {
            "startLine" : 885,
            "startColumn" : 96,
            "endColumn" : 110
          },
          "contextRegion" : {
            "startLine" : 883,
            "endLine" : 887,
            "snippet" : {
              "text" : "            data = self.extend({'recvWindow': self.options['recvWindow'], 'timestamp': timestamp}, params)\n            data = self.keysort(data)\n            signature = self.hmac(self.encode(self.urlencode(data)), self.encode(self.secret), hashlib.sha256)\n            url += '?' + self.urlencode(data)\n            url += '&' + 'signature=' + signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25df571cb4e7e4c4:1",
        "primaryLocationStartColumnFingerprint" : "83"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/wazirx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 180
          },
          "region" : {
            "startLine" : 885,
            "startColumn" : 96,
            "endColumn" : 110
          },
          "contextRegion" : {
            "startLine" : 883,
            "endLine" : 887,
            "snippet" : {
              "text" : "            data = self.extend({'recvWindow': self.options['recvWindow'], 'timestamp': timestamp}, params)\n            data = self.keysort(data)\n            signature = self.hmac(self.encode(self.urlencode(data)), self.encode(self.secret), hashlib.sha256)\n            url += '?' + self.urlencode(data)\n            url += '&' + 'signature=' + signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25df571cb4e7e4c4:1",
        "primaryLocationStartColumnFingerprint" : "83"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/whitebit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 181
          },
          "region" : {
            "startLine" : 2109,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 2107,
            "endLine" : 2111,
            "snippet" : {
              "text" : "            body = self.json(self.extend({'request': request, 'nonce': nonce}, params))\n            payload = self.string_to_base64(body)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7251e66de47ac6ac:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/whitebit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 182
          },
          "region" : {
            "startLine" : 2109,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 2107,
            "endLine" : 2111,
            "snippet" : {
              "text" : "            body = self.json(self.extend({'request': request, 'nonce': nonce}, params))\n            payload = self.string_to_base64(body)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7251e66de47ac6ac:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/woo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 183
          },
          "region" : {
            "startLine" : 2062,
            "startColumn" : 97,
            "endColumn" : 111
          },
          "contextRegion" : {
            "startLine" : 2060,
            "endLine" : 2064,
            "snippet" : {
              "text" : "                auth += '|' + ts\n                headers['content-type'] = 'application/x-www-form-urlencoded'\n            headers['x-api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15b01e1b8fac1e9:1",
        "primaryLocationStartColumnFingerprint" : "84"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/woo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 184
          },
          "region" : {
            "startLine" : 415,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 413,
            "endLine" : 417,
            "snippet" : {
              "text" : "            ts = str(self.nonce())\n            auth = '|' + ts\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'event': event,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1cec76cec1826c0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/woo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 185
          },
          "region" : {
            "startLine" : 2062,
            "startColumn" : 97,
            "endColumn" : 111
          },
          "contextRegion" : {
            "startLine" : 2060,
            "endLine" : 2064,
            "snippet" : {
              "text" : "                auth += '|' + ts\n                headers['content-type'] = 'application/x-www-form-urlencoded'\n            headers['x-api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15b01e1b8fac1e9:1",
        "primaryLocationStartColumnFingerprint" : "84"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/yobit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 186
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1174,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/yobit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 187
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1174,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/zaif.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 188
          },
          "region" : {
            "startLine" : 679,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 677,
            "endLine" : 681,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/zaif.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 189
          },
          "region" : {
            "startLine" : 679,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 677,
            "endLine" : 681,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 190
          },
          "region" : {
            "startLine" : 1749,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1747,
            "endLine" : 1751,
            "snippet" : {
              "text" : "                'Operation-Id': self.uuid(),\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79fa5301dd36fa97:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 190
          },
          "region" : {
            "startLine" : 1761,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 1759,
            "endLine" : 1763,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "778fe10efc513796:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 191
          },
          "region" : {
            "startLine" : 1749,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1747,
            "endLine" : 1751,
            "snippet" : {
              "text" : "                'Operation-Id': self.uuid(),\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79fa5301dd36fa97:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 191
          },
          "region" : {
            "startLine" : 1761,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 1759,
            "endLine" : 1763,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "778fe10efc513796:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/ace.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 980,
            "startColumn" : 54,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 978,
            "endLine" : 982,
            "snippet" : {
              "text" : "                key = sortedDataKeys[i]\n                auth += self.safe_string(data, key)\n            signature = self.hash(self.encode(auth), 'sha256', 'hex')\n            data['signKey'] = signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f16efa03133907ad:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/ace.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 980,
            "startColumn" : 54,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 978,
            "endLine" : 982,
            "snippet" : {
              "text" : "                key = sortedDataKeys[i]\n                auth += self.safe_string(data, key)\n            signature = self.hash(self.encode(auth), 'sha256', 'hex')\n            data['signKey'] = signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f16efa03133907ad:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/ascendex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 3130,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 3128,
            "endLine" : 3132,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            payload = timestamp + '+' + request\n            hmac = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'x-auth-key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e641090c8830010:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/ascendex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 3130,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 3128,
            "endLine" : 3132,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            payload = timestamp + '+' + request\n            hmac = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'x-auth-key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e641090c8830010:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/ascendex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 894,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 892,
            "endLine" : 896,
            "snippet" : {
              "text" : "            auth = timestamp + '+' + version + '/' + path\n            secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha256, 'base64')\n            request = {\n                'op': 'auth',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99e4b25c5b30227b:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/binance.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1134,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1132,
            "endLine" : 1136,
            "snippet" : {
              "text" : "                signature = self.eddsa(self.encode(query), self.secret, 'ed25519')\n        else:\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n        extendedParams['signature'] = signature\n        return extendedParams\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "834ffc9c389b04c3:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/binance.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 7952,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 7950,
            "endLine" : 7954,
            "snippet" : {
              "text" : "                    signature = self.encode_uri_component(self.eddsa(self.encode(query), self.secret, 'ed25519'))\n            else:\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/binance.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 7953,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 7951,
            "endLine" : 7955,
            "snippet" : {
              "text" : "                    signature = self.encode_uri_component(self.eddsa(self.encode(query), self.secret, 'ed25519'))\n            else:\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bingx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 3196,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 3194,
            "endLine" : 3198,
            "snippet" : {
              "text" : "            parsedParams = self.parse_params(params)\n            query = self.urlencode(parsedParams)\n            signature = self.hmac(self.encode(self.rawencode(parsedParams)), self.encode(self.secret), hashlib.sha256)\n            if params:\n                query = '?' + query + '&'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4902301200e39b14:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bingx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 3197,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 3195,
            "endLine" : 3199,
            "snippet" : {
              "text" : "            parsedParams = self.parse_params(params)\n            query = self.urlencode(parsedParams)\n            signature = self.hmac(self.encode(self.rawencode(parsedParams)), self.encode(self.secret), hashlib.sha256)\n            if params:\n                query = '?' + query + '&'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4902301200e39b14:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bit2c.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 823,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 821,
            "endLine" : 825,
            "snippet" : {
              "text" : "            else:\n                body = auth\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6eb159139c6eeb75:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bit2c.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 823,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 821,
            "endLine" : 825,
            "snippet" : {
              "text" : "            else:\n                body = auth\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6eb159139c6eeb75:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 872,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 870,
            "endLine" : 874,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 872,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 870,
            "endLine" : 874,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitbns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 1131,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1129,
            "endLine" : 1133,
            "snippet" : {
              "text" : "            }\n            payload = self.string_to_base64(self.json(auth))\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers['X-BITBNS-PAYLOAD'] = payload\n            headers['X-BITBNS-SIGNATURE'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84b4a16642268d9c:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitbns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1131,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1129,
            "endLine" : 1133,
            "snippet" : {
              "text" : "            }\n            payload = self.string_to_base64(self.json(auth))\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers['X-BITBNS-PAYLOAD'] = payload\n            headers['X-BITBNS-SIGNATURE'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84b4a16642268d9c:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitfinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 1542,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1540,
            "endLine" : 1544,
            "snippet" : {
              "text" : "            payload = self.string_to_base64(body)\n            secret = self.encode(self.secret)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha384)\n            headers = {\n                'X-BFX-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6b046f103af90418:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitfinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 392,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 390,
            "endLine" : 394,
            "snippet" : {
              "text" : "            nonce = self.milliseconds()\n            payload = 'AUTH' + str(nonce)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384, 'hex')\n            request = {\n                'apiKey': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a0c8024ce61c3a3:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitfinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 1542,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1540,
            "endLine" : 1544,
            "snippet" : {
              "text" : "            payload = self.string_to_base64(body)\n            secret = self.encode(self.secret)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha384)\n            headers = {\n                'X-BFX-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6b046f103af90418:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitfinex2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 798,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 796,
            "endLine" : 800,
            "snippet" : {
              "text" : "            nonce = self.milliseconds()\n            payload = 'AUTH' + str(nonce)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384, 'hex')\n            event = 'auth'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5b101f4c9fd8fff7:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitfinex2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 2457,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2455,
            "endLine" : 2459,
            "snippet" : {
              "text" : "            body = self.json(query)\n            auth = '/api/' + request + nonce + body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'bfx-nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92a773349f739521:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitfinex2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 2457,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2455,
            "endLine" : 2459,
            "snippet" : {
              "text" : "            body = self.json(query)\n            auth = '/api/' + request + nonce + body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'bfx-nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92a773349f739521:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitflyer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 971,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 969,
            "endLine" : 973,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-TIMESTAMP': nonce,\n                'ACCESS-SIGN': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b56502179ebc34c5:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitflyer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 971,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 969,
            "endLine" : 973,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-TIMESTAMP': nonce,\n                'ACCESS-SIGN': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b56502179ebc34c5:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitforex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 788,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 786,
            "endLine" : 790,
            "snippet" : {
              "text" : "            # message = '/' + 'api/' + self.version + '/' + path + '?' + payload\n            message = '/' + path + '?' + payload\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            body = payload + '&signData=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7b191fae938f27a:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitforex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 788,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 786,
            "endLine" : 790,
            "snippet" : {
              "text" : "            # message = '/' + 'api/' + self.version + '/' + path + '?' + payload\n            message = '/' + path + '?' + payload\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            body = payload + '&signData=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7b191fae938f27a:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitget.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 6602,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 6600,
            "endLine" : 6604,
            "snippet" : {
              "text" : "                    url += queryInner\n                    auth += queryInner\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            broker = self.safe_string(self.options, 'broker')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7eab5152cdd1d44:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitget.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 6603,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 6601,
            "endLine" : 6605,
            "snippet" : {
              "text" : "                    url += queryInner\n                    auth += queryInner\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            broker = self.safe_string(self.options, 'broker')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7eab5152cdd1d44:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitget.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 1435,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1433,
            "endLine" : 1437,
            "snippet" : {
              "text" : "            timestamp = str(self.seconds())\n            auth = timestamp + 'GET' + '/user/verify'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            operation = 'login'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "27dd2f1829f324a7:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bithumb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 997,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 995,
            "endLine" : 999,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = endpoint + \"\\0\" + body + \"\\0\" + nonce  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            signature64 = self.string_to_base64(signature)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a93465ab28d28b05:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bithumb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 997,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 995,
            "endLine" : 999,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = endpoint + \"\\0\" + body + \"\\0\" + nonce  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            signature64 = self.string_to_base64(signature)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a93465ab28d28b05:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitmart.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 3953,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3951,
            "endLine" : 3955,
            "snippet" : {
              "text" : "                queryString = body\n            auth = timestamp + '#' + self.uid + '#' + queryString\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-BM-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f06f40ce082190:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitmart.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 483,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 481,
            "endLine" : 485,
            "snippet" : {
              "text" : "            path = 'bitmart.WebSocket'\n            auth = timestamp + '#' + memo + '#' + path\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            operation = 'login'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "40f4bbb7ab3957f2:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitmart.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 3953,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3951,
            "endLine" : 3955,
            "snippet" : {
              "text" : "                queryString = body\n            auth = timestamp + '#' + self.uid + '#' + queryString\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-BM-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f06f40ce082190:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitmex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 34
          },
          "region" : {
            "startLine" : 562,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 560,
            "endLine" : 564,
            "snippet" : {
              "text" : "            timestamp = self.milliseconds()\n            payload = 'GET' + '/realtime' + str(timestamp)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'op': 'authKeyExpires',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "62792d98efcfb7e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitmex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 35
          },
          "region" : {
            "startLine" : 2628,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2626,
            "endLine" : 2629,
            "snippet" : {
              "text" : "                    body = self.json(params)\n                    auth += body\n            headers['api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "166b61e5f9866e8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitmex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 36
          },
          "region" : {
            "startLine" : 2628,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2626,
            "endLine" : 2629,
            "snippet" : {
              "text" : "                    body = self.json(params)\n                    auth += body\n            headers['api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "166b61e5f9866e8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 37
          },
          "region" : {
            "startLine" : 223,
            "startColumn" : 66,
            "endColumn" : 80
          },
          "contextRegion" : {
            "startLine" : 221,
            "endLine" : 225,
            "snippet" : {
              "text" : "        })\n        payload = self.string_to_base64(rawData)\n        signature = self.hmac(payload, self.encode(self.secret), hashlib.sha384)\n        defaultOptions = {\n            'ws': {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "844e6b41cfd5ba08:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 38
          },
          "region" : {
            "startLine" : 1589,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1587,
            "endLine" : 1591,
            "snippet" : {
              "text" : "                body = self.json(params)\n                payload = self.string_to_base64(body)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 38
          },
          "region" : {
            "startLine" : 1602,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1600,
            "endLine" : 1604,
            "snippet" : {
              "text" : "                data = self.json(rawData)\n                payload = self.string_to_base64(data)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 39
          },
          "region" : {
            "startLine" : 1589,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1587,
            "endLine" : 1591,
            "snippet" : {
              "text" : "                body = self.json(params)\n                payload = self.string_to_base64(body)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitopro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 39
          },
          "region" : {
            "startLine" : 1602,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1600,
            "endLine" : 1604,
            "snippet" : {
              "text" : "                data = self.json(rawData)\n                payload = self.string_to_base64(data)\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n                headers['X-BITOPRO-APIKEY'] = self.apiKey\n                headers['X-BITOPRO-PAYLOAD'] = payload\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c104ff9cc86e45e7:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 2908,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2906,
            "endLine" : 2910,
            "snippet" : {
              "text" : "                signMessage = timestamp + method + signPath\n                if method == 'GET':\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'X-CH-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd481dc:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 2921,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2919,
            "endLine" : 2923,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    signMessage = signMessage + json.dumps(body)\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd41b44:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 2888,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 2886,
            "endLine" : 2890,
            "snippet" : {
              "text" : "                    'recvWindow': recvWindow,\n                }, params))\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n                query += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 2887,
            "startColumn" : 85,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 2885,
            "endLine" : 2889,
            "snippet" : {
              "text" : "                    'recvWindow': recvWindow,\n                }, params))\n                signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n                query += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 2920,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2918,
            "endLine" : 2922,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    signMessage = signMessage + json.dumps(body)\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd41b44:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitrue.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 2907,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 2905,
            "endLine" : 2909,
            "snippet" : {
              "text" : "                signMessage = timestamp + method + signPath\n                if method == 'GET':\n                    signature = self.hmac(self.encode(signMessage), self.encode(self.secret), hashlib.sha256)\n                    headers = {\n                        'X-CH-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16fe2b25bfd481dc:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitso.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 42
          },
          "region" : {
            "startLine" : 1620,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1618,
            "endLine" : 1622,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    request += body\n            signature = self.hmac(self.encode(request), self.encode(self.secret), hashlib.sha256)\n            auth = self.apiKey + ':' + nonce + ':' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5990606e16bf38a2:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitso.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 43
          },
          "region" : {
            "startLine" : 1620,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1618,
            "endLine" : 1622,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    request += body\n            signature = self.hmac(self.encode(request), self.encode(self.secret), hashlib.sha256)\n            auth = self.apiKey + ':' + nonce + ':' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5990606e16bf38a2:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitstamp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 1967,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1965,
            "endLine" : 1969,
            "snippet" : {
              "text" : "            authBody = body if body else ''\n            auth = xAuth + method + url.replace('https://', '') + contentType + xAuthNonce + xAuthTimestamp + xAuthVersion + authBody\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-Auth-Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f07f03a88cec73:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitstamp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 45
          },
          "region" : {
            "startLine" : 1967,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1965,
            "endLine" : 1969,
            "snippet" : {
              "text" : "            authBody = body if body else ''\n            auth = xAuth + method + url.replace('https://', '') + contentType + xAuthNonce + xAuthTimestamp + xAuthVersion + authBody\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['X-Auth-Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "34f07f03a88cec73:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 46
          },
          "region" : {
            "startLine" : 2031,
            "startColumn" : 62,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 2029,
            "endLine" : 2033,
            "snippet" : {
              "text" : "                if params:\n                    url += '?' + self.rawencode(params)\n            contentHash = self.hash(self.encode(hashString), 'sha512', 'hex')\n            timestamp = str(self.milliseconds())\n            auth = timestamp + url + method + contentHash\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6a1a93049ddf77c:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 46
          },
          "region" : {
            "startLine" : 2037,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2035,
            "endLine" : 2039,
            "snippet" : {
              "text" : "            if subaccountId is not None:\n                auth += subaccountId\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Api-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8b70ae5d47106bb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 47
          },
          "region" : {
            "startLine" : 2037,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2035,
            "endLine" : 2039,
            "snippet" : {
              "text" : "            if subaccountId is not None:\n                auth += subaccountId\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Api-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8b70ae5d47106bb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 47
          },
          "region" : {
            "startLine" : 2031,
            "startColumn" : 62,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 2029,
            "endLine" : 2033,
            "snippet" : {
              "text" : "                if params:\n                    url += '?' + self.rawencode(params)\n            contentHash = self.hash(self.encode(hashString), 'sha512', 'hex')\n            timestamp = str(self.milliseconds())\n            auth = timestamp + url + method + contentHash\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d6a1a93049ddf77c:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bittrex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 48
          },
          "region" : {
            "startLine" : 99,
            "startColumn" : 76,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 97,
            "endLine" : 101,
            "snippet" : {
              "text" : "        uuid = self.uuid()\n        auth = str(timestamp) + uuid\n        signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n        args = [self.apiKey, timestamp, uuid, signature]\n        method = 'Authenticate'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a315bebb7e6d5924:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bitvavo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 49
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            auth = timestamp + method + url + payload\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            accessWindow = self.safe_string(self.options, 'BITVAVO-ACCESS-WINDOW', '10000')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea4adf341612b980:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bitvavo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 50
          },
          "region" : {
            "startLine" : 562,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 560,
            "endLine" : 564,
            "snippet" : {
              "text" : "            stringTimestamp = str(timestamp)\n            auth = stringTimestamp + 'GET/' + self.version + '/websocket'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            action = 'authenticate'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99e04d934f3ac497:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bitvavo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 51
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "            timestamp = str(self.milliseconds())\n            auth = timestamp + method + url + payload\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            accessWindow = self.safe_string(self.options, 'BITVAVO-ACCESS-WINDOW', '10000')\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea4adf341612b980:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bl3p.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 417,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 415,
            "endLine" : 419,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            auth = request + \"\\0\" + body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "680d0e0461be4bae:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bl3p.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 53
          },
          "region" : {
            "startLine" : 417,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 415,
            "endLine" : 419,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            auth = request + \"\\0\" + body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "680d0e0461be4bae:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcalpha.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 54
          },
          "region" : {
            "startLine" : 847,
            "startColumn" : 91,
            "endColumn" : 105
          },
          "contextRegion" : {
            "startLine" : 845,
            "endLine" : 849,
            "snippet" : {
              "text" : "                url += '?' + query\n            headers['X-KEY'] = self.apiKey\n            headers['X-SIGN'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            headers['X-NONCE'] = str(self.nonce())\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "203f7583ab1f0a6f:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcalpha.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 55
          },
          "region" : {
            "startLine" : 847,
            "startColumn" : 91,
            "endColumn" : 105
          },
          "contextRegion" : {
            "startLine" : 845,
            "endLine" : 849,
            "snippet" : {
              "text" : "                url += '?' + query\n            headers['X-KEY'] = self.apiKey\n            headers['X-SIGN'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            headers['X-NONCE'] = str(self.nonce())\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "203f7583ab1f0a6f:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 56
          },
          "region" : {
            "startLine" : 501,
            "startColumn" : 58,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 499,
            "endLine" : 503,
            "snippet" : {
              "text" : "            }, params)\n            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a12f6cc464a8e841:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 56
          },
          "region" : {
            "startLine" : 502,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 500,
            "endLine" : 504,
            "snippet" : {
              "text" : "            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cde5cccd0c487435:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 501,
            "startColumn" : 58,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 499,
            "endLine" : 503,
            "snippet" : {
              "text" : "            }, params)\n            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a12f6cc464a8e841:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcbox.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 502,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 500,
            "endLine" : 504,
            "snippet" : {
              "text" : "            request = self.urlencode(query)\n            secret = self.hash(self.encode(self.secret), 'sha256')\n            query['signature'] = self.hmac(self.encode(request), self.encode(secret), hashlib.sha256)\n            body = self.urlencode(query)\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cde5cccd0c487435:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcmarkets.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 1121,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1119,
            "endLine" : 1123,
            "snippet" : {
              "text" : "                body = self.json(query)\n                auth += body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Accept': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2b07f1307d1b809:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcmarkets.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 59
          },
          "region" : {
            "startLine" : 1121,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1119,
            "endLine" : 1123,
            "snippet" : {
              "text" : "                body = self.json(query)\n                auth += body\n            signature = self.hmac(self.encode(auth), secret, hashlib.sha512, 'base64')\n            headers = {\n                'Accept': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2b07f1307d1b809:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/btcturk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 868,
            "startColumn" : 69,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 866,
            "endLine" : 870,
            "snippet" : {
              "text" : "                'X-PCK': self.apiKey,\n                'X-Stamp': nonce,\n                'X-Signature': self.hmac(self.encode(auth), secret, hashlib.sha256, 'base64'),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ee99f3e8af89827:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/btcturk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 61
          },
          "region" : {
            "startLine" : 868,
            "startColumn" : 69,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 866,
            "endLine" : 870,
            "snippet" : {
              "text" : "                'X-PCK': self.apiKey,\n                'X-Stamp': nonce,\n                'X-Signature': self.hmac(self.encode(auth), secret, hashlib.sha256, 'base64'),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1ee99f3e8af89827:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 6945,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6943,
            "endLine" : 6947,
            "snippet" : {
              "text" : "                    body = '{}'\n                payload = timestamp + self.apiKey + body\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n                headers = {\n                    'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea7f4d1d282e105e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 6989,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 6987,
            "endLine" : 6991,
            "snippet" : {
              "text" : "                    signature = self.rsa(auth, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                if method == 'POST':\n                    isSpot = url.find('spot') >= 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7f0b1aed5c0b120:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 6975,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 6973,
            "endLine" : 6977,
            "snippet" : {
              "text" : "                    signature = self.rsa(authFull, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(authFull), self.encode(self.secret), hashlib.sha256)\n                headers['X-BAPI-SIGN'] = signature\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa7d9d173894cd11:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 63
          },
          "region" : {
            "startLine" : 1605,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1603,
            "endLine" : 1607,
            "snippet" : {
              "text" : "            path = 'GET/realtime'\n            auth = path + expires\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'hex')\n            request = {\n                'op': 'auth',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b65307d6cff9fbe0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 6944,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6942,
            "endLine" : 6946,
            "snippet" : {
              "text" : "                    body = '{}'\n                payload = timestamp + self.apiKey + body\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n                headers = {\n                    'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea7f4d1d282e105e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 6988,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 6986,
            "endLine" : 6990,
            "snippet" : {
              "text" : "                    signature = self.rsa(auth, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                if method == 'POST':\n                    isSpot = url.find('spot') >= 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7f0b1aed5c0b120:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/bybit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 6974,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 6972,
            "endLine" : 6976,
            "snippet" : {
              "text" : "                    signature = self.rsa(authFull, self.secret, 'sha256')\n                else:\n                    signature = self.hmac(self.encode(authFull), self.encode(self.secret), hashlib.sha256)\n                headers['X-BAPI-SIGN'] = signature\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa7d9d173894cd11:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/cex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 65
          },
          "region" : {
            "startLine" : 1132,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1130,
            "endLine" : 1134,
            "snippet" : {
              "text" : "            nonce = str(self.seconds())\n            auth = nonce + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'e': 'auth',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1cdc72c96fb6e7b:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/cex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 66
          },
          "region" : {
            "startLine" : 1503,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1501,
            "endLine" : 1505,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.json(self.extend({\n                'key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b036cc9281b5f169:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/cex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 67
          },
          "region" : {
            "startLine" : 1503,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1501,
            "endLine" : 1505,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.json(self.extend({\n                'key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b036cc9281b5f169:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinbase.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 68
          },
          "region" : {
            "startLine" : 2948,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2946,
            "endLine" : 2950,
            "snippet" : {
              "text" : "                else:\n                    auth = nonce + method + fullPath + payload\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdca2e7ec9eeefd:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinbase.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 69
          },
          "region" : {
            "startLine" : 2948,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2946,
            "endLine" : 2950,
            "snippet" : {
              "text" : "                else:\n                    auth = nonce + method + fullPath + payload\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdca2e7ec9eeefd:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinbase.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 70
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "            'api_key': self.apiKey,\n            'timestamp': timestamp,\n            'signature': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n        }\n        return await self.watch(url, messageHash, subscribe, messageHash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ad4226ce0c90522f:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinbasepro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 71
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "        nonce = self.nonce()\n        payload = str(nonce) + 'GET' + path\n        signature = self.hmac(self.encode(payload), self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\n        return {\n            'timestamp': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95ef82f804984cdd:1",
        "primaryLocationStartColumnFingerprint" : "80"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinbasepro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 72
          },
          "region" : {
            "startLine" : 1738,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1736,
            "endLine" : 1740,
            "snippet" : {
              "text" : "            except Exception as e:\n                raise AuthenticationError(self.id + ' sign() invalid base64 secret')\n            signature = self.hmac(self.encode(what), secret, hashlib.sha256, 'base64')\n            headers = {\n                'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6c507b0a213952b:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinbasepro.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 73
          },
          "region" : {
            "startLine" : 1738,
            "startColumn" : 62,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 1736,
            "endLine" : 1740,
            "snippet" : {
              "text" : "            except Exception as e:\n                raise AuthenticationError(self.id + ' sign() invalid base64 secret')\n            signature = self.hmac(self.encode(what), secret, hashlib.sha256, 'base64')\n            headers = {\n                'CB-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6c507b0a213952b:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coincheck.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 74
          },
          "region" : {
            "startLine" : 773,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 771,
            "endLine" : 775,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coincheck.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 75
          },
          "region" : {
            "startLine" : 773,
            "startColumn" : 92,
            "endColumn" : 106
          },
          "contextRegion" : {
            "startLine" : 771,
            "endLine" : 775,
            "snippet" : {
              "text" : "                'ACCESS-KEY': self.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "707d7e14b5fc82b:1",
        "primaryLocationStartColumnFingerprint" : "75"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 76
          },
          "region" : {
            "startLine" : 502,
            "startColumn" : 91,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 500,
            "endLine" : 504,
            "snippet" : {
              "text" : "        }\n        self.options['watchOrderBookSubscriptions'] = watchOrderBookSubscriptions\n        subscriptionHash = self.hash(self.encode(self.json(watchOrderBookSubscriptions)), 'sha256')\n        request = self.deep_extend(subscribe, params)\n        orderbook = await self.watch(url, messageHash, request, subscriptionHash, request)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "69d77b8d5e9f2ed6:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 76
          },
          "region" : {
            "startLine" : 1011,
            "startColumn" : 53,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 1009,
            "endLine" : 1013,
            "snippet" : {
              "text" : "            }\n            signData = 'access_id=' + self.apiKey + '&tonce=' + self.number_to_string(time) + '&secret_key=' + self.secret\n            hash = self.hash(self.encode(signData), 'md5')\n            request = {\n                'method': 'server.sign',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9e793d832f118630:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 76
          },
          "region" : {
            "startLine" : 1035,
            "startColumn" : 53,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1033,
            "endLine" : 1037,
            "snippet" : {
              "text" : "            }\n            signData = 'access_id=' + self.apiKey + '&timestamp=' + self.number_to_string(time) + '&secret_key=' + self.secret\n            hash = self.hash(self.encode(signData), 'sha256', 'hex')\n            request = {\n                'method': 'server.sign',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79c5d80771bc6b1f:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 77
          },
          "region" : {
            "startLine" : 4573,
            "startColumn" : 91,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 4571,
            "endLine" : 4575,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'sha256')\n            headers = {\n                'Authorization': signature.lower(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e03cd1c0458f88af:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 77
          },
          "region" : {
            "startLine" : 4594,
            "startColumn" : 91,
            "endColumn" : 96
          },
          "contextRegion" : {
            "startLine" : 4592,
            "endLine" : 4596,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'md5')\n            headers = {\n                'Authorization': signature.upper(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d17b22b9c180bdea:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 78
          },
          "region" : {
            "startLine" : 4574,
            "startColumn" : 91,
            "endColumn" : 99
          },
          "contextRegion" : {
            "startLine" : 4572,
            "endLine" : 4576,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'sha256')\n            headers = {\n                'Authorization': signature.lower(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e03cd1c0458f88af:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 78
          },
          "region" : {
            "startLine" : 4595,
            "startColumn" : 91,
            "endColumn" : 96
          },
          "contextRegion" : {
            "startLine" : 4593,
            "endLine" : 4597,
            "snippet" : {
              "text" : "            query = self.keysort(query)\n            urlencoded = self.rawencode(query)\n            signature = self.hash(self.encode(urlencoded + '&secret_key=' + self.secret), 'md5')\n            headers = {\n                'Authorization': signature.upper(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d17b22b9c180bdea:1",
        "primaryLocationStartColumnFingerprint" : "78"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinlist.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 79
          },
          "region" : {
            "startLine" : 2178,
            "startColumn" : 90,
            "endColumn" : 104
          },
          "contextRegion" : {
            "startLine" : 2176,
            "endLine" : 2180,
            "snippet" : {
              "text" : "                auth += '?' + query\n                url += '?' + query\n            signature = self.hmac(self.encode(auth), self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'CL-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd3507922e10ac84:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinlist.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 80
          },
          "region" : {
            "startLine" : 2178,
            "startColumn" : 90,
            "endColumn" : 104
          },
          "contextRegion" : {
            "startLine" : 2176,
            "endLine" : 2180,
            "snippet" : {
              "text" : "                auth += '?' + query\n                url += '?' + query\n            signature = self.hmac(self.encode(auth), self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'CL-ACCESS-KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd3507922e10ac84:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinmate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 81
          },
          "region" : {
            "startLine" : 907,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 905,
            "endLine" : 909,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.urlencode(self.extend({\n                'clientId': self.uid,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0f237605dfab03e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinmate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 82
          },
          "region" : {
            "startLine" : 907,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 905,
            "endLine" : 909,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = nonce + self.uid + self.apiKey\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            body = self.urlencode(self.extend({\n                'clientId': self.uid,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0f237605dfab03e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinone.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 83
          },
          "region" : {
            "startLine" : 851,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 849,
            "endLine" : 853,
            "snippet" : {
              "text" : "            body = payload\n            secret = self.secret.upper()\n            signature = self.hmac(self.encode(payload), self.encode(secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7cf8667feb4259f5:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinone.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 84
          },
          "region" : {
            "startLine" : 851,
            "startColumn" : 78,
            "endColumn" : 92
          },
          "contextRegion" : {
            "startLine" : 849,
            "endLine" : 853,
            "snippet" : {
              "text" : "            body = payload\n            secret = self.secret.upper()\n            signature = self.hmac(self.encode(payload), self.encode(secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7cf8667feb4259f5:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinsph.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 85
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "                    query['recvWindow'] = defaultRecvWindow\n            query = self.url_encode_query(query)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            url = url + '?' + query + '&signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ddee36a8de021d7:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinsph.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 86
          },
          "region" : {
            "startLine" : 1798,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1796,
            "endLine" : 1800,
            "snippet" : {
              "text" : "                    query['recvWindow'] = defaultRecvWindow\n            query = self.url_encode_query(query)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            url = url + '?' + query + '&signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ddee36a8de021d7:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/coinspot.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 87
          },
          "region" : {
            "startLine" : 511,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 509,
            "endLine" : 513,
            "snippet" : {
              "text" : "                'Content-Type': 'application/json',\n                'key': self.apiKey,\n                'sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8933bd3eac00e75:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/coinspot.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 88
          },
          "region" : {
            "startLine" : 511,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 509,
            "endLine" : 513,
            "snippet" : {
              "text" : "                'Content-Type': 'application/json',\n                'key': self.apiKey,\n                'sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8933bd3eac00e75:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/cryptocom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 89
          },
          "region" : {
            "startLine" : 2862,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 2860,
            "endLine" : 2864,
            "snippet" : {
              "text" : "            strSortKey = self.params_to_string(requestParams, 0)\n            payload = path + nonce + self.apiKey + strSortKey + nonce\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            paramsKeysLength = len(paramsKeys)\n            body = self.json({\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5f5d8aca55ba0cfe:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/cryptocom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 90
          },
          "region" : {
            "startLine" : 2862,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 2860,
            "endLine" : 2864,
            "snippet" : {
              "text" : "            strSortKey = self.params_to_string(requestParams, 0)\n            payload = path + nonce + self.apiKey + strSortKey + nonce\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            paramsKeysLength = len(paramsKeys)\n            body = self.json({\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5f5d8aca55ba0cfe:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/cryptocom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 91
          },
          "region" : {
            "startLine" : 858,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 856,
            "endLine" : 860,
            "snippet" : {
              "text" : "            nonce = str(self.nonce())\n            auth = method + nonce + self.apiKey + nonce\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'id': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1d0613f13485156:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/currencycom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 92
          },
          "region" : {
            "startLine" : 1752,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1750,
            "endLine" : 1754,
            "snippet" : {
              "text" : "                'recvWindow': self.options['recvWindow'],\n            }, params))\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/currencycom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 93
          },
          "region" : {
            "startLine" : 318,
            "startColumn" : 98,
            "endColumn" : 112
          },
          "contextRegion" : {
            "startLine" : 316,
            "endLine" : 320,
            "snippet" : {
              "text" : "            'payload': payload,\n        }, params)\n        request['payload']['signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        subscription = self.extend(request, {\n            'messageHash': messageHash,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "298048f575696938:1",
        "primaryLocationStartColumnFingerprint" : "89"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/currencycom.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 94
          },
          "region" : {
            "startLine" : 1752,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1750,
            "endLine" : 1754,
            "snippet" : {
              "text" : "                'recvWindow': self.options['recvWindow'],\n            }, params))\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/delta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 95
          },
          "region" : {
            "startLine" : 3088,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3086,
            "endLine" : 3090,
            "snippet" : {
              "text" : "                auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7bad662c98186514:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/delta.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 96
          },
          "region" : {
            "startLine" : 3088,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3086,
            "endLine" : 3090,
            "snippet" : {
              "text" : "                auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7bad662c98186514:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/deribit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 97
          },
          "region" : {
            "startLine" : 3078,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3076,
            "endLine" : 3080,
            "snippet" : {
              "text" : "            requestData = method + \"\\n\" + request + \"\\n\" + requestBody + \"\\n\"  # eslint-disable-line quotes\n            auth = timestamp + \"\\n\" + nonce + \"\\n\" + requestData  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers = {\n                'Authorization': 'deri-hmac-sha256 id=' + self.apiKey + ',ts=' + timestamp + ',sig=' + signature + ',' + 'nonce=' + nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdc5fa7930c80cb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/deribit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 98
          },
          "region" : {
            "startLine" : 771,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 769,
            "endLine" : 773,
            "snippet" : {
              "text" : "            self.check_required_credentials()\n            requestId = self.request_id()\n            signature = self.hmac(self.encode(timeString + '\\n' + nonce + '\\n'), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'jsonrpc': '2.0',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d298e4f00317bc55:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/deribit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 99
          },
          "region" : {
            "startLine" : 3078,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3076,
            "endLine" : 3080,
            "snippet" : {
              "text" : "            requestData = method + \"\\n\" + request + \"\\n\" + requestBody + \"\\n\"  # eslint-disable-line quotes\n            auth = timestamp + \"\\n\" + nonce + \"\\n\" + requestData  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers = {\n                'Authorization': 'deri-hmac-sha256 id=' + self.apiKey + ',ts=' + timestamp + ',sig=' + signature + ',' + 'nonce=' + nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fdc5fa7930c80cb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/digifinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 100
          },
          "region" : {
            "startLine" : 3919,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3917,
            "endLine" : 3921,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = urlencoded\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            if method == 'GET':\n                if urlencoded:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7ec69ec88dc0d61:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/digifinex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 101
          },
          "region" : {
            "startLine" : 3918,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 3916,
            "endLine" : 3920,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = urlencoded\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            if method == 'GET':\n                if urlencoded:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7ec69ec88dc0d61:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/ecdsa.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 102
          },
          "region" : {
            "startLine" : 221,
            "startColumn" : 25,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 219,
            "endLine" : 223,
            "snippet" : {
              "text" : "    # in ECDSAVS.\n    #\n    from hashlib import sha1\n    return string_to_int(sha1(int_to_string(m)).digest())\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99a6110ae3eaa565:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1299,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 1297,
            "endLine" : 1301,
            "snippet" : {
              "text" : "    def jwt(request, secret, algorithm='sha256', is_rsa=False):\n        algos = {\n            'sha256': hashlib.sha256,\n            'sha384': hashlib.sha384,\n            'sha512': hashlib.sha512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "50c7d14ff2a15600:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1300,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 1298,
            "endLine" : 1302,
            "snippet" : {
              "text" : "        algos = {\n            'sha256': hashlib.sha256,\n            'sha384': hashlib.sha384,\n            'sha512': hashlib.sha512,\n        }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "866b8deb64f20191:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1301,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 1299,
            "endLine" : 1303,
            "snippet" : {
              "text" : "            'sha256': hashlib.sha256,\n            'sha384': hashlib.sha384,\n            'sha512': hashlib.sha512,\n        }\n        alg = ('RS' if is_rsa else 'HS') + algorithm[3:]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "70b2c7e47a434628:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1314,
            "startColumn" : 71,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 1312,
            "endLine" : 1316,
            "snippet" : {
              "text" : "            signature = Exchange.base64_to_binary(Exchange.rsa(token, Exchange.decode(secret), algorithm))\n        else:\n            signature = Exchange.hmac(Exchange.encode(token), secret, algos[algorithm], 'binary')\n        return token + '.' + Exchange.base64urlencode(signature)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f931ccf9ed1e7692:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1320,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1318,
            "endLine" : 1322,
            "snippet" : {
              "text" : "    def rsa(request, secret, alg='sha256'):\n        algorithms = {\n            \"sha256\": hashes.SHA256(),\n            \"sha384\": hashes.SHA384(),\n            \"sha512\": hashes.SHA512(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7a472206e3cecee:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1321,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1319,
            "endLine" : 1323,
            "snippet" : {
              "text" : "        algorithms = {\n            \"sha256\": hashes.SHA256(),\n            \"sha384\": hashes.SHA384(),\n            \"sha512\": hashes.SHA512(),\n        }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "144baa9e83b09c17:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1322,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1320,
            "endLine" : 1324,
            "snippet" : {
              "text" : "            \"sha256\": hashes.SHA256(),\n            \"sha384\": hashes.SHA384(),\n            \"sha512\": hashes.SHA512(),\n        }\n        algorithm = algorithms[alg]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8bd9a63e549b2fba:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1342,
            "startColumn" : 25,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 1340,
            "endLine" : 1344,
            "snippet" : {
              "text" : "            raise ArgumentsRequired(algorithm + ' is not a supported algorithm')\n        curve_info = algorithms[algorithm]\n        hash_function = getattr(hashlib, curve_info[1])\n        encoded_request = Exchange.encode(request)\n        if hash is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f0b27f12e38f0571:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1554,
            "startColumn" : 99,
            "endColumn" : 111
          },
          "contextRegion" : {
            "startLine" : 1552,
            "endLine" : 1556,
            "snippet" : {
              "text" : "\n        epoch = int(time.time()) // 30\n        hmac_res = Exchange.hmac(epoch.to_bytes(8, 'big'), base32_to_bytes(key.replace(' ', '')), hashlib.sha1, 'hex')\n        offset = hex_to_dec(hmac_res[-1]) * 2\n        otp = str(hex_to_dec(hmac_res[offset: offset + 8]) & 0x7fffffff)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d3c550e911338e7:1",
        "primaryLocationStartColumnFingerprint" : "90"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1240,
            "startColumn" : 33,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 1238,
            "endLine" : 1242,
            "snippet" : {
              "text" : "\n    @staticmethod\n    def hash(request, algorithm='md5', digest='hex'):\n        if algorithm == 'keccak':\n            binary = bytes(keccak.SHA3(request))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84bc18c859df7fb3:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1253,
            "startColumn" : 41,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 1251,
            "endLine" : 1255,
            "snippet" : {
              "text" : "\n    @staticmethod\n    def hmac(request, secret, algorithm=hashlib.sha256, digest='hex'):\n        h = hmac.new(secret, request, algorithm)\n        binary = h.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3cfdfd999a1dc569:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1329,
            "startColumn" : 55,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 1327,
            "endLine" : 1331,
            "snippet" : {
              "text" : "\n    @staticmethod\n    def ecdsa(request, secret, algorithm='p256', hash=None, fixed_length=False):\n        # your welcome - frosty00\n        algorithms = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4b8cb43a30d090c2:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/exmo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 104
          },
          "region" : {
            "startLine" : 2385,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2383,
            "endLine" : 2387,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/exmo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 105
          },
          "region" : {
            "startLine" : 616,
            "startColumn" : 79,
            "endColumn" : 93
          },
          "contextRegion" : {
            "startLine" : 614,
            "endLine" : 618,
            "snippet" : {
              "text" : "            requestId = self.request_id()\n            signData = self.apiKey + str(time)\n            sign = self.hmac(self.encode(signData), self.encode(self.secret), hashlib.sha512, 'base64')\n            request = {\n                'method': 'login',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f98ce3c703a5d529:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/exmo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 106
          },
          "region" : {
            "startLine" : 2385,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2383,
            "endLine" : 2387,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 107
          },
          "region" : {
            "startLine" : 5510,
            "startColumn" : 65,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 5508,
            "endLine" : 5512,
            "snippet" : {
              "text" : "                body = self.json(query)\n            bodyPayload = '' if (body is None) else body\n            bodySignature = self.hash(self.encode(bodyPayload), 'sha512')\n            timestamp = self.seconds()\n            timestampString = str(timestamp)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fd35269f3eb837f4:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 107
          },
          "region" : {
            "startLine" : 5517,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 5515,
            "endLine" : 5519,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join(payloadArray)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82d9ef060f8e89bd:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 108
          },
          "region" : {
            "startLine" : 5509,
            "startColumn" : 65,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 5507,
            "endLine" : 5511,
            "snippet" : {
              "text" : "                body = self.json(query)\n            bodyPayload = '' if (body is None) else body\n            bodySignature = self.hash(self.encode(bodyPayload), 'sha512')\n            timestamp = self.seconds()\n            timestampString = str(timestamp)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fd35269f3eb837f4:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 108
          },
          "region" : {
            "startLine" : 5516,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 5514,
            "endLine" : 5518,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join(payloadArray)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'KEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82d9ef060f8e89bd:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/gate.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 109
          },
          "region" : {
            "startLine" : 1188,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 1186,
            "endLine" : 1190,
            "snippet" : {
              "text" : "        event = 'subscribe'\n        signaturePayload = 'channel=' + channel + '&' + 'event=' + event + '&' + 'time=' + str(time)\n        signature = self.hmac(self.encode(signaturePayload), self.encode(self.secret), hashlib.sha512, 'hex')\n        auth = {\n            'method': 'api_key',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f68516a63bfdf35:1",
        "primaryLocationStartColumnFingerprint" : "79"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/gemini.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 110
          },
          "region" : {
            "startLine" : 1617,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1615,
            "endLine" : 1619,
            "snippet" : {
              "text" : "            payload = self.json(request)\n            payload = self.string_to_base64(payload)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'Content-Type': 'text/plain',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bf2a4d387e8a8051:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/gemini.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 111
          },
          "region" : {
            "startLine" : 602,
            "startColumn" : 75,
            "endColumn" : 89
          },
          "contextRegion" : {
            "startLine" : 600,
            "endLine" : 604,
            "snippet" : {
              "text" : "        }\n        b64 = self.string_to_base64(self.json(payload))\n        signature = self.hmac(self.encode(b64), self.encode(self.secret), hashlib.sha384, 'hex')\n        defaultOptions = {\n            'ws': {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4b9908de0c546c7:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/gemini.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 112
          },
          "region" : {
            "startLine" : 1616,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1614,
            "endLine" : 1618,
            "snippet" : {
              "text" : "            payload = self.json(request)\n            payload = self.string_to_base64(payload)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha384)\n            headers = {\n                'Content-Type': 'text/plain',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bf2a4d387e8a8051:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/hitbtc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 113
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 85,
            "endLine" : 89,
            "snippet" : {
              "text" : "        if authenticated is None:\n            timestamp = self.milliseconds()\n            signature = self.hmac(self.encode(self.number_to_string(timestamp)), self.encode(self.secret), hashlib.sha256, 'hex')\n            request = {\n                'method': 'login',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b0707da294a9b5a:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/hitbtc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 114
          },
          "region" : {
            "startLine" : 3204,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 3202,
            "endLine" : 3206,
            "snippet" : {
              "text" : "            payload.append(timestamp)\n            payloadString = ''.join(payload)\n            signature = self.hmac(self.encode(payloadString), self.encode(self.secret), hashlib.sha256, 'hex')\n            secondPayload = self.apiKey + ':' + signature + ':' + timestamp\n            encoded = self.string_to_base64(secondPayload)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "43783a78b94db4ad:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/hitbtc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 115
          },
          "region" : {
            "startLine" : 3204,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 3202,
            "endLine" : 3206,
            "snippet" : {
              "text" : "            payload.append(timestamp)\n            payloadString = ''.join(payload)\n            signature = self.hmac(self.encode(payloadString), self.encode(self.secret), hashlib.sha256, 'hex')\n            secondPayload = self.apiKey + ':' + signature + ':' + timestamp\n            encoded = self.string_to_base64(secondPayload)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "43783a78b94db4ad:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/hollaex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 116
          },
          "region" : {
            "startLine" : 415,
            "startColumn" : 76,
            "endColumn" : 90
          },
          "contextRegion" : {
            "startLine" : 413,
            "endLine" : 417,
            "snippet" : {
              "text" : "        url = self.urls['api']['ws']\n        auth = 'CONNECT' + '/stream' + expires\n        signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        authParams = {\n            'api-key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1c2f4443a000a10a:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/hollaex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 117
          },
          "region" : {
            "startLine" : 1764,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1762,
            "endLine" : 1766,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    auth += body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['api-signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fb379b564e89c1d:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/hollaex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 118
          },
          "region" : {
            "startLine" : 1764,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1762,
            "endLine" : 1766,
            "snippet" : {
              "text" : "                    body = self.json(query)\n                    auth += body\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            headers['api-signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fb379b564e89c1d:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 119
          },
          "region" : {
            "startLine" : 2168,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 2166,
            "endLine" : 2170,
            "snippet" : {
              "text" : "            auth = self.urlencode(signatureParams)\n            payload = \"\\n\".join(['GET', hostname, relativePath, auth])  # eslint-disable-line quotes\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            request = None\n            if type == 'spot':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec32e02f85e37ba:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 120
          },
          "region" : {
            "startLine" : 6290,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6288,
            "endLine" : 6292,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 120
          },
          "region" : {
            "startLine" : 6226,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6224,
            "endLine" : 6228,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, self.hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 121
          },
          "region" : {
            "startLine" : 6289,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6287,
            "endLine" : 6291,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:2",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/htx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 121
          },
          "region" : {
            "startLine" : 6225,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 6223,
            "endLine" : 6227,
            "snippet" : {
              "text" : "                # unfortunately, PHP demands double quotes for the escaped newline symbol\n                payload = \"\\n\".join([method, self.hostname, url, auth])  # eslint-disable-line quotes\n                signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n                auth += '&' + self.urlencode({'Signature': signature})\n                url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/huobijp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 122
          },
          "region" : {
            "startLine" : 1740,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1738,
            "endLine" : 1742,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join([method, self.hostname, url, auth])\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            auth += '&' + self.urlencode({'Signature': signature})\n            url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/huobijp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 123
          },
          "region" : {
            "startLine" : 1740,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1738,
            "endLine" : 1742,
            "snippet" : {
              "text" : "            # eslint-disable-next-line quotes\n            payload = \"\\n\".join([method, self.hostname, url, auth])\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            auth += '&' + self.urlencode({'Signature': signature})\n            url += '?' + auth\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec2f9175b560aac:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1068,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1066,
            "endLine" : 1070,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        # {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf503d9c0e:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1201,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1199,
            "endLine" : 1203,
            "snippet" : {
              "text" : "        allBytes = self.array_concat(byteArray, after)\n        binary = self.binary_concat_array(allBytes)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1285,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1283,
            "endLine" : 1287,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:2",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "            request['parameters']['market'] = market['id']\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request['signature'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:3",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1367,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1365,
            "endLine" : 1369,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:4",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1619,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 1617,
            "endLine" : 1621,
            "snippet" : {
              "text" : "            else:\n                payload = body\n            headers['IDEX-HMAC-Signature'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87348da6f76ed099:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1632,
            "startColumn" : 76,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1630,
            "endLine" : 1634,
            "snippet" : {
              "text" : "        binaryMessage = self.base16_to_binary(self.remove0x_prefix(message))\n        prefix = self.encode('\\x19Ethereum Signed Message:\\n' + binaryMessage.byteLength)\n        return '0x' + self.hash(self.binary_concat(prefix, binaryMessage), 'keccak', 'hex')\n\n    def sign_hash(self, hash, privateKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "549a7182815ec57:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 124
          },
          "region" : {
            "startLine" : 1635,
            "startColumn" : 75,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1633,
            "endLine" : 1637,
            "snippet" : {
              "text" : "\n    def sign_hash(self, hash, privateKey):\n        signature = self.ecdsa(hash[-64:], privateKey[-64:], 'secp256k1', None)\n        return {\n            'r': '0x' + signature['r'],\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ef8b89eb3bbebf56:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1068,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1066,
            "endLine" : 1070,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        # {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf503d9c0e:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1201,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1199,
            "endLine" : 1203,
            "snippet" : {
              "text" : "        allBytes = self.array_concat(byteArray, after)\n        binary = self.binary_concat_array(allBytes)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1285,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1283,
            "endLine" : 1287,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:2",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "            request['parameters']['market'] = market['id']\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request['signature'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:3",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1367,
            "startColumn" : 34,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1365,
            "endLine" : 1369,
            "snippet" : {
              "text" : "        ]\n        binary = self.binary_concat_array(byteArray)\n        hash = self.hash(binary, 'keccak', 'hex')\n        signature = self.sign_message_string(hash, self.privateKey)\n        request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4a2ecf5902005b:4",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1619,
            "startColumn" : 104,
            "endColumn" : 118
          },
          "contextRegion" : {
            "startLine" : 1617,
            "endLine" : 1621,
            "snippet" : {
              "text" : "            else:\n                payload = body\n            headers['IDEX-HMAC-Signature'] = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'hex')\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87348da6f76ed099:1",
        "primaryLocationStartColumnFingerprint" : "91"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1632,
            "startColumn" : 76,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1630,
            "endLine" : 1634,
            "snippet" : {
              "text" : "        binaryMessage = self.base16_to_binary(self.remove0x_prefix(message))\n        prefix = self.encode('\\x19Ethereum Signed Message:\\n' + binaryMessage.byteLength)\n        return '0x' + self.hash(self.binary_concat(prefix, binaryMessage), 'keccak', 'hex')\n\n    def sign_hash(self, hash, privateKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "549a7182815ec57:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/idex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 125
          },
          "region" : {
            "startLine" : 1635,
            "startColumn" : 75,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1633,
            "endLine" : 1637,
            "snippet" : {
              "text" : "\n    def sign_hash(self, hash, privateKey):\n        signature = self.ecdsa(hash[-64:], privateKey[-64:], 'secp256k1', None)\n        return {\n            'r': '0x' + signature['r'],\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ef8b89eb3bbebf56:1",
        "primaryLocationStartColumnFingerprint" : "66"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/independentreserve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 126
          },
          "region" : {
            "startLine" : 690,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 688,
            "endLine" : 692,
            "snippet" : {
              "text" : "                auth.append(key + '=' + value)\n            message = ','.join(auth)\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            query = self.ordered({})\n            query['apiKey'] = self.apiKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ca2e9f6df6ef2ee:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/independentreserve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 127
          },
          "region" : {
            "startLine" : 690,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 688,
            "endLine" : 692,
            "snippet" : {
              "text" : "                auth.append(key + '=' + value)\n            message = ','.join(auth)\n            signature = self.hmac(self.encode(message), self.encode(self.secret), hashlib.sha256)\n            query = self.ordered({})\n            query['apiKey'] = self.apiKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ca2e9f6df6ef2ee:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/indodax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 128
          },
          "region" : {
            "startLine" : 984,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 982,
            "endLine" : 986,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/indodax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 129
          },
          "region" : {
            "startLine" : 984,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 982,
            "endLine" : 986,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 256,
            "startColumn" : 32,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 254,
            "endLine" : 258,
            "snippet" : {
              "text" : "                           sigencode=sigencode_string,\n                           extra_entropy=b''):\n        hashfunc = hashfunc or self.default_hashfunc\n        digest = hashfunc(data).digest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bab8ac49aabb49f0:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 253,
            "startColumn" : 49,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 251,
            "endLine" : 255,
            "snippet" : {
              "text" : "        return self.verifying_key\n\n    def sign_deterministic(self, data, hashfunc=None,\n                           sigencode=sigencode_string,\n                           extra_entropy=b''):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f0d8cef755cf215:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 263,
            "startColumn" : 58,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 261,
            "endLine" : 265,
            "snippet" : {
              "text" : "            extra_entropy=extra_entropy)\n\n    def sign_digest_deterministic(self, digest, hashfunc=None,\n                                  sigencode=sigencode_string,\n                                  extra_entropy=b''):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f87dfc9e517b9f8:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/keys.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 130
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 13,
            "snippet" : {
              "text" : "from .util import sigencode_string, sigdecode_string\nfrom .util import oid_ecPublicKey, encoded_oid_ecPublicKey\nfrom hashlib import sha1\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6887a2bb8f9bf73:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 131
          },
          "region" : {
            "startLine" : 2468,
            "startColumn" : 36,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2466,
            "endLine" : 2470,
            "snippet" : {
              "text" : "                body = self.urlencode_nested(self.extend({'nonce': nonce}, params))\n            auth = self.encode(nonce + body)\n            hash = self.hash(auth, 'sha256', 'binary')\n            binary = self.encode(url)\n            binhash = self.binary_concat(binary, hash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab94eca550c6eb0d:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 131
          },
          "region" : {
            "startLine" : 2472,
            "startColumn" : 52,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 2470,
            "endLine" : 2474,
            "snippet" : {
              "text" : "            binhash = self.binary_concat(binary, hash)\n            secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(binhash, secret, hashlib.sha512, 'base64')\n            headers = {\n                'API-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9924a4759fbffdef:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 132
          },
          "region" : {
            "startLine" : 2472,
            "startColumn" : 52,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 2470,
            "endLine" : 2474,
            "snippet" : {
              "text" : "            binhash = self.binary_concat(binary, hash)\n            secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(binhash, secret, hashlib.sha512, 'base64')\n            headers = {\n                'API-Key': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9924a4759fbffdef:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kraken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 132
          },
          "region" : {
            "startLine" : 2468,
            "startColumn" : 36,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2466,
            "endLine" : 2470,
            "snippet" : {
              "text" : "                body = self.urlencode_nested(self.extend({'nonce': nonce}, params))\n            auth = self.encode(nonce + body)\n            hash = self.hash(auth, 'sha256', 'binary')\n            binary = self.encode(url)\n            binhash = self.binary_concat(binary, hash)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab94eca550c6eb0d:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 133
          },
          "region" : {
            "startLine" : 2225,
            "startColumn" : 49,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 2223,
            "endLine" : 2227,
            "snippet" : {
              "text" : "            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a611a2ebd17f9110:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 133
          },
          "region" : {
            "startLine" : 2223,
            "startColumn" : 49,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 2221,
            "endLine" : 2225,
            "snippet" : {
              "text" : "                auth += api + '/'\n            auth += endpoint  # 1\n            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb8f48850a10eee9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 134
          },
          "region" : {
            "startLine" : 2223,
            "startColumn" : 49,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 2221,
            "endLine" : 2225,
            "snippet" : {
              "text" : "                auth += api + '/'\n            auth += endpoint  # 1\n            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb8f48850a10eee9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 134
          },
          "region" : {
            "startLine" : 2225,
            "startColumn" : 49,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 2223,
            "endLine" : 2227,
            "snippet" : {
              "text" : "            hash = self.hash(self.encode(auth), 'sha256', 'binary')  # 2\n            secret = self.base64_to_binary(self.secret)  # 3\n            signature = self.hmac(hash, secret, hashlib.sha512, 'base64')  # 4-5\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a611a2ebd17f9110:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 135
          },
          "region" : {
            "startLine" : 1406,
            "startColumn" : 65,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1404,
            "endLine" : 1408,
            "snippet" : {
              "text" : "        if event != 'error':\n            challenge = self.safe_value(message, 'message')\n            hashedChallenge = self.hash(self.encode(challenge), 'sha256', 'binary')\n            base64Secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(hashedChallenge, base64Secret, hashlib.sha512, 'base64')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9ee539935256ce34:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/krakenfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 135
          },
          "region" : {
            "startLine" : 1408,
            "startColumn" : 66,
            "endColumn" : 80
          },
          "contextRegion" : {
            "startLine" : 1406,
            "endLine" : 1410,
            "snippet" : {
              "text" : "            hashedChallenge = self.hash(self.encode(challenge), 'sha256', 'binary')\n            base64Secret = self.base64_to_binary(self.secret)\n            signature = self.hmac(hashedChallenge, base64Secret, hashlib.sha512, 'base64')\n            self.options['challenge'] = challenge\n            self.options['signedChallenge'] = signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "505d60185713a200:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 136
          },
          "region" : {
            "startLine" : 4086,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 4084,
            "endLine" : 4088,
            "snippet" : {
              "text" : "            apiKeyVersion = self.safe_string(headers, 'KC-API-KEY-VERSION')\n            if apiKeyVersion == '2':\n                passphrase = self.hmac(self.encode(self.password), self.encode(self.secret), hashlib.sha256, 'base64')\n                headers['KC-API-PASSPHRASE'] = passphrase\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a9279100eaf96244:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 136
          },
          "region" : {
            "startLine" : 4091,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 4089,
            "endLine" : 4093,
            "snippet" : {
              "text" : "                headers['KC-API-PASSPHRASE'] = self.password\n            payload = timestamp + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['KC-API-SIGN'] = signature\n            partner = self.safe_value(self.options, 'partner', {})\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254df34:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 136
          },
          "region" : {
            "startLine" : 4099,
            "startColumn" : 103,
            "endColumn" : 117
          },
          "contextRegion" : {
            "startLine" : 4097,
            "endLine" : 4101,
            "snippet" : {
              "text" : "            if (partnerId is not None) and (partnerSecret is not None):\n                partnerPayload = timestamp + partnerId + self.apiKey\n                partnerSignature = self.hmac(self.encode(partnerPayload), self.encode(partnerSecret), hashlib.sha256, 'base64')\n                headers['KC-API-PARTNER-SIGN'] = partnerSignature\n                headers['KC-API-PARTNER'] = partnerId\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9179fc22c6efd12:1",
        "primaryLocationStartColumnFingerprint" : "86"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 137
          },
          "region" : {
            "startLine" : 4087,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 4085,
            "endLine" : 4089,
            "snippet" : {
              "text" : "            apiKeyVersion = self.safe_string(headers, 'KC-API-KEY-VERSION')\n            if apiKeyVersion == '2':\n                passphrase = self.hmac(self.encode(self.password), self.encode(self.secret), hashlib.sha256, 'base64')\n                headers['KC-API-PASSPHRASE'] = passphrase\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a9279100eaf96244:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 137
          },
          "region" : {
            "startLine" : 4092,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 4090,
            "endLine" : 4094,
            "snippet" : {
              "text" : "                headers['KC-API-PASSPHRASE'] = self.password\n            payload = timestamp + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['KC-API-SIGN'] = signature\n            partner = self.safe_value(self.options, 'partner', {})\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254df34:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kucoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 137
          },
          "region" : {
            "startLine" : 4100,
            "startColumn" : 103,
            "endColumn" : 117
          },
          "contextRegion" : {
            "startLine" : 4098,
            "endLine" : 4102,
            "snippet" : {
              "text" : "            if (partnerId is not None) and (partnerSecret is not None):\n                partnerPayload = timestamp + partnerId + self.apiKey\n                partnerSignature = self.hmac(self.encode(partnerPayload), self.encode(partnerSecret), hashlib.sha256, 'base64')\n                headers['KC-API-PARTNER-SIGN'] = partnerSignature\n                headers['KC-API-PARTNER'] = partnerId\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9179fc22c6efd12:1",
        "primaryLocationStartColumnFingerprint" : "86"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 138
          },
          "region" : {
            "startLine" : 1801,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1799,
            "endLine" : 1803,
            "snippet" : {
              "text" : "                }, params))\n                auth = method + '|' + request + '|' + queryInner\n                signed = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                suffix = query + '&signature=' + signed\n                if method == 'GET':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4979321089a8ad79:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 138
          },
          "region" : {
            "startLine" : 1778,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 1776,
            "endLine" : 1780,
            "snippet" : {
              "text" : "                        'nonce': nonce,\n                        'public-key': self.apiKey,\n                        'signature': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384, 'hex'),\n                    }\n                    account = self.safe_string(self.options, 'account')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6da5c6409bfb5eb0:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 139
          },
          "region" : {
            "startLine" : 1801,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 1799,
            "endLine" : 1803,
            "snippet" : {
              "text" : "                }, params))\n                auth = method + '|' + request + '|' + queryInner\n                signed = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                suffix = query + '&signature=' + signed\n                if method == 'GET':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4979321089a8ad79:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/kuna.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 139
          },
          "region" : {
            "startLine" : 1778,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 1776,
            "endLine" : 1780,
            "snippet" : {
              "text" : "                        'nonce': nonce,\n                        'public-key': self.apiKey,\n                        'signature': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha384, 'hex'),\n                    }\n                    account = self.safe_string(self.options, 'account')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6da5c6409bfb5eb0:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/latoken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 140
          },
          "region" : {
            "startLine" : 1596,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1594,
            "endLine" : 1598,
            "snippet" : {
              "text" : "            self.check_required_credentials()\n            auth = method + request + urlencodedQuery\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'X-LA-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8c0d0fd90819de0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/latoken.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 141
          },
          "region" : {
            "startLine" : 1596,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1594,
            "endLine" : 1598,
            "snippet" : {
              "text" : "            self.check_required_credentials()\n            auth = method + request + urlencodedQuery\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'X-LA-APIKEY': self.apiKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8c0d0fd90819de0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 142
          },
          "region" : {
            "startLine" : 2478,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2476,
            "endLine" : 2480,
            "snippet" : {
              "text" : "            }, query)))\n            encoded = self.encode(auth)\n            hash = self.hash(encoded, 'md5')\n            uppercaseHash = hash.upper()\n            sign = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4f4ae2f4e70a5fd8:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 142
          },
          "region" : {
            "startLine" : 2493,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 2491,
            "endLine" : 2495,
            "snippet" : {
              "text" : "                sign = self.rsa(uppercaseHash, pem, 'sha256')\n            elif signatureMethod == 'HmacSHA256':\n                sign = self.hmac(self.encode(uppercaseHash), self.encode(self.secret), hashlib.sha256)\n            query['sign'] = sign\n            body = self.urlencode(self.keysort(query))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "90760e218cd1d5f5:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 143
          },
          "region" : {
            "startLine" : 2479,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 2477,
            "endLine" : 2481,
            "snippet" : {
              "text" : "            }, query)))\n            encoded = self.encode(auth)\n            hash = self.hash(encoded, 'md5')\n            uppercaseHash = hash.upper()\n            sign = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4f4ae2f4e70a5fd8:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/lbank.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 143
          },
          "region" : {
            "startLine" : 2494,
            "startColumn" : 88,
            "endColumn" : 102
          },
          "contextRegion" : {
            "startLine" : 2492,
            "endLine" : 2496,
            "snippet" : {
              "text" : "                sign = self.rsa(uppercaseHash, pem, 'sha256')\n            elif signatureMethod == 'HmacSHA256':\n                sign = self.hmac(self.encode(uppercaseHash), self.encode(self.secret), hashlib.sha256)\n            query['sign'] = sign\n            body = self.urlencode(self.keysort(query))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "90760e218cd1d5f5:1",
        "primaryLocationStartColumnFingerprint" : "71"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/mercado.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 144
          },
          "region" : {
            "startLine" : 819,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 817,
            "endLine" : 821,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'TAPI-ID': self.apiKey,\n                'TAPI-MAC': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79779be2abd49277:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/mercado.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 145
          },
          "region" : {
            "startLine" : 819,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 817,
            "endLine" : 821,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'TAPI-ID': self.apiKey,\n                'TAPI-MAC': self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79779be2abd49277:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 146
          },
          "region" : {
            "startLine" : 191,
            "startColumn" : 79,
            "endColumn" : 93
          },
          "contextRegion" : {
            "startLine" : 189,
            "endLine" : 193,
            "snippet" : {
              "text" : "        timestamp = str(self.milliseconds())\n        payload = self.apiKey + timestamp\n        signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n        request = {\n            'method': channel,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "62792d838692221:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 147
          },
          "region" : {
            "startLine" : 4966,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 4964,
            "endLine" : 4968,
            "snippet" : {
              "text" : "                        url += '?' + auth\n                auth = self.apiKey + timestamp + auth\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers['Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2caa81dfe9ca3d74:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 147
          },
          "region" : {
            "startLine" : 4933,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 4931,
            "endLine" : 4935,
            "snippet" : {
              "text" : "            if access == 'private':\n                self.check_required_credentials()\n                signature = self.hmac(self.encode(paramsEncoded), self.encode(self.secret), hashlib.sha256)\n                url += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ee9c1146b54a3658:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 148
          },
          "region" : {
            "startLine" : 4966,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 4964,
            "endLine" : 4968,
            "snippet" : {
              "text" : "                        url += '?' + auth\n                auth = self.apiKey + timestamp + auth\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers['Signature'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2caa81dfe9ca3d74:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/mexc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 148
          },
          "region" : {
            "startLine" : 4933,
            "startColumn" : 93,
            "endColumn" : 107
          },
          "contextRegion" : {
            "startLine" : 4931,
            "endLine" : 4935,
            "snippet" : {
              "text" : "            if access == 'private':\n                self.check_required_credentials()\n                signature = self.hmac(self.encode(paramsEncoded), self.encode(self.secret), hashlib.sha256)\n                url += '&' + 'signature=' + signature\n                headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ee9c1146b54a3658:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/ndax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 149
          },
          "region" : {
            "startLine" : 2291,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2289,
            "endLine" : 2293,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = nonce + self.uid + self.apiKey\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'Nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fe24c8ce113c95f:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/ndax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 150
          },
          "region" : {
            "startLine" : 2291,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 2289,
            "endLine" : 2293,
            "snippet" : {
              "text" : "                nonce = str(self.nonce())\n                auth = nonce + self.uid + self.apiKey\n                signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n                headers = {\n                    'Nonce': nonce,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fe24c8ce113c95f:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 151
          },
          "region" : {
            "startLine" : 1440,
            "startColumn" : 60,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 1438,
            "endLine" : 1442,
            "snippet" : {
              "text" : "            if method == 'POST':\n                body = self.json(query)\n                queryString = self.hash(self.encode(body), 'md5')\n                headers['Content-Type'] = 'application/json'\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa5f49e6d6a7dd32:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 151
          },
          "region" : {
            "startLine" : 1447,
            "startColumn" : 98,
            "endColumn" : 112
          },
          "contextRegion" : {
            "startLine" : 1445,
            "endLine" : 1449,
            "snippet" : {
              "text" : "                queryString = self.urlencode(self.keysort(query))\n            auth = method + \"\\n\" + request + \"\\n\" + queryString + \"\\n\" + timestamp  # eslint-disable-line quotes\n            headers['X-Nova-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fff4c205ee2df62:1",
        "primaryLocationStartColumnFingerprint" : "85"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 152
          },
          "region" : {
            "startLine" : 1440,
            "startColumn" : 60,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 1438,
            "endLine" : 1442,
            "snippet" : {
              "text" : "            if method == 'POST':\n                body = self.json(query)\n                queryString = self.hash(self.encode(body), 'md5')\n                headers['Content-Type'] = 'application/json'\n            else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aa5f49e6d6a7dd32:1",
        "primaryLocationStartColumnFingerprint" : "43"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/novadax.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 152
          },
          "region" : {
            "startLine" : 1447,
            "startColumn" : 98,
            "endColumn" : 112
          },
          "contextRegion" : {
            "startLine" : 1445,
            "endLine" : 1449,
            "snippet" : {
              "text" : "                queryString = self.urlencode(self.keysort(query))\n            auth = method + \"\\n\" + request + \"\\n\" + queryString + \"\\n\" + timestamp  # eslint-disable-line quotes\n            headers['X-Nova-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fff4c205ee2df62:1",
        "primaryLocationStartColumnFingerprint" : "85"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/okcoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 153
          },
          "region" : {
            "startLine" : 2809,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2807,
            "endLine" : 2811,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/okcoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 154
          },
          "region" : {
            "startLine" : 443,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 441,
            "endLine" : 445,
            "snippet" : {
              "text" : "            path = '/users/self/verify'\n            auth = timestamp + method + path\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            request = {\n                'op': messageHash,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2e8f1d9dedcb3ccb:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/okcoin.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 155
          },
          "region" : {
            "startLine" : 2809,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2807,
            "endLine" : 2811,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/okx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 156
          },
          "region" : {
            "startLine" : 5229,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 5227,
            "endLine" : 5231,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/okx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 157
          },
          "region" : {
            "startLine" : 5228,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 5226,
            "endLine" : 5230,
            "snippet" : {
              "text" : "                    auth += body\n                headers['Content-Type'] = 'application/json'\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers['OK-ACCESS-SIGN'] = signature\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc556796133:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/okx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 158
          },
          "region" : {
            "startLine" : 664,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 662,
            "endLine" : 666,
            "snippet" : {
              "text" : "            path = '/users/self/verify'\n            auth = timestamp + method + path\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            operation = 'login'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "27dd2f1829f324a7:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/p2b.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 159
          },
          "region" : {
            "startLine" : 1176,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 1174,
            "endLine" : 1178,
            "snippet" : {
              "text" : "                'X-TXC-APIKEY': self.apiKey,\n                'X-TXC-PAYLOAD': payload,\n                'X-TXC-SIGNATURE': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n            }\n            body = self.json(params)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2a42b55974608064:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/p2b.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 160
          },
          "region" : {
            "startLine" : 1176,
            "startColumn" : 94,
            "endColumn" : 108
          },
          "contextRegion" : {
            "startLine" : 1174,
            "endLine" : 1178,
            "snippet" : {
              "text" : "                'X-TXC-APIKEY': self.apiKey,\n                'X-TXC-PAYLOAD': payload,\n                'X-TXC-SIGNATURE': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n            }\n            body = self.json(params)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2a42b55974608064:1",
        "primaryLocationStartColumnFingerprint" : "77"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/paymium.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 161
          },
          "region" : {
            "startLine" : 552,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 550,
            "endLine" : 554,
            "snippet" : {
              "text" : "                    auth += queryString\n                    url += '?' + queryString\n            headers['Api-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7198da0e2a176a8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/paymium.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 162
          },
          "region" : {
            "startLine" : 552,
            "startColumn" : 95,
            "endColumn" : 109
          },
          "contextRegion" : {
            "startLine" : 550,
            "endLine" : 554,
            "snippet" : {
              "text" : "                    auth += queryString\n                    url += '?' + queryString\n            headers['Api-Signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7198da0e2a176a8:1",
        "primaryLocationStartColumnFingerprint" : "82"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/phemex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 163
          },
          "region" : {
            "startLine" : 1417,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1415,
            "endLine" : 1419,
            "snippet" : {
              "text" : "            expiration = self.seconds() + expiryDelta\n            payload = self.apiKey + str(expiration)\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256)\n            method = 'user.auth'\n            request = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "46fcd7335c1ce24e:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/phemex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 164
          },
          "region" : {
            "startLine" : 3840,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 3838,
            "endLine" : 3842,
            "snippet" : {
              "text" : "                headers['Content-Type'] = 'application/json'\n            auth = requestPath + queryString + expiryString + payload\n            headers['x-phemex-request-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        url = self.implode_hostname(self.urls['api'][api]) + url\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cda3e1a89ae6a37:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/phemex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 165
          },
          "region" : {
            "startLine" : 3840,
            "startColumn" : 108,
            "endColumn" : 122
          },
          "contextRegion" : {
            "startLine" : 3838,
            "endLine" : 3842,
            "snippet" : {
              "text" : "                headers['Content-Type'] = 'application/json'\n            auth = requestPath + queryString + expiryString + payload\n            headers['x-phemex-request-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        url = self.implode_hostname(self.urls['api'][api]) + url\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cda3e1a89ae6a37:1",
        "primaryLocationStartColumnFingerprint" : "95"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/poloniex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 166
          },
          "region" : {
            "startLine" : 2181,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2179,
            "endLine" : 2183,
            "snippet" : {
              "text" : "                if query:\n                    url += '?' + self.urlencode(query)\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc5535eeb5e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/poloniex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 167
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 89,
            "endColumn" : 103
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "            accessPath = '/ws'\n            requestString = 'GET\\n' + accessPath + '\\nsignTimestamp=' + timestamp\n            signature = self.hmac(self.encode(requestString), self.encode(self.secret), hashlib.sha256, 'base64')\n            request = {\n                'event': 'subscribe',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3befd54f4c86a610:1",
        "primaryLocationStartColumnFingerprint" : "76"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/poloniex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 168
          },
          "region" : {
            "startLine" : 2181,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 2179,
            "endLine" : 2183,
            "snippet" : {
              "text" : "                if query:\n                    url += '?' + self.urlencode(query)\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15d69cc5535eeb5e:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/poloniexfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 169
          },
          "region" : {
            "startLine" : 1662,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1660,
            "endLine" : 1664,
            "snippet" : {
              "text" : "                endpart = body\n            payload = now + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'PF-API-SIGN': signature,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254db32:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/poloniexfutures.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 170
          },
          "region" : {
            "startLine" : 1662,
            "startColumn" : 83,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1660,
            "endLine" : 1664,
            "snippet" : {
              "text" : "                endpart = body\n            payload = now + method + endpoint + endpart\n            signature = self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha256, 'base64')\n            headers = {\n                'PF-API-SIGN': signature,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ec30e070254db32:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 25,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "# ---------------------------------------------------------------------------------------------------------------------\n\nassert hash(encode(''), 'sha256', 'hex') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\nassert hash(encode('cheese'), 'sha256', 'hex') == '873ac9ffea4dd04fa719e8920cd6938f0c23cd678af330939cff53c3d2855f34'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "922fd6768e65f752:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 31,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "\nassert hash(encode(''), 'sha256', 'hex') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\nassert hash(encode('cheese'), 'sha256', 'hex') == '873ac9ffea4dd04fa719e8920cd6938f0c23cd678af330939cff53c3d2855f34'\n\nassert hash(encode(''), 'md5', 'hex') == 'd41d8cd98f00b204e9800998ecf8427e'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1775621be86c84b5:1",
        "primaryLocationStartColumnFingerprint" : "30"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 25,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 37,
            "endLine" : 41,
            "snippet" : {
              "text" : "assert hash(encode('cheese'), 'sha256', 'hex') == '873ac9ffea4dd04fa719e8920cd6938f0c23cd678af330939cff53c3d2855f34'\n\nassert hash(encode(''), 'md5', 'hex') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert hash(encode('sexyfish'), 'md5', 'hex') == 'c8a35464aa9d5683585786f44d5889f8'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "70f27105f150d096:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 33,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 38,
            "endLine" : 42,
            "snippet" : {
              "text" : "\nassert hash(encode(''), 'md5', 'hex') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert hash(encode('sexyfish'), 'md5', 'hex') == 'c8a35464aa9d5683585786f44d5889f8'\n\nassert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ea4c662706605938:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "assert hash(encode('sexyfish'), 'md5', 'hex') == 'c8a35464aa9d5683585786f44d5889f8'\n\nassert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\nassert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c35636da1f7095af:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "\nassert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\nassert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\nassert hmac(encode('a message'), encode('a secret'), 'md5', 'hex') == '0bfa503bdbc7358185fcd49b4869e23d'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8fcfd7ae4a324949:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "assert hash(encode(''), 'sha1', 'hex') == 'da39a3ee5e6b4b0d3255bfef95601890afd80709'\nassert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\nassert hmac(encode('a message'), encode('a secret'), 'md5', 'hex') == '0bfa503bdbc7358185fcd49b4869e23d'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "85b8baf729b7d905:1",
        "primaryLocationStartColumnFingerprint" : "46"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 54,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "assert hash(encode('nutella'), 'sha1', 'hex') == 'b3d60a34b744159793c483b067c56d8affc5111a'\nassert hmac(encode('hello'), encode('there'), hashlib.sha256, 'hex') == '551e1c1ecbce0fe9b643745a376584a6289f5f43a46861b315fac9edc8d52a26'\nassert hmac(encode('a message'), encode('a secret'), 'md5', 'hex') == '0bfa503bdbc7358185fcd49b4869e23d'\n\n# ---------------------------------------------------------------------------------------------------------------------\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f91ef21bec6f4bf4:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 52,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "\n\nassert(equals(ecdsa('1a', privateKey, 'secp256k1', 'sha256'), {\n    'r': '23dcb2a2a3728a35eb1a35cc01743c4609550d9cceaf2083550f13a9eb135f9f',\n    's': '317963fcac18e4ec9f7921b97d7ea0c82a873dd6299cbfb6af016e08ef5ed667',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c07b278d37558d87:1",
        "primaryLocationStartColumnFingerprint" : "51"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/test/base/test_crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 171
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 58,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 58,
            "endLine" : 62,
            "snippet" : {
              "text" : "\n\nassert(equals(ecdsa(privateKey, privateKey, 'secp256k1', None), {\n    'r': 'b84a36a6fbabd5277ede578448b93d48e70b38efb5b15b1d4e2a298accf938b1',\n    's': '66ebfb8221cda925526e699a59cd221bb4cc84bdc563024b1802c4d9e1d8bbe9',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "936c4534efc24166:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/tidex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 172
          },
          "region" : {
            "startLine" : 932,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 930,
            "endLine" : 934,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/tidex.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 173
          },
          "region" : {
            "startLine" : 932,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 930,
            "endLine" : 934,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/tokocrypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 174
          },
          "region" : {
            "startLine" : 2284,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 2282,
            "endLine" : 2286,
            "snippet" : {
              "text" : "            else:\n                query = self.urlencode(extendedParams)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/tokocrypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 175
          },
          "region" : {
            "startLine" : 2284,
            "startColumn" : 81,
            "endColumn" : 95
          },
          "contextRegion" : {
            "startLine" : 2282,
            "endLine" : 2286,
            "snippet" : {
              "text" : "            else:\n                query = self.urlencode(extendedParams)\n            signature = self.hmac(self.encode(query), self.encode(self.secret), hashlib.sha256)\n            query += '&' + 'signature=' + signature\n            headers = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc8229256ba4d400:1",
        "primaryLocationStartColumnFingerprint" : "68"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/upbit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 176
          },
          "region" : {
            "startLine" : 1695,
            "startColumn" : 53,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1693,
            "endLine" : 1697,
            "snippet" : {
              "text" : "            if query:\n                auth = self.urlencode(query)\n                hash = self.hash(self.encode(auth), 'sha512')\n                request['query_hash'] = hash\n                request['query_hash_alg'] = 'SHA512'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "648cd197016540d9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/upbit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 177
          },
          "region" : {
            "startLine" : 1695,
            "startColumn" : 53,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 1693,
            "endLine" : 1697,
            "snippet" : {
              "text" : "            if query:\n                auth = self.urlencode(query)\n                hash = self.hash(self.encode(auth), 'sha512')\n                request['query_hash'] = hash\n                request['query_hash_alg'] = 'SHA512'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "648cd197016540d9:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/static_dependencies/ecdsa/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 178
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import math\nimport binascii\nfrom hashlib import sha256\nfrom . import der\nfrom .curves import orderlen\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "47acddac99eafbe4:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/wazirx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 179
          },
          "region" : {
            "startLine" : 885,
            "startColumn" : 96,
            "endColumn" : 110
          },
          "contextRegion" : {
            "startLine" : 883,
            "endLine" : 887,
            "snippet" : {
              "text" : "            data = self.extend({'recvWindow': self.options['recvWindow'], 'timestamp': timestamp}, params)\n            data = self.keysort(data)\n            signature = self.hmac(self.encode(self.urlencode(data)), self.encode(self.secret), hashlib.sha256)\n            url += '?' + self.urlencode(data)\n            url += '&' + 'signature=' + signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25df571cb4e7e4c4:1",
        "primaryLocationStartColumnFingerprint" : "83"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/wazirx.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 180
          },
          "region" : {
            "startLine" : 885,
            "startColumn" : 96,
            "endColumn" : 110
          },
          "contextRegion" : {
            "startLine" : 883,
            "endLine" : 887,
            "snippet" : {
              "text" : "            data = self.extend({'recvWindow': self.options['recvWindow'], 'timestamp': timestamp}, params)\n            data = self.keysort(data)\n            signature = self.hmac(self.encode(self.urlencode(data)), self.encode(self.secret), hashlib.sha256)\n            url += '?' + self.urlencode(data)\n            url += '&' + 'signature=' + signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25df571cb4e7e4c4:1",
        "primaryLocationStartColumnFingerprint" : "83"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/whitebit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 181
          },
          "region" : {
            "startLine" : 2109,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 2107,
            "endLine" : 2111,
            "snippet" : {
              "text" : "            body = self.json(self.extend({'request': request, 'nonce': nonce}, params))\n            payload = self.string_to_base64(body)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7251e66de47ac6ac:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/whitebit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 182
          },
          "region" : {
            "startLine" : 2109,
            "startColumn" : 65,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 2107,
            "endLine" : 2111,
            "snippet" : {
              "text" : "            body = self.json(self.extend({'request': request, 'nonce': nonce}, params))\n            payload = self.string_to_base64(body)\n            signature = self.hmac(self.encode(payload), secret, hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/json',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7251e66de47ac6ac:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/woo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 183
          },
          "region" : {
            "startLine" : 2062,
            "startColumn" : 97,
            "endColumn" : 111
          },
          "contextRegion" : {
            "startLine" : 2060,
            "endLine" : 2064,
            "snippet" : {
              "text" : "                auth += '|' + ts\n                headers['content-type'] = 'application/x-www-form-urlencoded'\n            headers['x-api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15b01e1b8fac1e9:1",
        "primaryLocationStartColumnFingerprint" : "84"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/pro/woo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 184
          },
          "region" : {
            "startLine" : 415,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 413,
            "endLine" : 417,
            "snippet" : {
              "text" : "            ts = str(self.nonce())\n            auth = '|' + ts\n            signature = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n            request = {\n                'event': event,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1cec76cec1826c0:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/woo.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 185
          },
          "region" : {
            "startLine" : 2062,
            "startColumn" : 97,
            "endColumn" : 111
          },
          "contextRegion" : {
            "startLine" : 2060,
            "endLine" : 2064,
            "snippet" : {
              "text" : "                auth += '|' + ts\n                headers['content-type'] = 'application/x-www-form-urlencoded'\n            headers['x-api-signature'] = self.hmac(self.encode(auth), self.encode(self.secret), hashlib.sha256)\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15b01e1b8fac1e9:1",
        "primaryLocationStartColumnFingerprint" : "84"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/yobit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 186
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1174,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/yobit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 187
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1174,
            "snippet" : {
              "text" : "                'method': path,\n            }, query))\n            signature = self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512)\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c45b974e73ee14:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/zaif.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 188
          },
          "region" : {
            "startLine" : 679,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 677,
            "endLine" : 681,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/zaif.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 189
          },
          "region" : {
            "startLine" : 679,
            "startColumn" : 80,
            "endColumn" : 94
          },
          "contextRegion" : {
            "startLine" : 677,
            "endLine" : 681,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': self.apiKey,\n                'Sign': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe0dcaae178e9355:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 190
          },
          "region" : {
            "startLine" : 1749,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1747,
            "endLine" : 1751,
            "snippet" : {
              "text" : "                'Operation-Id': self.uuid(),\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79fa5301dd36fa97:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/async_support/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 190
          },
          "region" : {
            "startLine" : 1761,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 1759,
            "endLine" : 1763,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "778fe10efc513796:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 191
          },
          "region" : {
            "startLine" : 1749,
            "startColumn" : 87,
            "endColumn" : 101
          },
          "contextRegion" : {
            "startLine" : 1747,
            "endLine" : 1751,
            "snippet" : {
              "text" : "                'Operation-Id': self.uuid(),\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(payload), self.encode(self.secret), hashlib.sha512),\n                'Content-Type': 'application/json',\n            }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79fa5301dd36fa97:1",
        "primaryLocationStartColumnFingerprint" : "70"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/zonda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 191
          },
          "region" : {
            "startLine" : 1761,
            "startColumn" : 84,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 1759,
            "endLine" : 1763,
            "snippet" : {
              "text" : "                'Content-Type': 'application/x-www-form-urlencoded',\n                'API-Key': self.apiKey,\n                'API-Hash': self.hmac(self.encode(body), self.encode(self.secret), hashlib.sha512),\n            }\n        return {'url': url, 'method': method, 'body': body, 'headers': headers}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "778fe10efc513796:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1326,
            "startColumn" : 82,
            "endColumn" : 100
          },
          "contextRegion" : {
            "startLine" : 1324,
            "endLine" : 1328,
            "snippet" : {
              "text" : "        algorithm = algorithms[alg]\n        priv_key = load_pem_private_key(Exchange.encode(secret), None, backends.default_backend())\n        return Exchange.binary_to_base64(priv_key.sign(Exchange.encode(request), padding.PKCS1v15(), algorithm))\n\n    @staticmethod\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "893bcd6de3fa3e91:1",
        "primaryLocationStartColumnFingerprint" : "73"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ccxt/base/exchange.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 103
          },
          "region" : {
            "startLine" : 1372,
            "startColumn" : 42,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1370,
            "endLine" : 1374,
            "snippet" : {
              "text" : "    def eddsa(request, secret, curve='ed25519'):\n        private_key = load_pem_private_key(Exchange.encode(secret), None)\n        return Exchange.binary_to_base64(private_key.sign(request))\n\n    @staticmethod\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2264977996c7388d:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:ccxt/ccxt/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}