{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "salt/renderers/aws_kms.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "salt/client/ssh/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "salt/spm/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "salt/cloud/clouds/aliyun.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "salt/utils/aws.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "salt/utils/boto3mod.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "salt/states/boto_apigateway.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "salt/states/boto_asg.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "salt/states/boto_elb.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "salt/states/boto_lambda.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "salt/utils/botomod.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "salt/utils/cloud.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/functional/states/file/conftest.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "salt/grains/core.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "salt/crypt.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "salt/utils/data.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "salt/utils/dns.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "scripts/suse/dpkg/dpkgnotify",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "salt/cloud/clouds/ec2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "salt/modules/file.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    }, {
      "location" : {
        "uri" : "tools/utils/gh.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      }
    }, {
      "location" : {
        "uri" : "salt/modules/hashutil.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      }
    }, {
      "location" : {
        "uri" : "salt/utils/hashutils.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      }
    }, {
      "location" : {
        "uri" : "salt/wheel/key.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      }
    }, {
      "location" : {
        "uri" : "salt/modules/mac_assistive.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 25
      }
    }, {
      "location" : {
        "uri" : "tests/minionswarm.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 26
      }
    }, {
      "location" : {
        "uri" : "salt/modules/mod_random.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 27
      }
    }, {
      "location" : {
        "uri" : "salt/modules/mysql.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 28
      }
    }, {
      "location" : {
        "uri" : "salt/modules/network.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 29
      }
    }, {
      "location" : {
        "uri" : "salt/modules/pdbedit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 30
      }
    }, {
      "location" : {
        "uri" : "salt/modules/postgres.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 31
      }
    }, {
      "location" : {
        "uri" : "salt/cloud/clouds/qingcloud.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 32
      }
    }, {
      "location" : {
        "uri" : "salt/channel/server.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 33
      }
    }, {
      "location" : {
        "uri" : "tests/support/sminion.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 34
      }
    }, {
      "location" : {
        "uri" : "pkg/tests/support/sminion.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 35
      }
    }, {
      "location" : {
        "uri" : "salt/modules/splunk.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 36
      }
    }, {
      "location" : {
        "uri" : "salt/runners/survey.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 37
      }
    }, {
      "location" : {
        "uri" : "salt/pillar/svn_pillar.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 38
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/functional/states/test_archive.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 39
      }
    }, {
      "location" : {
        "uri" : "tests/integration/modules/test_cp.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 40
      }
    }, {
      "location" : {
        "uri" : "tests/integration/cloud/clouds/test_digitalocean.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 41
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/functional/states/test_file.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 42
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/unit/transport/test_ipc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 43
      }
    }, {
      "location" : {
        "uri" : "tests/unit/modules/test_k8s.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 44
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/functional/states/file/test_managed.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 45
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/unit/modules/test_pdbedit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 46
      }
    }, {
      "location" : {
        "uri" : "tests/unit/modules/test_pdbedit.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 47
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/unit/transport/test_publish_client.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 48
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/integration/modules/state/test_state.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 49
      }
    }, {
      "location" : {
        "uri" : "tests/integration/states/test_x509.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 50
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/functional/modules/test_x509_v2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 51
      }
    }, {
      "location" : {
        "uri" : "tests/pytests/functional/states/test_x509_v2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 52
      }
    }, {
      "location" : {
        "uri" : "salt/utils/virt.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 53
      }
    }, {
      "location" : {
        "uri" : "tools/vm.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 54
      }
    }, {
      "location" : {
        "uri" : "tests/support/win_installer.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 55
      }
    }, {
      "location" : {
        "uri" : "salt/modules/win_network.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 56
      }
    }, {
      "location" : {
        "uri" : "salt/modules/x509.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 57
      }
    }, {
      "location" : {
        "uri" : "salt/utils/x509.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 58
      }
    }, {
      "location" : {
        "uri" : "salt/states/x509_v2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 59
      }
    }, {
      "location" : {
        "uri" : "salt/modules/x509_v2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 60
      }
    }, {
      "location" : {
        "uri" : "scripts/suse/yum/plugins/yumnotify.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 61
      }
    }, {
      "location" : {
        "uri" : "salt/transport/zeromq.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 62
      }
    }, {
      "location" : {
        "uri" : "salt/modules/znc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 63
      }
    }, {
      "location" : {
        "uri" : "scripts/suse/zypper/plugins/commit/zyppnotify",
        "uriBaseId" : "%SRCROOT%",
        "index" : 64
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/renderers/aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 218,
            "startColumn" : 18,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 216,
            "endLine" : 220,
            "snippet" : {
              "text" : "    # Decryption\n    data_key = _base64_plaintext_data_key()\n    plain_text = fernet.Fernet(data_key).decrypt(cipher)\n    if hasattr(plain_text, \"decode\"):\n        plain_text = plain_text.decode(__salt_system_encoding__)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "322c83853cde5e88:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 199,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 197,
            "endLine" : 201,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms._decrypt_ciphertext(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 210,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 208,
            "endLine" : 212,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    secret_map = {\"secret\": plaintext_secret}\n    crypted_map = {\"secret\": crypted}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8ddc2b7e37ddb3f:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms.render(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:2",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/client/ssh/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 1743,
            "startColumn" : 15,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1741,
            "endLine" : 1745,
            "snippet" : {
              "text" : "        ver_base = salt.utils.stringutils.to_bytes(ver_base)\n\n        ver = hashlib.sha1(ver_base).hexdigest()\n        ext_tar_path = os.path.join(fsclient.opts[\"cachedir\"], f\"ext_mods.{ver}.tgz\")\n        mods = {\"version\": ver, \"file\": ext_tar_path}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d65dee191da85b4:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/spm/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 548,
            "startColumn" : 33,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 546,
            "endLine" : 550,
            "snippet" : {
              "text" : "                        log.trace,\n                    )\n                    file_hash = hashlib.sha1()\n                    digest = self._pkgfiles_fun(\n                        \"hash_file\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7e5336e450dd6350:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/spm/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 892,
            "startColumn" : 29,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 890,
            "endLine" : 894,
            "snippet" : {
              "text" : "                    dirs.append(filerow[0])\n                    continue\n                file_hash = hashlib.sha1()\n                digest = self._pkgfiles_fun(\n                    \"hash_file\", filerow[0], file_hash, self.files_conn\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb56481ac989b89e:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/aliyun.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 762,
            "startColumn" : 67,
            "endColumn" : 71
          },
          "contextRegion" : {
            "startLine" : 760,
            "endLine" : 764,
            "snippet" : {
              "text" : "    stringToSign = \"GET&%2F&\" + percent_encode(canonicalizedQueryString[1:])\n\n    h = hmac.new(to_bytes(access_key_secret + \"&\"), stringToSign, sha1)\n    signature = base64.encodestring(h.digest()).strip()\n    return signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0cabd15048db2ac:1",
        "primaryLocationStartColumnFingerprint" : "62"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/aliyun.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "import urllib.parse\nimport uuid\nfrom hashlib import sha1\n\nimport salt.config as config\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d91ff6c9853235f2:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 213,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 211,
            "endLine" : 215,
            "snippet" : {
              "text" : "    )\n\n    hashed = hmac.new(secret_access_key, canonical, hashlib.sha256)\n    sig = binascii.b2a_base64(hashed.digest())\n    params_with_headers[\"Signature\"] = sig.strip()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11d790096c014605:1",
        "primaryLocationStartColumnFingerprint" : "48"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 373,
            "startColumn" : 54,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 371,
            "endLine" : 375,
            "snippet" : {
              "text" : "    # Sign the string_to_sign using the signing_key\n    signature = hmac.new(\n        signing_key, string_to_sign.encode(\"utf-8\"), hashlib.sha256\n    ).hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "65a48545b4848197:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 397,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 395,
            "endLine" : 399,
            "snippet" : {
              "text" : "    http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python\n    \"\"\"\n    return hmac.new(key, msg.encode(\"utf-8\"), hashlib.sha256).digest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4284580a843d64:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC\nUse of algorithm PKCS7\nUse of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/renderers/aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 218,
            "startColumn" : 18,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 216,
            "endLine" : 220,
            "snippet" : {
              "text" : "    # Decryption\n    data_key = _base64_plaintext_data_key()\n    plain_text = fernet.Fernet(data_key).decrypt(cipher)\n    if hasattr(plain_text, \"decode\"):\n        plain_text = plain_text.decode(__salt_system_encoding__)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "322c83853cde5e88:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/boto3mod.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 111,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 109,
            "endLine" : 113,
            "snippet" : {
              "text" : "        hash_string = region + keyid + key\n        hash_string = salt.utils.stringutils.to_bytes(hash_string)\n        cxkey = label + hashlib.md5(hash_string).hexdigest()\n    else:\n        cxkey = label + region\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb8661dabe1b919:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_apigateway.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 475,
            "startColumn" : 13,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 473,
            "endLine" : 477,
            "snippet" : {
              "text" : "    and participates in the hash calculation\n    \"\"\"\n    _hash = hashlib.md5()\n    with salt.utils.files.fopen(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1fd7e100ca7779ac:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_asg.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 472,
            "startColumn" : 40,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 470,
            "endLine" : 474,
            "snippet" : {
              "text" : "        launch_config_bytes = salt.utils.stringutils.to_bytes(str(launch_config))\n        launch_config_name = (\n            launch_config_name + \"-\" + hashlib.md5(launch_config_bytes).hexdigest()\n        )\n        args = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5a0b5e2f16fb1d76:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_elb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 1411,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 1409,
            "endLine" : 1413,
            "snippet" : {
              "text" : "    policy = policy_dict[\"policy\"]\n    canonical_policy_repr = str(sorted(list(policy.items()), key=lambda x: str(x[0])))\n    policy_hash = hashlib.md5(\n        salt.utils.stringutils.to_bytes(str(canonical_policy_repr))\n    ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a0185221ce4a4911:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_lambda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 510,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 508,
            "endLine" : 512,
            "snippet" : {
              "text" : "        size = os.path.getsize(ZipFile)\n        if size == func[\"CodeSize\"]:\n            sha = hashlib.sha256()\n            with salt.utils.files.fopen(ZipFile, \"rb\") as f:\n                sha.update(f.read())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d465d6e9321c49c:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/botomod.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "        hash_string = region + keyid + key\n        hash_string = salt.utils.stringutils.to_bytes(hash_string)\n        cxkey = label + hashlib.md5(hash_string).hexdigest()\n    else:\n        cxkey = label + region\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb8661dabe1b919:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/cloud.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 2988,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 2986,
            "endLine" : 2990,
            "snippet" : {
              "text" : "    else:\n        script_content = url\n        script_name = f\"{hashlib.sha1(script_content).hexdigest()}.sh\"\n\n    if not script_content:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f9809e74b4a0b63:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/file/conftest.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "@pytest.fixture\ndef grail_scene33_file_hash(grail_scene33_file):\n    return hashlib.sha256(grail_scene33_file.read_bytes()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9aa8b20777d90e1:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/grains/core.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 3377,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 3375,
            "endLine" : 3379,
            "snippet" : {
              "text" : "        return {}\n    id_ = __opts__.get(\"id\", \"\")\n    hash_ = int(hashlib.sha256(id_.encode()).hexdigest(), 16)\n    return {\"server_id\": abs(hash_ % (2**31))}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d450e83c9540c5b0:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1162,
            "startColumn" : 26,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1160,
            "endLine" : 1164,
            "snippet" : {
              "text" : "                except Exception:  # pylint: disable=broad-except\n                    return \"\", \"\"\n                digest = hashlib.sha256(key_str).hexdigest()\n                digest = salt.utils.stringutils.to_bytes(digest)\n                if HAS_M2:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9ff477b8787c145c:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1661,
            "startColumn" : 40,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 1659,
            "endLine" : 1663,
            "snippet" : {
              "text" : "            encr = cypher.encrypt(data)\n        data = iv_bytes + encr\n        sig = hmac.new(hmac_key, data, hashlib.sha256).digest()\n        return data + sig\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b45c5a3dd5f4b2e7:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1673,
            "startColumn" : 46,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 1671,
            "endLine" : 1675,
            "snippet" : {
              "text" : "        if not isinstance(data, bytes):\n            data = salt.utils.stringutils.to_bytes(data)\n        mac_bytes = hmac.new(hmac_key, data, hashlib.sha256).digest()\n        if len(mac_bytes) != len(sig):\n            log.debug(\"Failed to authenticate message\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bf6047d1d8114e00:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1606,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 1604,
            "endLine" : 1608,
            "snippet" : {
              "text" : "    PICKLE_PAD = b\"pickle::\"\n    AES_BLOCK_SIZE = 16\n    SIG_SIZE = hashlib.sha256().digest_size\n\n    def __init__(self, opts, key_string, key_size=192, serial=0):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99c8d64e3895b013:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/data.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 1621,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1619,
            "endLine" : 1623,
            "snippet" : {
              "text" : "\n\ndef hash(value, algorithm=\"sha512\"):\n    \"\"\"\n    .. versionadded:: 2014.7.0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2bf2ba3929f7b25d:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/dns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 114,
            "startColumn" : 20,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 112,
            "endLine" : 116,
            "snippet" : {
              "text" : "            return lookup\n        elif match == \"in\":\n            return [code for code, name in ref.items() if lookup in name][-1]\n        else:\n            # OrderedDicts only!(?)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e00fad5fdf1457e2:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/dns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 117,
            "startColumn" : 20,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 115,
            "endLine" : 119,
            "snippet" : {
              "text" : "        else:\n            # OrderedDicts only!(?)\n            return {name: code for code, name in ref.items()}[lookup]\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6e8c662d90dabac8:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/dns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1036,
            "startColumn" : 30,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1034,
            "endLine" : 1038,
            "snippet" : {
              "text" : "        cert_fp = binascii.b2a_hex(pub)\n    else:\n        hasher = hashlib.new(RFC.TLSA_MATCHING[matching])\n        hasher.update(pub)\n        cert_fp = hasher.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abdb211a4ae4cd03:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/suse/dpkg/dpkgnotify",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "        hexdigest\n    \"\"\"\n    digest = hashlib.sha256()\n    with open(DPKG_PATH, \"rb\") as pkg_db_fh:\n        while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68ba7341475be9ea:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/ec2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 272,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 270,
            "endLine" : 274,
            "snippet" : {
              "text" : "\ndef sign(key, msg):\n    return hmac.new(key, msg.encode(\"utf-8\"), hashlib.sha256).digest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1b102404540270d:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/ec2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 383,
            "startColumn" : 60,
            "endColumn" : 74
          },
          "contextRegion" : {
            "startLine" : 381,
            "endLine" : 385,
            "snippet" : {
              "text" : "\n        signature = hmac.new(\n            signing_key, (string_to_sign).encode(\"utf-8\"), hashlib.sha256\n        ).hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ab530ad745f1680:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/file.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 2256,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 2254,
            "endLine" : 2258,
            "snippet" : {
              "text" : "    with salt.utils.files.fopen(path, mode=\"r\") as fp_:\n        body = salt.utils.data.decode_list(fp_.readlines())\n    body_before = hashlib.sha256(\n        salt.utils.stringutils.to_bytes(\"\".join(body))\n    ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5152296595e8c3c:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/file.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 2290,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 2288,
            "endLine" : 2292,
            "snippet" : {
              "text" : "    changed = (\n        body_before\n        != hashlib.sha256(salt.utils.stringutils.to_bytes(\"\".join(body))).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "29ea09e001fd677b:1",
        "primaryLocationStartColumnFingerprint" : "3"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/utils/gh.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 21,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "        return ExitCode.FAIL\n    found_artifact_path = artifacts_path / found_artifact_name\n    checksum_algo = \"sha512\"\n    ctx.info(f\"Validating {found_artifact_name!r} {checksum_algo} checksum ...\")\n    artifact_expected_checksum = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11e6a8e97c44df33:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/hashutil.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 296,
            "startColumn" : 36,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 294,
            "endLine" : 297,
            "snippet" : {
              "text" : "    if isinstance(key, str):\n        key = salt.utils.stringutils.to_bytes(key)\n    hmac_hash = hmac.new(key, msg, getattr(hashlib, hashtype))\n    return hmac_hash.hexdigest() == challenge\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9c23fed72b7e8344:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "    \"\"\"\n    return salt.utils.stringutils.to_unicode(\n        hashlib.md5(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5b1b46ed3d6a651f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 86,
            "endLine" : 90,
            "snippet" : {
              "text" : "    Generate an sha1 hash of a given string.\n    \"\"\"\n    return hashlib.sha1(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "91579fb7c955653a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "    \"\"\"\n    return salt.utils.stringutils.to_unicode(\n        hashlib.sha256(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "10912efab6f5143f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 107,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 105,
            "endLine" : 109,
            "snippet" : {
              "text" : "    \"\"\"\n    return salt.utils.stringutils.to_unicode(\n        hashlib.sha512(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec7d02802a02c93d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 120,
            "startColumn" : 36,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 118,
            "endLine" : 122,
            "snippet" : {
              "text" : "    key = salt.utils.stringutils.to_bytes(shared_secret)\n    challenge = salt.utils.stringutils.to_bytes(challenge_hmac)\n    hmac_hash = hmac.new(key, msg, hashlib.sha256)\n    valid_hmac = base64.b64encode(hmac_hash.digest())\n    return valid_hmac == challenge\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d151ab03f87eed22:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 132,
            "startColumn" : 36,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 130,
            "endLine" : 134,
            "snippet" : {
              "text" : "    msg = salt.utils.stringutils.to_bytes(string)\n    key = salt.utils.stringutils.to_bytes(shared_secret)\n    hmac_hash = hmac.new(key, msg, hashlib.sha256).hexdigest()\n    return hmac_hash\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c59ac38fff3f6f72:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/wheel/key.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 375,
            "startColumn" : 15,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 373,
            "endLine" : 377,
            "snippet" : {
              "text" : "    \"\"\"\n    if id_ is None:\n        id_ = hashlib.sha512(os.urandom(32)).hexdigest()\n    else:\n        id_ = clean.filename(id_)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fa0836f50cd87:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mac_assistive.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "            )\n            for row in cursor.fetchall():\n                digest = hashlib.sha1(row[\"sql\"].encode()).hexdigest()[:10]\n                if digest in (\"ecc443615f\", \"80a4bb6912\"):\n                    # Mojave and Catalina\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84bd61911a377cdb:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/minionswarm.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 353,
            "startColumn" : 44,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 351,
            "endLine" : 355,
            "snippet" : {
              "text" : "            data[\"grains\"][\"saltversion\"] = random.choice(VERS)\n        if self.opts[\"rand_machine_id\"]:\n            data[\"grains\"][\"machine_id\"] = hashlib.md5(minion_id).hexdigest()\n        if self.opts[\"rand_uuid\"]:\n            data[\"grains\"][\"uuid\"] = str(uuid.uuid4())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2de8d3b952df859a:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mod_random.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "\n\ndef hash(value, algorithm=\"sha512\"):\n    \"\"\"\n    .. versionadded:: 2014.7.0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2bf2ba3929f7b25d:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mysql.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 267,
            "startColumn" : 17,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 265,
            "endLine" : 269,
            "snippet" : {
              "text" : "\ndef __mysql_hash_password(password):\n    _password = hashlib.sha1(password.encode()).digest()\n    _password = f\"*{hashlib.sha1(_password).hexdigest().upper()}\"\n    return _password\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "779011572b50a76c:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mysql.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 268,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 266,
            "endLine" : 270,
            "snippet" : {
              "text" : "def __mysql_hash_password(password):\n    _password = hashlib.sha1(password.encode()).digest()\n    _password = f\"*{hashlib.sha1(_password).hexdigest().upper()}\"\n    return _password\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a358b472094e0e0:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/network.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 1644,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1642,
            "endLine" : 1646,
            "snippet" : {
              "text" : "            # Generate a random string of a\n            # decent size to test UDP connection\n            md5h = hashlib.md5()\n            md5h.update(datetime.datetime.now().strftime(\"%s\"))\n            msg = md5h.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3f8e66828a8a97a1:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 51,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 49,
            "endLine" : 53,
            "snippet" : {
              "text" : "\n    try:\n        hashlib.new(\"md4\", \"\".encode(\"utf-16le\"))\n    except ValueError:\n        return (False, \"Hash type md4 unsupported\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1221c8090d35cdbd:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "    \"\"\"\n    return binascii.hexlify(\n        hashlib.new(\"md4\", password.encode(\"utf-16le\")).digest()\n    ).upper()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "303f0eaf121865fc:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1222,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 1220,
            "endLine" : 1224,
            "snippet" : {
              "text" : "def _md5_password(role, password):\n    return \"md5{}\".format(\n        hashlib.md5(  # nosec\n            salt.utils.stringutils.to_bytes(f\"{password}{role}\")\n        ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ce19fae2fb97ecfb:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1237,
            "startColumn" : 43,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 1235,
            "endLine" : 1239,
            "snippet" : {
              "text" : "        salt_bytes = token_bytes(16)\n    password = salt.utils.stringutils.to_bytes(saslprep(password))\n    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abfbd114873dd4f4:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1237,
            "startColumn" : 23,
            "endColumn" : 86
          },
          "contextRegion" : {
            "startLine" : 1235,
            "endLine" : 1239,
            "snippet" : {
              "text" : "        salt_bytes = token_bytes(16)\n    password = salt.utils.stringutils.to_bytes(saslprep(password))\n    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abfbd114873dd4f4:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1238,
            "startColumn" : 59,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1236,
            "endLine" : 1240,
            "snippet" : {
              "text" : "    password = salt.utils.stringutils.to_bytes(saslprep(password))\n    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n    server_key = hmac.new(salted_password, b\"Server Key\", \"sha256\").digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1e4cdf78e179819c:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1239,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 1237,
            "endLine" : 1241,
            "snippet" : {
              "text" : "    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n    server_key = hmac.new(salted_password, b\"Server Key\", \"sha256\").digest()\n    return \"SCRAM-SHA-256${}:{}${}:{}\".format(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cf01c8c6348023d3:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1240,
            "startColumn" : 59,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1238,
            "endLine" : 1242,
            "snippet" : {
              "text" : "    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n    server_key = hmac.new(salted_password, b\"Server Key\", \"sha256\").digest()\n    return \"SCRAM-SHA-256${}:{}${}:{}\".format(\n        iterations,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d8723be946dcb1bc:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/qingcloud.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 123,
            "startColumn" : 47,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 121,
            "endLine" : 125,
            "snippet" : {
              "text" : "    string_to_sign += qs\n\n    h = hmac.new(access_key_secret, digestmod=sha256)\n    h.update(string_to_sign)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "64b140dac738a785:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/qingcloud.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "import time\nimport urllib.parse\nfrom hashlib import sha256\n\nimport salt.config as config\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "22cc76e756bea144:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/channel/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 702,
            "startColumn" : 50,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 700,
            "endLine" : 704,
            "snippet" : {
              "text" : "\n        # Be aggressive about the signature\n        digest = salt.utils.stringutils.to_bytes(hashlib.sha256(aes).hexdigest())\n        ret[\"sig\"] = salt.crypt.private_encrypt(self.master_key.key, digest)\n        eload = {\"result\": True, \"act\": \"accept\", \"id\": load[\"id\"], \"pub\": load[\"pub\"]}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f765c7e8e2706ab:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/channel/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 954,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 952,
            "endLine" : 956,
            "snippet" : {
              "text" : "                aes = salt.master.SMaster.secrets[\"aes\"][\"secret\"].value\n                digest = salt.utils.stringutils.to_bytes(\n                    hashlib.sha256(aes).hexdigest()\n                )\n                data[\"peers\"][peer] = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c5b7ef8da805664b:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/channel/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 1056,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1054,
            "endLine" : 1058,
            "snippet" : {
              "text" : "                key_str = self.master_key.master_private_decrypt(aes)\n                digest = salt.utils.stringutils.to_bytes(\n                    hashlib.sha256(key_str).hexdigest()\n                )\n                pub_path = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2cdbc655c07fcf39:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/support/sminion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 34
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "    log.info(\"Generating testing minion %r configuration...\", minion_id)\n    if root_dir is None:\n        hashed_minion_id = hashlib.sha1()\n        hashed_minion_id.update(salt.utils.stringutils.to_bytes(minion_id))\n        root_dir = os.path.join(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ba0b29b5181d4795:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pkg/tests/support/sminion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 35
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "    log.info(\"Generating testing minion %r configuration...\", minion_id)\n    if root_dir is None:\n        hashed_minion_id = hashlib.sha1()\n        hashed_minion_id.update(salt.utils.stringutils.to_bytes(minion_id))\n        root_dir = os.path.join(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ba0b29b5181d4795:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/splunk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 36
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 9,
            "endLine" : 78,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 80,
            "snippet" : {
              "text" : "\ndef _generate_password(email):\n    m = hmac.new(\n        base64.b64decode(_get_secret_key(\"splunk\")),\n        str([email, SERVICE_NAME]),\n    )\n    return base64.urlsafe_b64encode(m.digest()).strip().replace(\"=\", \"\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "506443f77cb01d65:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/runners/survey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 37
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "    # hash minion return values as a string\n    for minion in sorted(minions):\n        digest = hashlib.sha256(\n            str(minions[minion]).encode(__salt_system_encoding__)\n        ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "374bd5ff292f4cf:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/pillar/svn_pillar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 38
          },
          "region" : {
            "startLine" : 95,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 93,
            "endLine" : 97,
            "snippet" : {
              "text" : "        Try to initialize the SVN repo object\n        \"\"\"\n        repo_hash = hashlib.md5(repo_location).hexdigest()\n        repo_dir = os.path.join(opts[\"cachedir\"], \"pillar_svnfs\", repo_hash)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e412c6a2fdf06731:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_archive.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 39
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "                return_data = reqfp.read()\n                # We're using this checksum as the etag to show file changes\n                checksum = hashlib.md5(return_data).hexdigest()\n                if none_match == checksum:\n                    # Status code 304 Not Modified is returned if the file is unchanged\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11d1ab7a5f529219:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC\nUse of algorithm PKCS7\nUse of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 199,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 197,
            "endLine" : 201,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms._decrypt_ciphertext(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC\nUse of algorithm PKCS7\nUse of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 210,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 208,
            "endLine" : 212,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    secret_map = {\"secret\": plaintext_secret}\n    crypted_map = {\"secret\": crypted}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8ddc2b7e37ddb3f:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC\nUse of algorithm PKCS7\nUse of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms.render(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:2",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/modules/test_cp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 92,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 90,
            "endLine" : 94,
            "snippet" : {
              "text" : "        src = os.path.join(RUNTIME_VARS.FILES, \"file\", \"base\", \"file.big\")\n        with salt.utils.files.fopen(src, \"rb\") as fp_:\n            hash_str = hashlib.md5(fp_.read()).hexdigest()\n\n        self.run_function(\"cp.get_file\", [\"salt://file.big\", tgt], gzip=5)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "331d95e2374fb0f1:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/modules/test_cp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 36,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "        with salt.utils.files.fopen(tgt, \"rb\") as scene:\n            data = scene.read()\n        self.assertEqual(hash_str, hashlib.md5(data).hexdigest())\n        data = salt.utils.stringutils.to_unicode(data)\n        self.assertIn(\"KNIGHT:  They're nervous, sire.\", data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "380ab67688974b34:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/modules/test_cp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 566,
            "startColumn" : 51,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 564,
            "endLine" : 568,
            "snippet" : {
              "text" : "        with salt.utils.files.fopen(path, \"rb\") as fn_:\n            data = fn_.read()\n            self.assertEqual(sha256_hash[\"hsum\"], hashlib.sha256(data).hexdigest())\n\n    @with_tempfile()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c2d9365c8b2b41c4:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/cloud/clouds/test_digitalocean.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 71,
            "snippet" : {
              "text" : "            pub = ssh_key.publickey().exportKey(\"OpenSSH\")\n        pub = salt.utils.stringutils.to_str(pub)\n        key_hex = hashlib.md5(\n            base64.b64decode(pub.strip().split()[1].encode())\n        ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4a87e0820e0a2d01:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_file.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 42
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "                return_text = reqfp.read().encode(\"utf-8\")\n                # We're using this checksum as the etag to show file changes\n                checksum = hashlib.md5(return_text).hexdigest()\n                if none_match == checksum:\n                    # Status code 304 Not Modified is returned if the file is unchanged\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d5c2a37fe15d844:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/transport/test_ipc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 43
          },
          "region" : {
            "startLine" : 73,
            "startColumn" : 15,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 71,
            "endLine" : 75,
            "snippet" : {
              "text" : "def test_minion_ipc_server_unix(minion_config, sock_dir):\n    minion_config[\"id\"] = \"foo\"\n    id_hash = hashlib.sha256(\n        salt.utils.stringutils.to_bytes(minion_config[\"id\"])\n    ).hexdigest()[:10]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "554f95d47a352f42:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "\n    def test_create_namespace(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        nsname = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e33ebbeda2926e41:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 58,
            "endLine" : 62,
            "snippet" : {
              "text" : "\n    def setUp(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        self.name = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f907082fc539a4e:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 213,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 211,
            "endLine" : 215,
            "snippet" : {
              "text" : "\n    def setUp(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        self.name = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e47be48f6fdc76f:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 415,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 413,
            "endLine" : 417,
            "snippet" : {
              "text" : "\n    def setUp(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        self.name = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e47b2982021a5ea:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/file/test_managed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 45
          },
          "region" : {
            "startLine" : 401,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 399,
            "endLine" : 403,
            "snippet" : {
              "text" : "        \"hello_world.txt\", hello_world_contents, state_tree\n    ) as local_path:\n        actual_hash = hashlib.sha256(local_path.read_bytes()).hexdigest()\n\n        # `name` needs to exist for this test, like a previous file.managed run\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c9566e5bb18cde4:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/modules/test_pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 46
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 17,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\ntry:\n    hashlib.new(\"md4\", \"\".encode(\"utf-16le\"))\n    MD4_SUPPORTED = True\nexcept ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c2cd98de91a441b9:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 47
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "def _md4_supported():\n    try:\n        hashlib.new(\"md4\", \"\".encode(\"utf-16le\"))\n        return True\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbfee9b31acb38aa:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/transport/test_publish_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 48
          },
          "region" : {
            "startLine" : 120,
            "startColumn" : 9,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 118,
            "endLine" : 122,
            "snippet" : {
              "text" : "    \"\"\"\n    minion_hexid = salt.utils.stringutils.to_bytes(\n        hashlib.sha1(salt.utils.stringutils.to_bytes(temp_salt_minion.id)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b8c8220769c93560:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/integration/modules/state/test_state.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 49
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "    ) as myzip:\n        myzip.writestr(\"issue-56131.txt\", \"issue-56131\")\n    zipfile_hash = hashlib.sha256(zipfile_path.read_bytes()).hexdigest()\n    sls_contents = \"\"\"\n    {}:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "257935692e8457fb:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/states/test_x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 50
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "    @staticmethod\n    def file_checksum(path):\n        hash = hashlib.sha1()\n        with salt.utils.files.fopen(path, \"rb\") as f:\n            for block in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "889da000b0f48686:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/modules/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 51
          },
          "region" : {
            "startLine" : 1730,
            "startColumn" : 54,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1728,
            "endLine" : 1732,
            "snippet" : {
              "text" : "    assert res.startswith(\"-----BEGIN CERTIFICATE-----\")\n    cert = _get_cert(res)\n    assert isinstance(cert.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "76d2fb8103ef4d12:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/modules/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 51
          },
          "region" : {
            "startLine" : 1770,
            "startColumn" : 53,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1768,
            "endLine" : 1772,
            "snippet" : {
              "text" : "    assert res.startswith(\"-----BEGIN CERTIFICATE REQUEST-----\")\n    csr = cx509.load_pem_x509_csr(res.encode())\n    assert isinstance(csr.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c2f2405cc4282c2e:1",
        "primaryLocationStartColumnFingerprint" : "48"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 2491,
            "startColumn" : 54,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2489,
            "endLine" : 2493,
            "snippet" : {
              "text" : "    assert ret.result is True\n    cert = _get_cert(cert_args[\"name\"])\n    assert isinstance(cert.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fae6e2bbe8cb35c:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 2538,
            "startColumn" : 53,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 2536,
            "endLine" : 2540,
            "snippet" : {
              "text" : "    assert ret.result is True\n    csr = _get_csr(csr_args[\"name\"])\n    assert isinstance(csr.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6155a0923582b821:1",
        "primaryLocationStartColumnFingerprint" : "48"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 2760,
            "startColumn" : 31,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 2758,
            "endLine" : 2762,
            "snippet" : {
              "text" : "    pk = _get_privkey(ret.name, encoding=encoding, passphrase=passphrase)\n    if algo == \"rsa\":\n        assert isinstance(pk, rsa.RSAPrivateKey)\n    if algo == \"ec\":\n        assert isinstance(pk, ec.EllipticCurvePrivateKey)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8064703b823d65d7:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 79,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "    import cryptography.x509 as cx509\n    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives.asymmetric import ec, ed448, ed25519, rsa\n    from cryptography.hazmat.primitives.serialization import (\n        load_der_private_key,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "29a884d5135a886d:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/virt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 53
          },
          "region" : {
            "startLine" : 29,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 27,
            "endLine" : 31,
            "snippet" : {
              "text" : "\n    try:\n        rand = hashlib.md5(os.urandom(32)).hexdigest()\n        remote_filename = urllib.parse.urlparse(url).path.split(\"/\")[-1]\n        full_directory = os.path.join(dir, \"{}-{}\".format(rand, remote_filename))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "94f6d0baadaddee3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/vm.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 54
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "with tools.utils.REPO_ROOT.joinpath(\"cicd\", \"golden-images.json\").open() as rfh:\n    AMIS = json.load(rfh)\nREPO_CHECKOUT_ID = hashlib.sha256(\n    \"|\".join(list(platform.uname()) + [str(tools.utils.REPO_ROOT)]).encode()\n).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "277c82228de0a651:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/support/win_installer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 55
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 38,
            "endLine" : 42,
            "snippet" : {
              "text" : "    if resp.status_code != 200:\n        raise Exception(\"Unable to fetch installer\")\n    md5hsh = hashlib.md5()\n    for chunk in resp.iter_content(chunk_size=1024):\n        md5hsh.update(chunk)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ca69ad375f633336:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/win_network.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 56
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "            # Generate a random string of a\n            # decent size to test UDP connection\n            md5h = hashlib.md5()\n            md5h.update(datetime.datetime.now().strftime(\"%s\"))\n            msg = md5h.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3f8e66828a8a97a1:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 418,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 416,
            "endLine" : 420,
            "snippet" : {
              "text" : "    Used for generating subject key identifiers\n    \"\"\"\n    sha_hash = hashlib.sha1(cert.get_pubkey().get_modulus()).hexdigest()\n    return _pretty_hex(sha_hash)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79b975211c4a7068:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 669,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 667,
            "endLine" : 671,
            "snippet" : {
              "text" : "        \"Subject\": _parse_subject(csr.get_subject()),\n        \"Subject Hash\": _dec2hex(csr.get_subject().as_hash()),\n        \"Public Key Hash\": hashlib.sha1(csr.get_pubkey().get_modulus()).hexdigest(),\n    }\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84a54c26e286df8f:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 12,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "            \"RSA key size must be either 2048, 3072 or 4096 bits.\"\n        )\n    return rsa.generate_private_key(public_exponent=65537, key_size=keysize)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "21a5d4952a3be55c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 12,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "            \"RSA key size must be either 2048, 3072 or 4096 bits.\"\n        )\n    return rsa.generate_private_key(public_exponent=65537, key_size=keysize)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "21a5d4952a3be55c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 491,
            "startColumn" : 36,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 489,
            "endLine" : 493,
            "snippet" : {
              "text" : "    if keysize not in [256, 384, 521]:\n        raise SaltInvocationError(\"EC key size must be either 256, 384, 521 bits.\")\n    return ec.generate_private_key(getattr(ec, f\"SECP{keysize}R1\")())\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5806d4303cd11cd7:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 25,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "    \"\"\"\n    key_type = None\n    if isinstance(key, (rsa.RSAPrivateKey, rsa.RSAPublicKey)):\n        key_type = \"rsa\"\n    if isinstance(key, (ec.EllipticCurvePrivateKey, ec.EllipticCurvePublicKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f25fe6ee9b2f73:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 44,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "    \"\"\"\n    key_type = None\n    if isinstance(key, (rsa.RSAPrivateKey, rsa.RSAPublicKey)):\n        key_type = \"rsa\"\n    if isinstance(key, (ec.EllipticCurvePrivateKey, ec.EllipticCurvePublicKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f25fe6ee9b2f73:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 676,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 674,
            "endLine" : 678,
            "snippet" : {
              "text" : "            pk,\n            (\n                rsa.RSAPrivateKey,\n                ec.EllipticCurvePrivateKey,\n                ed25519.Ed25519PrivateKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "22e3d623d6cfd49a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 770,
            "startColumn" : 17,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 768,
            "endLine" : 772,
            "snippet" : {
              "text" : "            pk,\n            (\n                rsa.RSAPublicKey,\n                ec.EllipticCurvePublicKey,\n                ed25519.Ed25519PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d80c702c186b9d81:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PSS"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 976,
            "startColumn" : 21,
            "endLine" : 978,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 974,
            "endLine" : 980,
            "snippet" : {
              "text" : "                    cert.signature,\n                    cert.tbs_certificate_bytes,\n                    padding.PSS(\n                        padding.MGF1(cert.signature_hash_algorithm), padding.PSS.AUTO\n                    ),\n                    cert.signature_hash_algorithm,\n                )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d0d6ae55a076118:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 985,
            "startColumn" : 21,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 983,
            "endLine" : 987,
            "snippet" : {
              "text" : "                    cert.signature,\n                    cert.tbs_certificate_bytes,\n                    padding.PKCS1v15(),\n                    cert.signature_hash_algorithm,\n                )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "feb045f4b6a45f0f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 996,
            "startColumn" : 17,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 994,
            "endLine" : 998,
            "snippet" : {
              "text" : "                cert.signature,\n                cert.tbs_certificate_bytes,\n                ec.ECDSA(cert.signature_hash_algorithm),\n            )\n            return True\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d4fe313cebb48fe9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 1003,
            "startColumn" : 13,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 1001,
            "endLine" : 1005,
            "snippet" : {
              "text" : "    if key_type in [KEY_TYPE.ED25519, KEY_TYPE.ED448]:\n        try:\n            pubkey.verify(cert.signature, cert.tbs_certificate_bytes)\n            return True\n        except InvalidSignature:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d49fd669671c5e68:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 84,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from cryptography.exceptions import InvalidSignature\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, ed448, ed25519, padding, rsa\nfrom cryptography.hazmat.primitives.serialization import pkcs7, pkcs12\nfrom cryptography.x509.oid import SubjectInformationAccessOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cdb934d290eb0a0:1",
        "primaryLocationStartColumnFingerprint" : "83"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 59
          },
          "region" : {
            "startLine" : 1759,
            "startColumn" : 33,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 1757,
            "endLine" : 1761,
            "snippet" : {
              "text" : "        return False\n    for i, new_cert in enumerate(new):\n        if new_cert.fingerprint(hashes.SHA256()) != current[i].fingerprint(\n            hashes.SHA256()\n        ):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "511326b202e5584f:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 59
          },
          "region" : {
            "startLine" : 1760,
            "startColumn" : 13,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 1758,
            "endLine" : 1762,
            "snippet" : {
              "text" : "    for i, new_cert in enumerate(new):\n        if new_cert.fingerprint(hashes.SHA256()) != current[i].fingerprint(\n            hashes.SHA256()\n        ):\n            return False\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3667ef2f922ec49d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 730,
            "startColumn" : 32,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 728,
            "endLine" : 732,
            "snippet" : {
              "text" : "                        serialization.pkcs12.PBES.PBESv1SHA1And3KeyTripleDESCBC\n                    )\n                    .hmac_hash(hashes.SHA1())\n                    .build(pkcs12_passphrase)\n                )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "28757a46661a8db3:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1332,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1330,
            "endLine" : 1334,
            "snippet" : {
              "text" : "                    serialization.pkcs12.PBES.PBESv1SHA1And3KeyTripleDESCBC\n                )\n                .hmac_hash(hashes.SHA1())\n                .build(passphrase)\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab5f3dd1f96e05db:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1665,
            "startColumn" : 68,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1663,
            "endLine" : 1667,
            "snippet" : {
              "text" : "        \"serial_number\": x509util.dec2hex(cert.serial_number),\n        \"fingerprints\": {\n            \"sha1\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA1())),\n            \"sha256\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA256())),\n        },\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "136cd0ad254ba3d2:1",
        "primaryLocationStartColumnFingerprint" : "55"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1666,
            "startColumn" : 70,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 1664,
            "endLine" : 1668,
            "snippet" : {
              "text" : "        \"fingerprints\": {\n            \"sha1\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA1())),\n            \"sha256\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA256())),\n        },\n        \"subject\": _parse_dn(cert.subject),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e90e97b260bfa235:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1696,
            "startColumn" : 40,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 1694,
            "endLine" : 1698,
            "snippet" : {
              "text" : "    if __opts__[\"fips_mode\"] is False:\n        ret[\"fingerprints\"][\"md5\"] = x509util.pretty_hex(\n            cert.fingerprint(algorithm=hashes.MD5())\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4372ffb81430e12a:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/suse/yum/plugins/yumnotify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 61
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "        hexdigest\n    \"\"\"\n    digest = hashlib.sha256()\n    with open(RPM_PATH, \"rb\") as rpm_db_fh:\n        while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cd9d0da01a7505de:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/transport/zeromq.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 141,
            "startColumn" : 22,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 139,
            "endLine" : 143,
            "snippet" : {
              "text" : "        **extras,\n    ):\n        self.hexid = hashlib.sha1(salt.utils.stringutils.to_bytes(_id)).hexdigest()\n        self._closing = False\n        self.context = zmq.asyncio.Context()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5d77aacf10ebf554:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/transport/zeromq.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 941,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 939,
            "endLine" : 943,
            "snippet" : {
              "text" : "                    # to avoid collisions\n                    htopic = salt.utils.stringutils.to_bytes(\n                        hashlib.sha1(salt.utils.stringutils.to_bytes(topic)).hexdigest()\n                    )\n                    await self.dpub_sock.send(htopic, flags=zmq.SNDMORE)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8b39d69b2638639:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/znc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 63
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "    # Setup the hasher\n    if hasher == \"sha256\":\n        h = hashlib.sha256(password)\n    elif hasher == \"md5\":\n        h = hashlib.md5(password)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f0552cbc59f8474:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/znc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 63
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 13,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        h = hashlib.sha256(password)\n    elif hasher == \"md5\":\n        h = hashlib.md5(password)\n    else:\n        return NotImplemented\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15c6385351c4ac5f:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/suse/zypper/plugins/commit/zyppnotify",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "            hexdigest\n        \"\"\"\n        digest = hashlib.sha256()\n        with open(self.rpm_path, \"rb\") as rpm_db_fh:\n            while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f47c6b81d3f0856:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
      "ruleIndex" : 2,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
        "index" : 2
      },
      "message" : {
        "text" : "Use of algorithm PKCS7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/renderers/aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 218,
            "startColumn" : 18,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 216,
            "endLine" : 220,
            "snippet" : {
              "text" : "    # Decryption\n    data_key = _base64_plaintext_data_key()\n    plain_text = fernet.Fernet(data_key).decrypt(cipher)\n    if hasattr(plain_text, \"decode\"):\n        plain_text = plain_text.decode(__salt_system_encoding__)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "322c83853cde5e88:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
      "ruleIndex" : 2,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
        "index" : 2
      },
      "message" : {
        "text" : "Use of algorithm PKCS7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 199,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 197,
            "endLine" : 201,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms._decrypt_ciphertext(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
      "ruleIndex" : 2,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
        "index" : 2
      },
      "message" : {
        "text" : "Use of algorithm PKCS7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 210,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 208,
            "endLine" : 212,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    secret_map = {\"secret\": plaintext_secret}\n    crypted_map = {\"secret\": crypted}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8ddc2b7e37ddb3f:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
      "ruleIndex" : 2,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
        "index" : 2
      },
      "message" : {
        "text" : "Use of algorithm PKCS7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms.render(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:2",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 2760,
            "startColumn" : 31,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 2758,
            "endLine" : 2762,
            "snippet" : {
              "text" : "    pk = _get_privkey(ret.name, encoding=encoding, passphrase=passphrase)\n    if algo == \"rsa\":\n        assert isinstance(pk, rsa.RSAPrivateKey)\n    if algo == \"ec\":\n        assert isinstance(pk, ec.EllipticCurvePrivateKey)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8064703b823d65d7:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 79,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "    import cryptography.x509 as cx509\n    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives.asymmetric import ec, ed448, ed25519, rsa\n    from cryptography.hazmat.primitives.serialization import (\n        load_der_private_key,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "29a884d5135a886d:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 12,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "            \"RSA key size must be either 2048, 3072 or 4096 bits.\"\n        )\n    return rsa.generate_private_key(public_exponent=65537, key_size=keysize)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "21a5d4952a3be55c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 12,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "            \"RSA key size must be either 2048, 3072 or 4096 bits.\"\n        )\n    return rsa.generate_private_key(public_exponent=65537, key_size=keysize)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "21a5d4952a3be55c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 491,
            "startColumn" : 36,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 489,
            "endLine" : 493,
            "snippet" : {
              "text" : "    if keysize not in [256, 384, 521]:\n        raise SaltInvocationError(\"EC key size must be either 256, 384, 521 bits.\")\n    return ec.generate_private_key(getattr(ec, f\"SECP{keysize}R1\")())\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5806d4303cd11cd7:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 25,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "    \"\"\"\n    key_type = None\n    if isinstance(key, (rsa.RSAPrivateKey, rsa.RSAPublicKey)):\n        key_type = \"rsa\"\n    if isinstance(key, (ec.EllipticCurvePrivateKey, ec.EllipticCurvePublicKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f25fe6ee9b2f73:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 44,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "    \"\"\"\n    key_type = None\n    if isinstance(key, (rsa.RSAPrivateKey, rsa.RSAPublicKey)):\n        key_type = \"rsa\"\n    if isinstance(key, (ec.EllipticCurvePrivateKey, ec.EllipticCurvePublicKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f25fe6ee9b2f73:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 676,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 674,
            "endLine" : 678,
            "snippet" : {
              "text" : "            pk,\n            (\n                rsa.RSAPrivateKey,\n                ec.EllipticCurvePrivateKey,\n                ed25519.Ed25519PrivateKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "22e3d623d6cfd49a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 770,
            "startColumn" : 17,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 768,
            "endLine" : 772,
            "snippet" : {
              "text" : "            pk,\n            (\n                rsa.RSAPublicKey,\n                ec.EllipticCurvePublicKey,\n                ed25519.Ed25519PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d80c702c186b9d81:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 84,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from cryptography.exceptions import InvalidSignature\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, ed448, ed25519, padding, rsa\nfrom cryptography.hazmat.primitives.serialization import pkcs7, pkcs12\nfrom cryptography.x509.oid import SubjectInformationAccessOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cdb934d290eb0a0:1",
        "primaryLocationStartColumnFingerprint" : "83"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/client/ssh/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 1743,
            "startColumn" : 15,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1741,
            "endLine" : 1745,
            "snippet" : {
              "text" : "        ver_base = salt.utils.stringutils.to_bytes(ver_base)\n\n        ver = hashlib.sha1(ver_base).hexdigest()\n        ext_tar_path = os.path.join(fsclient.opts[\"cachedir\"], f\"ext_mods.{ver}.tgz\")\n        mods = {\"version\": ver, \"file\": ext_tar_path}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d65dee191da85b4:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/spm/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 548,
            "startColumn" : 33,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 546,
            "endLine" : 550,
            "snippet" : {
              "text" : "                        log.trace,\n                    )\n                    file_hash = hashlib.sha1()\n                    digest = self._pkgfiles_fun(\n                        \"hash_file\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7e5336e450dd6350:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/spm/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 892,
            "startColumn" : 29,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 890,
            "endLine" : 894,
            "snippet" : {
              "text" : "                    dirs.append(filerow[0])\n                    continue\n                file_hash = hashlib.sha1()\n                digest = self._pkgfiles_fun(\n                    \"hash_file\", filerow[0], file_hash, self.files_conn\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb56481ac989b89e:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/aliyun.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 762,
            "startColumn" : 67,
            "endColumn" : 71
          },
          "contextRegion" : {
            "startLine" : 760,
            "endLine" : 764,
            "snippet" : {
              "text" : "    stringToSign = \"GET&%2F&\" + percent_encode(canonicalizedQueryString[1:])\n\n    h = hmac.new(to_bytes(access_key_secret + \"&\"), stringToSign, sha1)\n    signature = base64.encodestring(h.digest()).strip()\n    return signature\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0cabd15048db2ac:1",
        "primaryLocationStartColumnFingerprint" : "62"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/aliyun.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "import urllib.parse\nimport uuid\nfrom hashlib import sha1\n\nimport salt.config as config\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d91ff6c9853235f2:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 213,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 211,
            "endLine" : 215,
            "snippet" : {
              "text" : "    )\n\n    hashed = hmac.new(secret_access_key, canonical, hashlib.sha256)\n    sig = binascii.b2a_base64(hashed.digest())\n    params_with_headers[\"Signature\"] = sig.strip()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11d790096c014605:1",
        "primaryLocationStartColumnFingerprint" : "48"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 373,
            "startColumn" : 54,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 371,
            "endLine" : 375,
            "snippet" : {
              "text" : "    # Sign the string_to_sign using the signing_key\n    signature = hmac.new(\n        signing_key, string_to_sign.encode(\"utf-8\"), hashlib.sha256\n    ).hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "65a48545b4848197:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/aws.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 397,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 395,
            "endLine" : 399,
            "snippet" : {
              "text" : "    http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python\n    \"\"\"\n    return hmac.new(key, msg.encode(\"utf-8\"), hashlib.sha256).digest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4284580a843d64:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/boto3mod.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 111,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 109,
            "endLine" : 113,
            "snippet" : {
              "text" : "        hash_string = region + keyid + key\n        hash_string = salt.utils.stringutils.to_bytes(hash_string)\n        cxkey = label + hashlib.md5(hash_string).hexdigest()\n    else:\n        cxkey = label + region\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb8661dabe1b919:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_apigateway.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 475,
            "startColumn" : 13,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 473,
            "endLine" : 477,
            "snippet" : {
              "text" : "    and participates in the hash calculation\n    \"\"\"\n    _hash = hashlib.md5()\n    with salt.utils.files.fopen(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1fd7e100ca7779ac:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_asg.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 472,
            "startColumn" : 40,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 470,
            "endLine" : 474,
            "snippet" : {
              "text" : "        launch_config_bytes = salt.utils.stringutils.to_bytes(str(launch_config))\n        launch_config_name = (\n            launch_config_name + \"-\" + hashlib.md5(launch_config_bytes).hexdigest()\n        )\n        args = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5a0b5e2f16fb1d76:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_elb.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 1411,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 1409,
            "endLine" : 1413,
            "snippet" : {
              "text" : "    policy = policy_dict[\"policy\"]\n    canonical_policy_repr = str(sorted(list(policy.items()), key=lambda x: str(x[0])))\n    policy_hash = hashlib.md5(\n        salt.utils.stringutils.to_bytes(str(canonical_policy_repr))\n    ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a0185221ce4a4911:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/boto_lambda.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 510,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 508,
            "endLine" : 512,
            "snippet" : {
              "text" : "        size = os.path.getsize(ZipFile)\n        if size == func[\"CodeSize\"]:\n            sha = hashlib.sha256()\n            with salt.utils.files.fopen(ZipFile, \"rb\") as f:\n                sha.update(f.read())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d465d6e9321c49c:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/botomod.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "        hash_string = region + keyid + key\n        hash_string = salt.utils.stringutils.to_bytes(hash_string)\n        cxkey = label + hashlib.md5(hash_string).hexdigest()\n    else:\n        cxkey = label + region\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb8661dabe1b919:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/cloud.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 2988,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 2986,
            "endLine" : 2990,
            "snippet" : {
              "text" : "    else:\n        script_content = url\n        script_name = f\"{hashlib.sha1(script_content).hexdigest()}.sh\"\n\n    if not script_content:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f9809e74b4a0b63:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/file/conftest.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "@pytest.fixture\ndef grail_scene33_file_hash(grail_scene33_file):\n    return hashlib.sha256(grail_scene33_file.read_bytes()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9aa8b20777d90e1:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/grains/core.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 3377,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 3375,
            "endLine" : 3379,
            "snippet" : {
              "text" : "        return {}\n    id_ = __opts__.get(\"id\", \"\")\n    hash_ = int(hashlib.sha256(id_.encode()).hexdigest(), 16)\n    return {\"server_id\": abs(hash_ % (2**31))}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d450e83c9540c5b0:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1162,
            "startColumn" : 26,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1160,
            "endLine" : 1164,
            "snippet" : {
              "text" : "                except Exception:  # pylint: disable=broad-except\n                    return \"\", \"\"\n                digest = hashlib.sha256(key_str).hexdigest()\n                digest = salt.utils.stringutils.to_bytes(digest)\n                if HAS_M2:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9ff477b8787c145c:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1661,
            "startColumn" : 40,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 1659,
            "endLine" : 1663,
            "snippet" : {
              "text" : "            encr = cypher.encrypt(data)\n        data = iv_bytes + encr\n        sig = hmac.new(hmac_key, data, hashlib.sha256).digest()\n        return data + sig\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b45c5a3dd5f4b2e7:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1673,
            "startColumn" : 46,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 1671,
            "endLine" : 1675,
            "snippet" : {
              "text" : "        if not isinstance(data, bytes):\n            data = salt.utils.stringutils.to_bytes(data)\n        mac_bytes = hmac.new(hmac_key, data, hashlib.sha256).digest()\n        if len(mac_bytes) != len(sig):\n            log.debug(\"Failed to authenticate message\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bf6047d1d8114e00:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/crypt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 1606,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 1604,
            "endLine" : 1608,
            "snippet" : {
              "text" : "    PICKLE_PAD = b\"pickle::\"\n    AES_BLOCK_SIZE = 16\n    SIG_SIZE = hashlib.sha256().digest_size\n\n    def __init__(self, opts, key_string, key_size=192, serial=0):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99c8d64e3895b013:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/data.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 1621,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1619,
            "endLine" : 1623,
            "snippet" : {
              "text" : "\n\ndef hash(value, algorithm=\"sha512\"):\n    \"\"\"\n    .. versionadded:: 2014.7.0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2bf2ba3929f7b25d:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/dns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 114,
            "startColumn" : 20,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 112,
            "endLine" : 116,
            "snippet" : {
              "text" : "            return lookup\n        elif match == \"in\":\n            return [code for code, name in ref.items() if lookup in name][-1]\n        else:\n            # OrderedDicts only!(?)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e00fad5fdf1457e2:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/dns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 117,
            "startColumn" : 20,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 115,
            "endLine" : 119,
            "snippet" : {
              "text" : "        else:\n            # OrderedDicts only!(?)\n            return {name: code for code, name in ref.items()}[lookup]\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6e8c662d90dabac8:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/dns.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1036,
            "startColumn" : 30,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 1034,
            "endLine" : 1038,
            "snippet" : {
              "text" : "        cert_fp = binascii.b2a_hex(pub)\n    else:\n        hasher = hashlib.new(RFC.TLSA_MATCHING[matching])\n        hasher.update(pub)\n        cert_fp = hasher.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abdb211a4ae4cd03:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/suse/dpkg/dpkgnotify",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "        hexdigest\n    \"\"\"\n    digest = hashlib.sha256()\n    with open(DPKG_PATH, \"rb\") as pkg_db_fh:\n        while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68ba7341475be9ea:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/ec2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 272,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 270,
            "endLine" : 274,
            "snippet" : {
              "text" : "\ndef sign(key, msg):\n    return hmac.new(key, msg.encode(\"utf-8\"), hashlib.sha256).digest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1b102404540270d:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/ec2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 383,
            "startColumn" : 60,
            "endColumn" : 74
          },
          "contextRegion" : {
            "startLine" : 381,
            "endLine" : 385,
            "snippet" : {
              "text" : "\n        signature = hmac.new(\n            signing_key, (string_to_sign).encode(\"utf-8\"), hashlib.sha256\n        ).hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ab530ad745f1680:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/file.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 2256,
            "startColumn" : 19,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 2254,
            "endLine" : 2258,
            "snippet" : {
              "text" : "    with salt.utils.files.fopen(path, mode=\"r\") as fp_:\n        body = salt.utils.data.decode_list(fp_.readlines())\n    body_before = hashlib.sha256(\n        salt.utils.stringutils.to_bytes(\"\".join(body))\n    ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5152296595e8c3c:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/file.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 2290,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 2288,
            "endLine" : 2292,
            "snippet" : {
              "text" : "    changed = (\n        body_before\n        != hashlib.sha256(salt.utils.stringutils.to_bytes(\"\".join(body))).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "29ea09e001fd677b:1",
        "primaryLocationStartColumnFingerprint" : "3"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/utils/gh.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 21,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "        return ExitCode.FAIL\n    found_artifact_path = artifacts_path / found_artifact_name\n    checksum_algo = \"sha512\"\n    ctx.info(f\"Validating {found_artifact_name!r} {checksum_algo} checksum ...\")\n    artifact_expected_checksum = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11e6a8e97c44df33:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/hashutil.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 296,
            "startColumn" : 36,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 294,
            "endLine" : 297,
            "snippet" : {
              "text" : "    if isinstance(key, str):\n        key = salt.utils.stringutils.to_bytes(key)\n    hmac_hash = hmac.new(key, msg, getattr(hashlib, hashtype))\n    return hmac_hash.hexdigest() == challenge\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9c23fed72b7e8344:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "    \"\"\"\n    return salt.utils.stringutils.to_unicode(\n        hashlib.md5(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5b1b46ed3d6a651f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 86,
            "endLine" : 90,
            "snippet" : {
              "text" : "    Generate an sha1 hash of a given string.\n    \"\"\"\n    return hashlib.sha1(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "91579fb7c955653a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "    \"\"\"\n    return salt.utils.stringutils.to_unicode(\n        hashlib.sha256(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "10912efab6f5143f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 107,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 105,
            "endLine" : 109,
            "snippet" : {
              "text" : "    \"\"\"\n    return salt.utils.stringutils.to_unicode(\n        hashlib.sha512(salt.utils.stringutils.to_bytes(instr)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec7d02802a02c93d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 120,
            "startColumn" : 36,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 118,
            "endLine" : 122,
            "snippet" : {
              "text" : "    key = salt.utils.stringutils.to_bytes(shared_secret)\n    challenge = salt.utils.stringutils.to_bytes(challenge_hmac)\n    hmac_hash = hmac.new(key, msg, hashlib.sha256)\n    valid_hmac = base64.b64encode(hmac_hash.digest())\n    return valid_hmac == challenge\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d151ab03f87eed22:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/hashutils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 132,
            "startColumn" : 36,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 130,
            "endLine" : 134,
            "snippet" : {
              "text" : "    msg = salt.utils.stringutils.to_bytes(string)\n    key = salt.utils.stringutils.to_bytes(shared_secret)\n    hmac_hash = hmac.new(key, msg, hashlib.sha256).hexdigest()\n    return hmac_hash\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c59ac38fff3f6f72:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/wheel/key.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 375,
            "startColumn" : 15,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 373,
            "endLine" : 377,
            "snippet" : {
              "text" : "    \"\"\"\n    if id_ is None:\n        id_ = hashlib.sha512(os.urandom(32)).hexdigest()\n    else:\n        id_ = clean.filename(id_)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fa0836f50cd87:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mac_assistive.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "            )\n            for row in cursor.fetchall():\n                digest = hashlib.sha1(row[\"sql\"].encode()).hexdigest()[:10]\n                if digest in (\"ecc443615f\", \"80a4bb6912\"):\n                    # Mojave and Catalina\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84bd61911a377cdb:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/minionswarm.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 353,
            "startColumn" : 44,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 351,
            "endLine" : 355,
            "snippet" : {
              "text" : "            data[\"grains\"][\"saltversion\"] = random.choice(VERS)\n        if self.opts[\"rand_machine_id\"]:\n            data[\"grains\"][\"machine_id\"] = hashlib.md5(minion_id).hexdigest()\n        if self.opts[\"rand_uuid\"]:\n            data[\"grains\"][\"uuid\"] = str(uuid.uuid4())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2de8d3b952df859a:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mod_random.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "\n\ndef hash(value, algorithm=\"sha512\"):\n    \"\"\"\n    .. versionadded:: 2014.7.0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2bf2ba3929f7b25d:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mysql.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 267,
            "startColumn" : 17,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 265,
            "endLine" : 269,
            "snippet" : {
              "text" : "\ndef __mysql_hash_password(password):\n    _password = hashlib.sha1(password.encode()).digest()\n    _password = f\"*{hashlib.sha1(_password).hexdigest().upper()}\"\n    return _password\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "779011572b50a76c:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/mysql.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 268,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 266,
            "endLine" : 270,
            "snippet" : {
              "text" : "def __mysql_hash_password(password):\n    _password = hashlib.sha1(password.encode()).digest()\n    _password = f\"*{hashlib.sha1(_password).hexdigest().upper()}\"\n    return _password\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a358b472094e0e0:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/network.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 1644,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1642,
            "endLine" : 1646,
            "snippet" : {
              "text" : "            # Generate a random string of a\n            # decent size to test UDP connection\n            md5h = hashlib.md5()\n            md5h.update(datetime.datetime.now().strftime(\"%s\"))\n            msg = md5h.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3f8e66828a8a97a1:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 51,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 49,
            "endLine" : 53,
            "snippet" : {
              "text" : "\n    try:\n        hashlib.new(\"md4\", \"\".encode(\"utf-16le\"))\n    except ValueError:\n        return (False, \"Hash type md4 unsupported\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1221c8090d35cdbd:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "    \"\"\"\n    return binascii.hexlify(\n        hashlib.new(\"md4\", password.encode(\"utf-16le\")).digest()\n    ).upper()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "303f0eaf121865fc:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1222,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 1220,
            "endLine" : 1224,
            "snippet" : {
              "text" : "def _md5_password(role, password):\n    return \"md5{}\".format(\n        hashlib.md5(  # nosec\n            salt.utils.stringutils.to_bytes(f\"{password}{role}\")\n        ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ce19fae2fb97ecfb:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1237,
            "startColumn" : 43,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 1235,
            "endLine" : 1239,
            "snippet" : {
              "text" : "        salt_bytes = token_bytes(16)\n    password = salt.utils.stringutils.to_bytes(saslprep(password))\n    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abfbd114873dd4f4:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1238,
            "startColumn" : 59,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1236,
            "endLine" : 1240,
            "snippet" : {
              "text" : "    password = salt.utils.stringutils.to_bytes(saslprep(password))\n    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n    server_key = hmac.new(salted_password, b\"Server Key\", \"sha256\").digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1e4cdf78e179819c:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1239,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 1237,
            "endLine" : 1241,
            "snippet" : {
              "text" : "    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n    server_key = hmac.new(salted_password, b\"Server Key\", \"sha256\").digest()\n    return \"SCRAM-SHA-256${}:{}${}:{}\".format(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cf01c8c6348023d3:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1240,
            "startColumn" : 59,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1238,
            "endLine" : 1242,
            "snippet" : {
              "text" : "    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n    server_key = hmac.new(salted_password, b\"Server Key\", \"sha256\").digest()\n    return \"SCRAM-SHA-256${}:{}${}:{}\".format(\n        iterations,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d8723be946dcb1bc:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/qingcloud.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 123,
            "startColumn" : 47,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 121,
            "endLine" : 125,
            "snippet" : {
              "text" : "    string_to_sign += qs\n\n    h = hmac.new(access_key_secret, digestmod=sha256)\n    h.update(string_to_sign)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "64b140dac738a785:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/cloud/clouds/qingcloud.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 32
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "import time\nimport urllib.parse\nfrom hashlib import sha256\n\nimport salt.config as config\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "22cc76e756bea144:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/channel/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 702,
            "startColumn" : 50,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 700,
            "endLine" : 704,
            "snippet" : {
              "text" : "\n        # Be aggressive about the signature\n        digest = salt.utils.stringutils.to_bytes(hashlib.sha256(aes).hexdigest())\n        ret[\"sig\"] = salt.crypt.private_encrypt(self.master_key.key, digest)\n        eload = {\"result\": True, \"act\": \"accept\", \"id\": load[\"id\"], \"pub\": load[\"pub\"]}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f765c7e8e2706ab:1",
        "primaryLocationStartColumnFingerprint" : "41"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/channel/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 954,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 952,
            "endLine" : 956,
            "snippet" : {
              "text" : "                aes = salt.master.SMaster.secrets[\"aes\"][\"secret\"].value\n                digest = salt.utils.stringutils.to_bytes(\n                    hashlib.sha256(aes).hexdigest()\n                )\n                data[\"peers\"][peer] = {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c5b7ef8da805664b:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/channel/server.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 33
          },
          "region" : {
            "startLine" : 1056,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 1054,
            "endLine" : 1058,
            "snippet" : {
              "text" : "                key_str = self.master_key.master_private_decrypt(aes)\n                digest = salt.utils.stringutils.to_bytes(\n                    hashlib.sha256(key_str).hexdigest()\n                )\n                pub_path = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2cdbc655c07fcf39:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/support/sminion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 34
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "    log.info(\"Generating testing minion %r configuration...\", minion_id)\n    if root_dir is None:\n        hashed_minion_id = hashlib.sha1()\n        hashed_minion_id.update(salt.utils.stringutils.to_bytes(minion_id))\n        root_dir = os.path.join(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ba0b29b5181d4795:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pkg/tests/support/sminion.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 35
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "    log.info(\"Generating testing minion %r configuration...\", minion_id)\n    if root_dir is None:\n        hashed_minion_id = hashlib.sha1()\n        hashed_minion_id.update(salt.utils.stringutils.to_bytes(minion_id))\n        root_dir = os.path.join(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ba0b29b5181d4795:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/splunk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 36
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 9,
            "endLine" : 78,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 80,
            "snippet" : {
              "text" : "\ndef _generate_password(email):\n    m = hmac.new(\n        base64.b64decode(_get_secret_key(\"splunk\")),\n        str([email, SERVICE_NAME]),\n    )\n    return base64.urlsafe_b64encode(m.digest()).strip().replace(\"=\", \"\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "506443f77cb01d65:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/runners/survey.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 37
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "    # hash minion return values as a string\n    for minion in sorted(minions):\n        digest = hashlib.sha256(\n            str(minions[minion]).encode(__salt_system_encoding__)\n        ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "374bd5ff292f4cf:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/pillar/svn_pillar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 38
          },
          "region" : {
            "startLine" : 95,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 93,
            "endLine" : 97,
            "snippet" : {
              "text" : "        Try to initialize the SVN repo object\n        \"\"\"\n        repo_hash = hashlib.md5(repo_location).hexdigest()\n        repo_dir = os.path.join(opts[\"cachedir\"], \"pillar_svnfs\", repo_hash)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e412c6a2fdf06731:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_archive.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 39
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "                return_data = reqfp.read()\n                # We're using this checksum as the etag to show file changes\n                checksum = hashlib.md5(return_data).hexdigest()\n                if none_match == checksum:\n                    # Status code 304 Not Modified is returned if the file is unchanged\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11d1ab7a5f529219:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/modules/test_cp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 92,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 90,
            "endLine" : 94,
            "snippet" : {
              "text" : "        src = os.path.join(RUNTIME_VARS.FILES, \"file\", \"base\", \"file.big\")\n        with salt.utils.files.fopen(src, \"rb\") as fp_:\n            hash_str = hashlib.md5(fp_.read()).hexdigest()\n\n        self.run_function(\"cp.get_file\", [\"salt://file.big\", tgt], gzip=5)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "331d95e2374fb0f1:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/modules/test_cp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 36,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "        with salt.utils.files.fopen(tgt, \"rb\") as scene:\n            data = scene.read()\n        self.assertEqual(hash_str, hashlib.md5(data).hexdigest())\n        data = salt.utils.stringutils.to_unicode(data)\n        self.assertIn(\"KNIGHT:  They're nervous, sire.\", data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "380ab67688974b34:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/modules/test_cp.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 40
          },
          "region" : {
            "startLine" : 566,
            "startColumn" : 51,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 564,
            "endLine" : 568,
            "snippet" : {
              "text" : "        with salt.utils.files.fopen(path, \"rb\") as fn_:\n            data = fn_.read()\n            self.assertEqual(sha256_hash[\"hsum\"], hashlib.sha256(data).hexdigest())\n\n    @with_tempfile()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c2d9365c8b2b41c4:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/cloud/clouds/test_digitalocean.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 41
          },
          "region" : {
            "startLine" : 69,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 67,
            "endLine" : 71,
            "snippet" : {
              "text" : "            pub = ssh_key.publickey().exportKey(\"OpenSSH\")\n        pub = salt.utils.stringutils.to_str(pub)\n        key_hex = hashlib.md5(\n            base64.b64decode(pub.strip().split()[1].encode())\n        ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4a87e0820e0a2d01:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_file.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 42
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "                return_text = reqfp.read().encode(\"utf-8\")\n                # We're using this checksum as the etag to show file changes\n                checksum = hashlib.md5(return_text).hexdigest()\n                if none_match == checksum:\n                    # Status code 304 Not Modified is returned if the file is unchanged\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d5c2a37fe15d844:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/transport/test_ipc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 43
          },
          "region" : {
            "startLine" : 73,
            "startColumn" : 15,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 71,
            "endLine" : 75,
            "snippet" : {
              "text" : "def test_minion_ipc_server_unix(minion_config, sock_dir):\n    minion_config[\"id\"] = \"foo\"\n    id_hash = hashlib.sha256(\n        salt.utils.stringutils.to_bytes(minion_config[\"id\"])\n    ).hexdigest()[:10]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "554f95d47a352f42:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 42,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 40,
            "endLine" : 44,
            "snippet" : {
              "text" : "\n    def test_create_namespace(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        nsname = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e33ebbeda2926e41:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 58,
            "endLine" : 62,
            "snippet" : {
              "text" : "\n    def setUp(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        self.name = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f907082fc539a4e:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 213,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 211,
            "endLine" : 215,
            "snippet" : {
              "text" : "\n    def setUp(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        self.name = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e47be48f6fdc76f:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_k8s.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 44
          },
          "region" : {
            "startLine" : 415,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 413,
            "endLine" : 417,
            "snippet" : {
              "text" : "\n    def setUp(self):\n        hash = hashlib.sha1()\n        hash.update(str(time.time()))\n        self.name = hash.hexdigest()[:16]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e47b2982021a5ea:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/file/test_managed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 45
          },
          "region" : {
            "startLine" : 401,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 399,
            "endLine" : 403,
            "snippet" : {
              "text" : "        \"hello_world.txt\", hello_world_contents, state_tree\n    ) as local_path:\n        actual_hash = hashlib.sha256(local_path.read_bytes()).hexdigest()\n\n        # `name` needs to exist for this test, like a previous file.managed run\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c9566e5bb18cde4:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/modules/test_pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 46
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 17,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\ntry:\n    hashlib.new(\"md4\", \"\".encode(\"utf-16le\"))\n    MD4_SUPPORTED = True\nexcept ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c2cd98de91a441b9:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/modules/test_pdbedit.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 47
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "def _md4_supported():\n    try:\n        hashlib.new(\"md4\", \"\".encode(\"utf-16le\"))\n        return True\n    except ValueError:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbfee9b31acb38aa:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/transport/test_publish_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 48
          },
          "region" : {
            "startLine" : 120,
            "startColumn" : 9,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 118,
            "endLine" : 122,
            "snippet" : {
              "text" : "    \"\"\"\n    minion_hexid = salt.utils.stringutils.to_bytes(\n        hashlib.sha1(salt.utils.stringutils.to_bytes(temp_salt_minion.id)).hexdigest()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b8c8220769c93560:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/integration/modules/state/test_state.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 49
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "    ) as myzip:\n        myzip.writestr(\"issue-56131.txt\", \"issue-56131\")\n    zipfile_hash = hashlib.sha256(zipfile_path.read_bytes()).hexdigest()\n    sls_contents = \"\"\"\n    {}:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "257935692e8457fb:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/states/test_x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 50
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "    @staticmethod\n    def file_checksum(path):\n        hash = hashlib.sha1()\n        with salt.utils.files.fopen(path, \"rb\") as f:\n            for block in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "889da000b0f48686:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/modules/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 51
          },
          "region" : {
            "startLine" : 1730,
            "startColumn" : 54,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1728,
            "endLine" : 1732,
            "snippet" : {
              "text" : "    assert res.startswith(\"-----BEGIN CERTIFICATE-----\")\n    cert = _get_cert(res)\n    assert isinstance(cert.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "76d2fb8103ef4d12:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/modules/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 51
          },
          "region" : {
            "startLine" : 1770,
            "startColumn" : 53,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1768,
            "endLine" : 1772,
            "snippet" : {
              "text" : "    assert res.startswith(\"-----BEGIN CERTIFICATE REQUEST-----\")\n    csr = cx509.load_pem_x509_csr(res.encode())\n    assert isinstance(csr.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c2f2405cc4282c2e:1",
        "primaryLocationStartColumnFingerprint" : "48"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 2491,
            "startColumn" : 54,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 2489,
            "endLine" : 2493,
            "snippet" : {
              "text" : "    assert ret.result is True\n    cert = _get_cert(cert_args[\"name\"])\n    assert isinstance(cert.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fae6e2bbe8cb35c:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 2538,
            "startColumn" : 53,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 2536,
            "endLine" : 2540,
            "snippet" : {
              "text" : "    assert ret.result is True\n    csr = _get_csr(csr_args[\"name\"])\n    assert isinstance(csr.signature_hash_algorithm, hashes.SHA512)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6155a0923582b821:1",
        "primaryLocationStartColumnFingerprint" : "48"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/virt.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 53
          },
          "region" : {
            "startLine" : 29,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 27,
            "endLine" : 31,
            "snippet" : {
              "text" : "\n    try:\n        rand = hashlib.md5(os.urandom(32)).hexdigest()\n        remote_filename = urllib.parse.urlparse(url).path.split(\"/\")[-1]\n        full_directory = os.path.join(dir, \"{}-{}\".format(rand, remote_filename))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "94f6d0baadaddee3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/vm.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 54
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "with tools.utils.REPO_ROOT.joinpath(\"cicd\", \"golden-images.json\").open() as rfh:\n    AMIS = json.load(rfh)\nREPO_CHECKOUT_ID = hashlib.sha256(\n    \"|\".join(list(platform.uname()) + [str(tools.utils.REPO_ROOT)]).encode()\n).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "277c82228de0a651:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/support/win_installer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 55
          },
          "region" : {
            "startLine" : 40,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 38,
            "endLine" : 42,
            "snippet" : {
              "text" : "    if resp.status_code != 200:\n        raise Exception(\"Unable to fetch installer\")\n    md5hsh = hashlib.md5()\n    for chunk in resp.iter_content(chunk_size=1024):\n        md5hsh.update(chunk)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ca69ad375f633336:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/win_network.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 56
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "            # Generate a random string of a\n            # decent size to test UDP connection\n            md5h = hashlib.md5()\n            md5h.update(datetime.datetime.now().strftime(\"%s\"))\n            msg = md5h.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3f8e66828a8a97a1:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 418,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 416,
            "endLine" : 420,
            "snippet" : {
              "text" : "    Used for generating subject key identifiers\n    \"\"\"\n    sha_hash = hashlib.sha1(cert.get_pubkey().get_modulus()).hexdigest()\n    return _pretty_hex(sha_hash)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79b975211c4a7068:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 57
          },
          "region" : {
            "startLine" : 669,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 667,
            "endLine" : 671,
            "snippet" : {
              "text" : "        \"Subject\": _parse_subject(csr.get_subject()),\n        \"Subject Hash\": _dec2hex(csr.get_subject().as_hash()),\n        \"Public Key Hash\": hashlib.sha1(csr.get_pubkey().get_modulus()).hexdigest(),\n    }\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84a54c26e286df8f:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 59
          },
          "region" : {
            "startLine" : 1759,
            "startColumn" : 33,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 1757,
            "endLine" : 1761,
            "snippet" : {
              "text" : "        return False\n    for i, new_cert in enumerate(new):\n        if new_cert.fingerprint(hashes.SHA256()) != current[i].fingerprint(\n            hashes.SHA256()\n        ):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "511326b202e5584f:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/states/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 59
          },
          "region" : {
            "startLine" : 1760,
            "startColumn" : 13,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 1758,
            "endLine" : 1762,
            "snippet" : {
              "text" : "    for i, new_cert in enumerate(new):\n        if new_cert.fingerprint(hashes.SHA256()) != current[i].fingerprint(\n            hashes.SHA256()\n        ):\n            return False\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3667ef2f922ec49d:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 730,
            "startColumn" : 32,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 728,
            "endLine" : 732,
            "snippet" : {
              "text" : "                        serialization.pkcs12.PBES.PBESv1SHA1And3KeyTripleDESCBC\n                    )\n                    .hmac_hash(hashes.SHA1())\n                    .build(pkcs12_passphrase)\n                )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "28757a46661a8db3:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1332,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1330,
            "endLine" : 1334,
            "snippet" : {
              "text" : "                    serialization.pkcs12.PBES.PBESv1SHA1And3KeyTripleDESCBC\n                )\n                .hmac_hash(hashes.SHA1())\n                .build(passphrase)\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ab5f3dd1f96e05db:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1665,
            "startColumn" : 68,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 1663,
            "endLine" : 1667,
            "snippet" : {
              "text" : "        \"serial_number\": x509util.dec2hex(cert.serial_number),\n        \"fingerprints\": {\n            \"sha1\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA1())),\n            \"sha256\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA256())),\n        },\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "136cd0ad254ba3d2:1",
        "primaryLocationStartColumnFingerprint" : "55"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1666,
            "startColumn" : 70,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 1664,
            "endLine" : 1668,
            "snippet" : {
              "text" : "        \"fingerprints\": {\n            \"sha1\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA1())),\n            \"sha256\": x509util.pretty_hex(cert.fingerprint(algorithm=hashes.SHA256())),\n        },\n        \"subject\": _parse_dn(cert.subject),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e90e97b260bfa235:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1696,
            "startColumn" : 40,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 1694,
            "endLine" : 1698,
            "snippet" : {
              "text" : "    if __opts__[\"fips_mode\"] is False:\n        ret[\"fingerprints\"][\"md5\"] = x509util.pretty_hex(\n            cert.fingerprint(algorithm=hashes.MD5())\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4372ffb81430e12a:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/suse/yum/plugins/yumnotify.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 61
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "        hexdigest\n    \"\"\"\n    digest = hashlib.sha256()\n    with open(RPM_PATH, \"rb\") as rpm_db_fh:\n        while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cd9d0da01a7505de:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/transport/zeromq.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 141,
            "startColumn" : 22,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 139,
            "endLine" : 143,
            "snippet" : {
              "text" : "        **extras,\n    ):\n        self.hexid = hashlib.sha1(salt.utils.stringutils.to_bytes(_id)).hexdigest()\n        self._closing = False\n        self.context = zmq.asyncio.Context()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5d77aacf10ebf554:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/transport/zeromq.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 62
          },
          "region" : {
            "startLine" : 941,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 939,
            "endLine" : 943,
            "snippet" : {
              "text" : "                    # to avoid collisions\n                    htopic = salt.utils.stringutils.to_bytes(\n                        hashlib.sha1(salt.utils.stringutils.to_bytes(topic)).hexdigest()\n                    )\n                    await self.dpub_sock.send(htopic, flags=zmq.SNDMORE)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8b39d69b2638639:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/znc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 63
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "    # Setup the hasher\n    if hasher == \"sha256\":\n        h = hashlib.sha256(password)\n    elif hasher == \"md5\":\n        h = hashlib.md5(password)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f0552cbc59f8474:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/znc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 63
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 13,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        h = hashlib.sha256(password)\n    elif hasher == \"md5\":\n        h = hashlib.md5(password)\n    else:\n        return NotImplemented\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15c6385351c4ac5f:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/suse/zypper/plugins/commit/zyppnotify",
            "uriBaseId" : "%SRCROOT%",
            "index" : 64
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "            hexdigest\n        \"\"\"\n        digest = hashlib.sha256()\n        with open(self.rpm_path, \"rb\") as rpm_db_fh:\n            while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f47c6b81d3f0856:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/renderers/aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 218,
            "startColumn" : 18,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 216,
            "endLine" : 220,
            "snippet" : {
              "text" : "    # Decryption\n    data_key = _base64_plaintext_data_key()\n    plain_text = fernet.Fernet(data_key).decrypt(cipher)\n    if hasattr(plain_text, \"decode\"):\n        plain_text = plain_text.decode(__salt_system_encoding__)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "322c83853cde5e88:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 199,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 197,
            "endLine" : 201,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms._decrypt_ciphertext(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 210,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 208,
            "endLine" : 212,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    secret_map = {\"secret\": plaintext_secret}\n    crypted_map = {\"secret\": crypted}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8ddc2b7e37ddb3f:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms.render(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:2",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Attribute()](2)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](3)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for None](4)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for None](5)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 12,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "            \"RSA key size must be either 2048, 3072 or 4096 bits.\"\n        )\n    return rsa.generate_private_key(public_exponent=65537, key_size=keysize)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "21a5d4952a3be55c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 474,
            "startColumn" : 34,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 472,
            "endLine" : 476,
            "snippet" : {
              "text" : "\n\ndef generate_rsa_privkey(keysize=2048):\n    \"\"\"\n    Generate an RSA private key\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1231,
            "startColumn" : 19,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 1229,
            "endLine" : 1233,
            "snippet" : {
              "text" : "            \"`bits` has been renamed to `keysize`. Please update your code.\",\n        )\n        keysize = kwargs.pop(\"bits\")\n\n    ignored_params = {\"cipher\", \"verbose\", \"text\"}.intersection(\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 2121,
            "startColumn" : 65,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 2119,
            "endLine" : 2123,
            "snippet" : {
              "text" : "def _generate_pk(algo=\"rsa\", keysize=None):\n    if algo == \"rsa\":\n        return x509util.generate_rsa_privkey(keysize=keysize or 2048)\n    if algo == \"ec\":\n        return x509util.generate_ec_privkey(keysize=keysize or 256)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 1175,
            "startColumn" : 13,
            "endColumn" : 17
          },
          "contextRegion" : {
            "startLine" : 1173,
            "endLine" : 1177,
            "snippet" : {
              "text" : "def create_private_key(\n    algo=\"rsa\",\n    keysize=None,\n    passphrase=None,\n    encoding=\"pem\",\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for None"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 60
          },
          "region" : {
            "startLine" : 2119,
            "startColumn" : 38,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 2117,
            "endLine" : 2121,
            "snippet" : {
              "text" : "\n\ndef _generate_pk(algo=\"rsa\", keysize=None):\n    if algo == \"rsa\":\n        return x509util.generate_rsa_privkey(keysize=keysize or 2048)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for None"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for getattr()()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 491,
            "startColumn" : 12,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 489,
            "endLine" : 493,
            "snippet" : {
              "text" : "    if keysize not in [256, 384, 521]:\n        raise SaltInvocationError(\"EC key size must be either 256, 384, 521 bits.\")\n    return ec.generate_private_key(getattr(ec, f\"SECP{keysize}R1\")())\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5806d4303cd11cd7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 491,
            "startColumn" : 36,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 489,
            "endLine" : 493,
            "snippet" : {
              "text" : "    if keysize not in [256, 384, 521]:\n        raise SaltInvocationError(\"EC key size must be either 256, 384, 521 bits.\")\n    return ec.generate_private_key(getattr(ec, f\"SECP{keysize}R1\")())\n\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for getattr()()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PSS"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 976,
            "startColumn" : 21,
            "endLine" : 978,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 974,
            "endLine" : 980,
            "snippet" : {
              "text" : "                    cert.signature,\n                    cert.tbs_certificate_bytes,\n                    padding.PSS(\n                        padding.MGF1(cert.signature_hash_algorithm), padding.PSS.AUTO\n                    ),\n                    cert.signature_hash_algorithm,\n                )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d0d6ae55a076118:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 985,
            "startColumn" : 21,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 983,
            "endLine" : 987,
            "snippet" : {
              "text" : "                    cert.signature,\n                    cert.tbs_certificate_bytes,\n                    padding.PKCS1v15(),\n                    cert.signature_hash_algorithm,\n                )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "feb045f4b6a45f0f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 996,
            "startColumn" : 17,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 994,
            "endLine" : 998,
            "snippet" : {
              "text" : "                cert.signature,\n                cert.tbs_certificate_bytes,\n                ec.ECDSA(cert.signature_hash_algorithm),\n            )\n            return True\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d4fe313cebb48fe9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 1003,
            "startColumn" : 13,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 1001,
            "endLine" : 1005,
            "snippet" : {
              "text" : "    if key_type in [KEY_TYPE.ED25519, KEY_TYPE.ED448]:\n        try:\n            pubkey.verify(cert.signature, cert.tbs_certificate_bytes)\n            return True\n        except InvalidSignature:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d49fd669671c5e68:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/modules/postgres.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 1237,
            "startColumn" : 23,
            "endColumn" : 86
          },
          "contextRegion" : {
            "startLine" : 1235,
            "endLine" : 1239,
            "snippet" : {
              "text" : "        salt_bytes = token_bytes(16)\n    password = salt.utils.stringutils.to_bytes(saslprep(password))\n    salted_password = hashlib.pbkdf2_hmac(\"sha256\", password, salt_bytes, iterations)\n    stored_key = hmac.new(salted_password, b\"Client Key\", \"sha256\").digest()\n    stored_key = hashlib.sha256(stored_key).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abfbd114873dd4f4:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 2760,
            "startColumn" : 31,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 2758,
            "endLine" : 2762,
            "snippet" : {
              "text" : "    pk = _get_privkey(ret.name, encoding=encoding, passphrase=passphrase)\n    if algo == \"rsa\":\n        assert isinstance(pk, rsa.RSAPrivateKey)\n    if algo == \"ec\":\n        assert isinstance(pk, ec.EllipticCurvePrivateKey)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8064703b823d65d7:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/functional/states/test_x509_v2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 52
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 79,
            "endColumn" : 82
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "    import cryptography.x509 as cx509\n    from cryptography.hazmat.primitives import hashes\n    from cryptography.hazmat.primitives.asymmetric import ec, ed448, ed25519, rsa\n    from cryptography.hazmat.primitives.serialization import (\n        load_der_private_key,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "29a884d5135a886d:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 12,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "            \"RSA key size must be either 2048, 3072 or 4096 bits.\"\n        )\n    return rsa.generate_private_key(public_exponent=65537, key_size=keysize)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "21a5d4952a3be55c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 12,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "            \"RSA key size must be either 2048, 3072 or 4096 bits.\"\n        )\n    return rsa.generate_private_key(public_exponent=65537, key_size=keysize)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "21a5d4952a3be55c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 25,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "    \"\"\"\n    key_type = None\n    if isinstance(key, (rsa.RSAPrivateKey, rsa.RSAPublicKey)):\n        key_type = \"rsa\"\n    if isinstance(key, (ec.EllipticCurvePrivateKey, ec.EllipticCurvePublicKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f25fe6ee9b2f73:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 527,
            "startColumn" : 44,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 525,
            "endLine" : 529,
            "snippet" : {
              "text" : "    \"\"\"\n    key_type = None\n    if isinstance(key, (rsa.RSAPrivateKey, rsa.RSAPublicKey)):\n        key_type = \"rsa\"\n    if isinstance(key, (ec.EllipticCurvePrivateKey, ec.EllipticCurvePublicKey)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f25fe6ee9b2f73:1",
        "primaryLocationStartColumnFingerprint" : "39"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 676,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 674,
            "endLine" : 678,
            "snippet" : {
              "text" : "            pk,\n            (\n                rsa.RSAPrivateKey,\n                ec.EllipticCurvePrivateKey,\n                ed25519.Ed25519PrivateKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "22e3d623d6cfd49a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 770,
            "startColumn" : 17,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 768,
            "endLine" : 772,
            "snippet" : {
              "text" : "            pk,\n            (\n                rsa.RSAPublicKey,\n                ec.EllipticCurvePublicKey,\n                ed25519.Ed25519PublicKey,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d80c702c186b9d81:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/utils/x509.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 58
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 84,
            "endColumn" : 87
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from cryptography.exceptions import InvalidSignature\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, ed448, ed25519, padding, rsa\nfrom cryptography.hazmat.primitives.serialization import pkcs7, pkcs12\nfrom cryptography.x509.oid import SubjectInformationAccessOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cdb934d290eb0a0:1",
        "primaryLocationStartColumnFingerprint" : "83"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "salt/renderers/aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 218,
            "startColumn" : 18,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 216,
            "endLine" : 220,
            "snippet" : {
              "text" : "    # Decryption\n    data_key = _base64_plaintext_data_key()\n    plain_text = fernet.Fernet(data_key).decrypt(cipher)\n    if hasattr(plain_text, \"decode\"):\n        plain_text = plain_text.decode(__salt_system_encoding__)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "322c83853cde5e88:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 199,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 197,
            "endLine" : 201,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms._decrypt_ciphertext(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 210,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 208,
            "endLine" : 212,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    secret_map = {\"secret\": plaintext_secret}\n    crypted_map = {\"secret\": crypted}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f8ddc2b7e37ddb3f:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/pytests/unit/renderers/test_aws_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 15,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "    \"\"\"\n    test_key = fernet.Fernet.generate_key()\n    crypted = fernet.Fernet(test_key).encrypt(plaintext_secret.encode())\n    with patch.object(aws_kms, \"_base64_plaintext_data_key\", return_value=test_key):\n        assert aws_kms.render(crypted) == plaintext_secret\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fe9fbd8aa759a78:2",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:saltstack/salt/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}