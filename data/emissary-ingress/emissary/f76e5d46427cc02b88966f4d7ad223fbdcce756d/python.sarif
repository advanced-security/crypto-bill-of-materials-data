{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "python/kat/harness.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "python/ambassador/ir/ir.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "python/ambassador/ir/irhttpmapping.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "python/ambassador/ir/irtcpmapping.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "python/tests/kat/t_tls.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "python/tests/unit/test_acme_privatekey_secrets.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "python/ambassador/utils.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/kat/harness.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from collections import OrderedDict\nfrom functools import singledispatch\nfrom hashlib import sha256\nfrom typing import Any, Dict, List, NamedTuple, Optional, Sequence, Tuple, Type, Union, cast\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c37ee557974f425e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/ir/ir.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 487,
            "startColumn" : 33,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 485,
            "endLine" : 489,
            "snippet" : {
              "text" : "                # Too long. Gather this cluster by name prefix and normalize\n                # its name below.\n                h = hashlib.new(\"sha1\")\n                h.update(name.encode(\"utf-8\"))\n                hd = h.hexdigest()[0:16].upper()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe5a2c57243dccc9:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/ir/irhttpmapping.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 562,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 560,
            "endLine" : 564,
            "snippet" : {
              "text" : "            group_id = group_id + str(self.precedence).encode(\"utf-8\")\n\n        h = hashlib.new(\"sha1\")\n        h.update(group_id)\n        return h.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7931aecc249a141f:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/ir/irtcpmapping.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "        # Yes, we're using a cryptographic hash here. Cope. [ :) ]\n\n        h = hashlib.new(\"sha1\")\n\n        # This is a TCP mapping.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6c2b37a04368aee5:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/tests/kat/t_tls.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 202,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 200,
            "endLine" : 204,
            "snippet" : {
              "text" : "        certraw = b64decode(\"\\n\".join(l for l in cert.split(\"\\n\") if not l.startswith(\"-\")))\n        # take the sha256 sum aof that.\n        certhash = hashlib.sha256(certraw).hexdigest()\n\n        assert self.results[0].backend\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "33db65911f707863:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/tests/kat/t_tls.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 469,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 467,
            "endLine" : 471,
            "snippet" : {
              "text" : "    def config(self) -> Generator[Union[str, Tuple[Node, str]], None, None]:\n        fingerprint = (\n            hashlib.sha1(\n                (\n                    TLSCerts[\"localhost\"].pubcert + \"\\n\" + TLSCerts[\"localhost\"].privkey + \"\\n\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc66c6680d199b39:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/tests/unit/test_acme_privatekey_secrets.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 29,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "        # Don't save if it has neither a tls_crt or a user_key or the root_crt\n        if tls_crt or user_key or root_crt:\n            h = hashlib.new(\"sha1\")\n\n            for el in [tls_crt, tls_key, user_key]:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "884c598715865387:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 616,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 614,
            "endLine" : 618,
            "snippet" : {
              "text" : "            return \"<none>\"\n\n        h = hashlib.new(\"sha1\")\n        h.update(pem.encode(\"utf-8\"))\n        hd = h.hexdigest()[0:16].upper()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "13e22245b55f7595:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 901,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 899,
            "endLine" : 903,
            "snippet" : {
              "text" : "        root_crt: Optional[str],\n    ) -> SavedSecret:\n        h = hashlib.new(\"sha1\")\n\n        tls_crt_path = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "971f75ff9428304d:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/kat/harness.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from collections import OrderedDict\nfrom functools import singledispatch\nfrom hashlib import sha256\nfrom typing import Any, Dict, List, NamedTuple, Optional, Sequence, Tuple, Type, Union, cast\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c37ee557974f425e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/ir/ir.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 487,
            "startColumn" : 33,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 485,
            "endLine" : 489,
            "snippet" : {
              "text" : "                # Too long. Gather this cluster by name prefix and normalize\n                # its name below.\n                h = hashlib.new(\"sha1\")\n                h.update(name.encode(\"utf-8\"))\n                hd = h.hexdigest()[0:16].upper()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe5a2c57243dccc9:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/ir/irhttpmapping.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 562,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 560,
            "endLine" : 564,
            "snippet" : {
              "text" : "            group_id = group_id + str(self.precedence).encode(\"utf-8\")\n\n        h = hashlib.new(\"sha1\")\n        h.update(group_id)\n        return h.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7931aecc249a141f:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/ir/irtcpmapping.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 108,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 106,
            "endLine" : 110,
            "snippet" : {
              "text" : "        # Yes, we're using a cryptographic hash here. Cope. [ :) ]\n\n        h = hashlib.new(\"sha1\")\n\n        # This is a TCP mapping.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6c2b37a04368aee5:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/tests/kat/t_tls.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 202,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 200,
            "endLine" : 204,
            "snippet" : {
              "text" : "        certraw = b64decode(\"\\n\".join(l for l in cert.split(\"\\n\") if not l.startswith(\"-\")))\n        # take the sha256 sum aof that.\n        certhash = hashlib.sha256(certraw).hexdigest()\n\n        assert self.results[0].backend\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "33db65911f707863:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/tests/kat/t_tls.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 469,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 467,
            "endLine" : 471,
            "snippet" : {
              "text" : "    def config(self) -> Generator[Union[str, Tuple[Node, str]], None, None]:\n        fingerprint = (\n            hashlib.sha1(\n                (\n                    TLSCerts[\"localhost\"].pubcert + \"\\n\" + TLSCerts[\"localhost\"].privkey + \"\\n\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc66c6680d199b39:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/tests/unit/test_acme_privatekey_secrets.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 29,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "        # Don't save if it has neither a tls_crt or a user_key or the root_crt\n        if tls_crt or user_key or root_crt:\n            h = hashlib.new(\"sha1\")\n\n            for el in [tls_crt, tls_key, user_key]:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "884c598715865387:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 616,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 614,
            "endLine" : 618,
            "snippet" : {
              "text" : "            return \"<none>\"\n\n        h = hashlib.new(\"sha1\")\n        h.update(pem.encode(\"utf-8\"))\n        hd = h.hexdigest()[0:16].upper()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "13e22245b55f7595:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "python/ambassador/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 901,
            "startColumn" : 25,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 899,
            "endLine" : 903,
            "snippet" : {
              "text" : "        root_crt: Optional[str],\n    ) -> SavedSecret:\n        h = hashlib.new(\"sha1\")\n\n        tls_crt_path = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "971f75ff9428304d:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:emissary-ingress/emissary/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}