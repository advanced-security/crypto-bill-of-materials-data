{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "release/build.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "mitmproxy/tools/web/app.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "mitmproxy/certs.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "mitmproxy/utils/magisk.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "mitmproxy/proxy/layers/quic.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "mitmproxy/addons/serverplayback.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "test/helper_tools/memoryleak2.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "test/mitmproxy/test_certs.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "mitmproxy/addons/tlsconfig.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "release/build.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 216,
            "startColumn" : 13,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 214,
            "endLine" : 218,
            "snippet" : {
              "text" : "    if not IB_LICENSE.exists():\n        print(\"Decrypt InstallBuilder license...\")\n        f = cryptography.fernet.Fernet(os.environ[\"CI_BUILD_KEY\"].encode())\n        with open(IB_LICENSE.with_suffix(\".xml.enc\"), \"rb\") as infile, open(\n            IB_LICENSE, \"wb\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6e9ae9c967cda1c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/tools/web/app.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 117,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 115,
            "endLine" : 119,
            "snippet" : {
              "text" : "        if flow.request.raw_content is not None:\n            content_length = len(flow.request.raw_content)\n            content_hash = hashlib.sha256(flow.request.raw_content).hexdigest()\n        else:\n            content_length = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5fafecd15ebd47df:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/tools/web/app.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 138,
            "startColumn" : 32,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 136,
            "endLine" : 140,
            "snippet" : {
              "text" : "            if flow.response.raw_content is not None:\n                content_length = len(flow.response.raw_content)\n                content_hash = hashlib.sha256(flow.response.raw_content).hexdigest()\n            else:\n                content_length = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4bf962ab4c4a02:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES128\nUse of algorithm PKCS7\nUse of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "release/build.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 216,
            "startColumn" : 13,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 214,
            "endLine" : 218,
            "snippet" : {
              "text" : "    if not IB_LICENSE.exists():\n        print(\"Decrypt InstallBuilder license...\")\n        f = cryptography.fernet.Fernet(os.environ[\"CI_BUILD_KEY\"].encode())\n        with open(IB_LICENSE.with_suffix(\".xml.enc\"), \"rb\") as infile, open(\n            IB_LICENSE, \"wb\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6e9ae9c967cda1c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "release/build.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 243,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 241,
            "endLine" : 245,
            "snippet" : {
              "text" : "            tmp.rename(IB_SETUP)\n\n        ib_setup_hash = hashlib.sha256()\n        with IB_SETUP.open(\"rb\") as fp:\n            while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eaafa919365ef69a:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 93,
            "startColumn" : 39,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 91,
            "endLine" : 95,
            "snippet" : {
              "text" : "\n    def fingerprint(self) -> bytes:\n        return self._cert.fingerprint(hashes.SHA256())\n\n    @property\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "291c4e737341db8f:1",
        "primaryLocationStartColumnFingerprint" : "30"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 123,
            "startColumn" : 35,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 121,
            "endLine" : 125,
            "snippet" : {
              "text" : "    def keyinfo(self) -> tuple[str, int]:\n        public_key = self._cert.public_key()\n        if isinstance(public_key, rsa.RSAPublicKey):\n            return \"RSA\", public_key.key_size\n        if isinstance(public_key, dsa.DSAPublicKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99b59004e48d1045:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "    now = datetime.datetime.now()\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb09e637ad69ffe0:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endLine" : 186,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 188,
            "snippet" : {
              "text" : "    now = datetime.datetime.now()\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n    )  # type: ignore\n    name = x509.Name(\n        [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb09e637ad69ffe0:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 224,
            "startColumn" : 60,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 222,
            "endLine" : 226,
            "snippet" : {
              "text" : "        critical=False,\n    )\n    cert = builder.sign(private_key=private_key, algorithm=hashes.SHA256())  # type: ignore\n    return private_key, cert\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "30afd00a141853c4:1",
        "primaryLocationStartColumnFingerprint" : "55"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 281,
            "startColumn" : 56,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 279,
            "endLine" : 283,
            "snippet" : {
              "text" : "        x509.SubjectAlternativeName(ss), critical=not is_valid_commonname\n    )\n    cert = builder.sign(private_key=privkey, algorithm=hashes.SHA256())  # type: ignore\n    return Cert(cert)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a276a4bedce7bbd:1",
        "primaryLocationStartColumnFingerprint" : "51"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 288,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 286,
            "endLine" : 290,
            "snippet" : {
              "text" : "class CertStoreEntry:\n    cert: Cert\n    privatekey: rsa.RSAPrivateKey\n    chain_file: Path | None\n    chain_certs: list[Cert]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "65e8218534fdf31f:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 311,
            "startColumn" : 29,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 309,
            "endLine" : 313,
            "snippet" : {
              "text" : "    def __init__(\n        self,\n        default_privatekey: rsa.RSAPrivateKey,\n        default_ca: Cert,\n        default_chain_file: Path | None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "54a073f3c122ac2d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.serialization import pkcs12\nfrom cryptography.x509 import ExtendedKeyUsageOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95d5bad7bdf75517:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 12,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "    cn: str,\n    key_size: int,\n) -> tuple[rsa.RSAPrivateKeyWithSerialization, x509.Certificate]:\n    now = datetime.datetime.now()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6fd2e339ff354ab:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 229,
            "startColumn" : 14,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 227,
            "endLine" : 231,
            "snippet" : {
              "text" : "\ndef dummy_cert(\n    privkey: rsa.RSAPrivateKey,\n    cacert: x509.Certificate,\n    commonname: str | None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bafaad5085febee1:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 544,
            "startColumn" : 66,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 542,
            "endLine" : 546,
            "snippet" : {
              "text" : "\n\ndef load_pem_private_key(data: bytes, password: bytes | None) -> rsa.RSAPrivateKey:\n    \"\"\"\n    like cryptography's load_pem_private_key, but silently falls back to not using a password\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c7edfb6c65ea675:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/utils/magisk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 90,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 88,
            "endLine" : 92,
            "snippet" : {
              "text" : "def subject_hash_old(ca: x509.Certificate) -> str:\n    # Mimics the -subject_hash_old option of openssl used for android certificate names\n    full_hash = hashlib.md5(ca.subject.public_bytes()).digest()\n    sho = full_hash[0] | (full_hash[1] << 8) | (full_hash[2] << 16) | full_hash[3] << 24\n    return hex(sho)[2:]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2ec7e73c213cac7d:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/proxy/layers/quic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 79,
            "endColumn" : 96
          },
          "contextRegion" : {
            "startLine" : 65,
            "endLine" : 69,
            "snippet" : {
              "text" : "    certificate_chain: list[x509.Certificate] = field(default_factory=list)\n    \"\"\"A list of additional certificates to send to the peer.\"\"\"\n    certificate_private_key: dsa.DSAPrivateKey | ec.EllipticCurvePrivateKey | rsa.RSAPrivateKey | None = (\n        None\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d602af39236240fa:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/proxy/layers/quic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\nfrom mitmproxy import certs\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "df8d74f324f66495:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/addons/serverplayback.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 205,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 203,
            "endLine" : 207,
            "snippet" : {
              "text" : "                headers.append((i, v))\n            key.append(headers)\n        return hashlib.sha256(repr(key).encode(\"utf8\", \"surrogateescape\")).digest()\n\n    def next_flow(self, flow: http.HTTPFlow) -> http.HTTPFlow | None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f592c0780820644b:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
      "ruleIndex" : 2,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
        "index" : 2
      },
      "message" : {
        "text" : "Use of algorithm PKCS7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "release/build.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 216,
            "startColumn" : 13,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 214,
            "endLine" : 218,
            "snippet" : {
              "text" : "    if not IB_LICENSE.exists():\n        print(\"Decrypt InstallBuilder license...\")\n        f = cryptography.fernet.Fernet(os.environ[\"CI_BUILD_KEY\"].encode())\n        with open(IB_LICENSE.with_suffix(\".xml.enc\"), \"rb\") as infile, open(\n            IB_LICENSE, \"wb\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6e9ae9c967cda1c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 123,
            "startColumn" : 35,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 121,
            "endLine" : 125,
            "snippet" : {
              "text" : "    def keyinfo(self) -> tuple[str, int]:\n        public_key = self._cert.public_key()\n        if isinstance(public_key, rsa.RSAPublicKey):\n            return \"RSA\", public_key.key_size\n        if isinstance(public_key, dsa.DSAPublicKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99b59004e48d1045:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "    now = datetime.datetime.now()\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb09e637ad69ffe0:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endLine" : 186,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 188,
            "snippet" : {
              "text" : "    now = datetime.datetime.now()\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n    )  # type: ignore\n    name = x509.Name(\n        [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb09e637ad69ffe0:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 288,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 286,
            "endLine" : 290,
            "snippet" : {
              "text" : "class CertStoreEntry:\n    cert: Cert\n    privatekey: rsa.RSAPrivateKey\n    chain_file: Path | None\n    chain_certs: list[Cert]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "65e8218534fdf31f:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 311,
            "startColumn" : 29,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 309,
            "endLine" : 313,
            "snippet" : {
              "text" : "    def __init__(\n        self,\n        default_privatekey: rsa.RSAPrivateKey,\n        default_ca: Cert,\n        default_chain_file: Path | None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "54a073f3c122ac2d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.serialization import pkcs12\nfrom cryptography.x509 import ExtendedKeyUsageOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95d5bad7bdf75517:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 12,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "    cn: str,\n    key_size: int,\n) -> tuple[rsa.RSAPrivateKeyWithSerialization, x509.Certificate]:\n    now = datetime.datetime.now()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6fd2e339ff354ab:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 229,
            "startColumn" : 14,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 227,
            "endLine" : 231,
            "snippet" : {
              "text" : "\ndef dummy_cert(\n    privkey: rsa.RSAPrivateKey,\n    cacert: x509.Certificate,\n    commonname: str | None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bafaad5085febee1:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 544,
            "startColumn" : 66,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 542,
            "endLine" : 546,
            "snippet" : {
              "text" : "\n\ndef load_pem_private_key(data: bytes, password: bytes | None) -> rsa.RSAPrivateKey:\n    \"\"\"\n    like cryptography's load_pem_private_key, but silently falls back to not using a password\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c7edfb6c65ea675:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/proxy/layers/quic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 79,
            "endColumn" : 96
          },
          "contextRegion" : {
            "startLine" : 65,
            "endLine" : 69,
            "snippet" : {
              "text" : "    certificate_chain: list[x509.Certificate] = field(default_factory=list)\n    \"\"\"A list of additional certificates to send to the peer.\"\"\"\n    certificate_private_key: dsa.DSAPrivateKey | ec.EllipticCurvePrivateKey | rsa.RSAPrivateKey | None = (\n        None\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d602af39236240fa:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/proxy/layers/quic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\nfrom mitmproxy import certs\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "df8d74f324f66495:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/tools/web/app.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 117,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 115,
            "endLine" : 119,
            "snippet" : {
              "text" : "        if flow.request.raw_content is not None:\n            content_length = len(flow.request.raw_content)\n            content_hash = hashlib.sha256(flow.request.raw_content).hexdigest()\n        else:\n            content_length = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5fafecd15ebd47df:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/tools/web/app.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 138,
            "startColumn" : 32,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 136,
            "endLine" : 140,
            "snippet" : {
              "text" : "            if flow.response.raw_content is not None:\n                content_length = len(flow.response.raw_content)\n                content_hash = hashlib.sha256(flow.response.raw_content).hexdigest()\n            else:\n                content_length = None\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d4bf962ab4c4a02:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "release/build.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 243,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 241,
            "endLine" : 245,
            "snippet" : {
              "text" : "            tmp.rename(IB_SETUP)\n\n        ib_setup_hash = hashlib.sha256()\n        with IB_SETUP.open(\"rb\") as fp:\n            while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eaafa919365ef69a:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 93,
            "startColumn" : 39,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 91,
            "endLine" : 95,
            "snippet" : {
              "text" : "\n    def fingerprint(self) -> bytes:\n        return self._cert.fingerprint(hashes.SHA256())\n\n    @property\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "291c4e737341db8f:1",
        "primaryLocationStartColumnFingerprint" : "30"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 224,
            "startColumn" : 60,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 222,
            "endLine" : 226,
            "snippet" : {
              "text" : "        critical=False,\n    )\n    cert = builder.sign(private_key=private_key, algorithm=hashes.SHA256())  # type: ignore\n    return private_key, cert\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "30afd00a141853c4:1",
        "primaryLocationStartColumnFingerprint" : "55"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 281,
            "startColumn" : 56,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 279,
            "endLine" : 283,
            "snippet" : {
              "text" : "        x509.SubjectAlternativeName(ss), critical=not is_valid_commonname\n    )\n    cert = builder.sign(private_key=privkey, algorithm=hashes.SHA256())  # type: ignore\n    return Cert(cert)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a276a4bedce7bbd:1",
        "primaryLocationStartColumnFingerprint" : "51"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/utils/magisk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 90,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 88,
            "endLine" : 92,
            "snippet" : {
              "text" : "def subject_hash_old(ca: x509.Certificate) -> str:\n    # Mimics the -subject_hash_old option of openssl used for android certificate names\n    full_hash = hashlib.md5(ca.subject.public_bytes()).digest()\n    sho = full_hash[0] | (full_hash[1] << 8) | (full_hash[2] << 16) | full_hash[3] << 24\n    return hex(sho)[2:]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2ec7e73c213cac7d:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/addons/serverplayback.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 205,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 203,
            "endLine" : 207,
            "snippet" : {
              "text" : "                headers.append((i, v))\n            key.append(headers)\n        return hashlib.sha256(repr(key).encode(\"utf8\", \"surrogateescape\")).digest()\n\n    def next_flow(self, flow: http.HTTPFlow) -> http.HTTPFlow | None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f592c0780820644b:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "release/build.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 216,
            "startColumn" : 13,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 214,
            "endLine" : 218,
            "snippet" : {
              "text" : "    if not IB_LICENSE.exists():\n        print(\"Decrypt InstallBuilder license...\")\n        f = cryptography.fernet.Fernet(os.environ[\"CI_BUILD_KEY\"].encode())\n        with open(IB_LICENSE.with_suffix(\".xml.enc\"), \"rb\") as infile, open(\n            IB_LICENSE, \"wb\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6e9ae9c967cda1c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Attribute](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](2)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](3)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](4)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](5)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](6)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](7)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](8)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](9)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Attribute](10)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endLine" : 186,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 188,
            "snippet" : {
              "text" : "    now = datetime.datetime.now()\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n    )  # type: ignore\n    name = x509.Name(\n        [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb09e637ad69ffe0:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/utils/magisk.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 80,
            "startColumn" : 18,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 78,
            "endLine" : 82,
            "snippet" : {
              "text" : "        path=certstore_path,\n        basename=CONF_BASENAME,\n        key_size=ctx.options.key_size,\n        passphrase=ctx.options.cert_passphrase.encode(\"utf8\")\n        if ctx.options.cert_passphrase\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/helper_tools/memoryleak2.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 81,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "if __name__ == \"__main__\":\n    store = certs.CertStore.from_store(\n        path=Path(\"~/.mitmproxy/\").expanduser(), basename=\"mitmproxy\", key_size=2048\n    )\n    store.STORE_CAP = 5\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/mitmproxy/test_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 60,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "def tstore(tdata):\n    return certs.CertStore.from_store(\n        tdata.path(\"mitmproxy/data/confdir\"), \"mitmproxy\", 2048\n    )\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/mitmproxy/test_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 62,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "class TestCertStore:\n    def test_create_explicit(self, tmpdir):\n        ca = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)\n        assert ca.get_cert(\"foo\", [])\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/mitmproxy/test_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 56,
            "startColumn" : 63,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 54,
            "endLine" : 58,
            "snippet" : {
              "text" : "        assert ca.get_cert(\"foo\", [])\n\n        ca2 = certs.CertStore.from_store(str(tmpdir), \"test\", 2048)\n        assert ca2.get_cert(\"foo\", [])\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/mitmproxy/test_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 64,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 65,
            "endLine" : 69,
            "snippet" : {
              "text" : "        cert = Path(tdata.path(\"mitmproxy/data/confdir/mitmproxy-ca.pem\")).read_bytes()\n        (tmp_path / \"mitmproxy-ca.pem\").write_bytes(cert)\n        ca = certs.CertStore.from_store(tmp_path, \"mitmproxy\", 2048)\n        assert ca.default_chain_file is None\n        assert len(ca.default_chain_certs) == 1\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 7,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/mitmproxy/test_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 64,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 70,
            "endLine" : 74,
            "snippet" : {
              "text" : "\n        (tmp_path / \"mitmproxy-ca.pem\").write_bytes(2 * cert)\n        ca = certs.CertStore.from_store(tmp_path, \"mitmproxy\", 2048)\n        assert ca.default_chain_file == (tmp_path / \"mitmproxy-ca.pem\")\n        assert len(ca.default_chain_certs) == 2\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 8,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/mitmproxy/test_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 68,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "\n    def test_overrides(self, tmp_path):\n        ca1 = certs.CertStore.from_store(tmp_path / \"ca1\", \"test\", 2048)\n        ca2 = certs.CertStore.from_store(tmp_path / \"ca2\", \"test\", 2048)\n        assert not ca1.default_ca.serial == ca2.default_ca.serial\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 9,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/mitmproxy/test_certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 113,
            "startColumn" : 68,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 111,
            "endLine" : 115,
            "snippet" : {
              "text" : "    def test_overrides(self, tmp_path):\n        ca1 = certs.CertStore.from_store(tmp_path / \"ca1\", \"test\", 2048)\n        ca2 = certs.CertStore.from_store(tmp_path / \"ca2\", \"test\", 2048)\n        assert not ca1.default_ca.serial == ca2.default_ca.serial\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 10,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/addons/tlsconfig.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 435,
            "startColumn" : 26,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 433,
            "endLine" : 437,
            "snippet" : {
              "text" : "                path=certstore_path,\n                basename=CONF_BASENAME,\n                key_size=ctx.options.key_size,\n                passphrase=ctx.options.cert_passphrase.encode(\"utf8\")\n                if ctx.options.cert_passphrase\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 123,
            "startColumn" : 35,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 121,
            "endLine" : 125,
            "snippet" : {
              "text" : "    def keyinfo(self) -> tuple[str, int]:\n        public_key = self._cert.public_key()\n        if isinstance(public_key, rsa.RSAPublicKey):\n            return \"RSA\", public_key.key_size\n        if isinstance(public_key, dsa.DSAPublicKey):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99b59004e48d1045:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 185,
            "snippet" : {
              "text" : "    now = datetime.datetime.now()\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb09e637ad69ffe0:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 183,
            "startColumn" : 19,
            "endLine" : 186,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 181,
            "endLine" : 188,
            "snippet" : {
              "text" : "    now = datetime.datetime.now()\n\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=key_size,\n    )  # type: ignore\n    name = x509.Name(\n        [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb09e637ad69ffe0:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 288,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 286,
            "endLine" : 290,
            "snippet" : {
              "text" : "class CertStoreEntry:\n    cert: Cert\n    privatekey: rsa.RSAPrivateKey\n    chain_file: Path | None\n    chain_certs: list[Cert]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "65e8218534fdf31f:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 311,
            "startColumn" : 29,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 309,
            "endLine" : 313,
            "snippet" : {
              "text" : "    def __init__(\n        self,\n        default_privatekey: rsa.RSAPrivateKey,\n        default_ca: Cert,\n        default_chain_file: Path | None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "54a073f3c122ac2d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.serialization import pkcs12\nfrom cryptography.x509 import ExtendedKeyUsageOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95d5bad7bdf75517:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 12,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "    cn: str,\n    key_size: int,\n) -> tuple[rsa.RSAPrivateKeyWithSerialization, x509.Certificate]:\n    now = datetime.datetime.now()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6fd2e339ff354ab:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 229,
            "startColumn" : 14,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 227,
            "endLine" : 231,
            "snippet" : {
              "text" : "\ndef dummy_cert(\n    privkey: rsa.RSAPrivateKey,\n    cacert: x509.Certificate,\n    commonname: str | None,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bafaad5085febee1:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 544,
            "startColumn" : 66,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 542,
            "endLine" : 546,
            "snippet" : {
              "text" : "\n\ndef load_pem_private_key(data: bytes, password: bytes | None) -> rsa.RSAPrivateKey:\n    \"\"\"\n    like cryptography's load_pem_private_key, but silently falls back to not using a password\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c7edfb6c65ea675:1",
        "primaryLocationStartColumnFingerprint" : "65"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/proxy/layers/quic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 67,
            "startColumn" : 79,
            "endColumn" : 96
          },
          "contextRegion" : {
            "startLine" : 65,
            "endLine" : 69,
            "snippet" : {
              "text" : "    certificate_chain: list[x509.Certificate] = field(default_factory=list)\n    \"\"\"A list of additional certificates to send to the peer.\"\"\"\n    certificate_private_key: dsa.DSAPrivateKey | ec.EllipticCurvePrivateKey | rsa.RSAPrivateKey | None = (\n        None\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d602af39236240fa:1",
        "primaryLocationStartColumnFingerprint" : "74"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "mitmproxy/proxy/layers/quic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import dsa\nfrom cryptography.hazmat.primitives.asymmetric import ec\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\nfrom mitmproxy import certs\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "df8d74f324f66495:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "release/build.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 216,
            "startColumn" : 13,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 214,
            "endLine" : 218,
            "snippet" : {
              "text" : "    if not IB_LICENSE.exists():\n        print(\"Decrypt InstallBuilder license...\")\n        f = cryptography.fernet.Fernet(os.environ[\"CI_BUILD_KEY\"].encode())\n        with open(IB_LICENSE.with_suffix(\".xml.enc\"), \"rb\") as infile, open(\n            IB_LICENSE, \"wb\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6e9ae9c967cda1c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:mitmproxy/mitmproxy/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}