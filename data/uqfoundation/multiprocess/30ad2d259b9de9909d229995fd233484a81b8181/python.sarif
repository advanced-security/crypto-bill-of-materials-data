{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "py3.12/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "py3.8/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "pypy3.9/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "py3.9/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "pypy3.8/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "py3.10/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "py3.11/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "py3.13/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "pypy3.10/multiprocess/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 872,
            "startColumn" : 19,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 870,
            "endLine" : 874,
            "snippet" : {
              "text" : "    \"\"\"\n    import hmac\n    digest_name = _get_digest_name_and_payload(message)[0]\n    # The MAC protects the entire message: digest header and payload.\n    if not digest_name:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de89dacab626ab5a:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 878,
            "startColumn" : 47,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 876,
            "endLine" : 880,
            "snippet" : {
              "text" : "        # Generate a legacy non-prefixed HMAC-MD5 reply.\n        try:\n            return hmac.new(authkey, message, 'md5').digest()\n        except ValueError:\n            # HMAC-MD5 is not available (FIPS mode?), fall back to\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb625599cd4c304b:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 883,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 881,
            "endLine" : 885,
            "snippet" : {
              "text" : "            # HMAC-SHA2-256 modern protocol. The legacy server probably\n            # doesn't support it and will reject us anyways. :shrug:\n            digest_name = 'sha256'\n    # Modern protocol, indicate the digest used in the reply.\n    response = hmac.new(authkey, message, digest_name).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2066084a672c898f:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 901,
            "startColumn" : 42,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 899,
            "endLine" : 903,
            "snippet" : {
              "text" : "    import hmac\n    response_digest, response_mac = _get_digest_name_and_payload(response)\n    response_digest = response_digest or 'md5'\n    try:\n        expected = hmac.new(authkey, message, response_digest).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb4029077cfe9574:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.11/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.11/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 774,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 772,
            "endLine" : 776,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 889,
            "startColumn" : 19,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 887,
            "endLine" : 891,
            "snippet" : {
              "text" : "    \"\"\"\n    import hmac\n    digest_name = _get_digest_name_and_payload(message)[0]\n    # The MAC protects the entire message: digest header and payload.\n    if not digest_name:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de89dacab626ab5a:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 895,
            "startColumn" : 47,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 893,
            "endLine" : 897,
            "snippet" : {
              "text" : "        # Generate a legacy non-prefixed HMAC-MD5 reply.\n        try:\n            return hmac.new(authkey, message, 'md5').digest()\n        except ValueError:\n            # HMAC-MD5 is not available (FIPS mode?), fall back to\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb625599cd4c304b:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 900,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 898,
            "endLine" : 902,
            "snippet" : {
              "text" : "            # HMAC-SHA2-256 modern protocol. The legacy server probably\n            # doesn't support it and will reject us anyways. :shrug:\n            digest_name = 'sha256'\n    # Modern protocol, indicate the digest used in the reply.\n    response = hmac.new(authkey, message, digest_name).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2066084a672c898f:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 918,
            "startColumn" : 42,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 916,
            "endLine" : 920,
            "snippet" : {
              "text" : "    import hmac\n    response_digest, response_mac = _get_digest_name_and_payload(response)\n    response_digest = response_digest or 'md5'\n    try:\n        expected = hmac.new(authkey, message, response_digest).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb4029077cfe9574:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 872,
            "startColumn" : 19,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 870,
            "endLine" : 874,
            "snippet" : {
              "text" : "    \"\"\"\n    import hmac\n    digest_name = _get_digest_name_and_payload(message)[0]\n    # The MAC protects the entire message: digest header and payload.\n    if not digest_name:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de89dacab626ab5a:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 878,
            "startColumn" : 47,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 876,
            "endLine" : 880,
            "snippet" : {
              "text" : "        # Generate a legacy non-prefixed HMAC-MD5 reply.\n        try:\n            return hmac.new(authkey, message, 'md5').digest()\n        except ValueError:\n            # HMAC-MD5 is not available (FIPS mode?), fall back to\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb625599cd4c304b:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 883,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 881,
            "endLine" : 885,
            "snippet" : {
              "text" : "            # HMAC-SHA2-256 modern protocol. The legacy server probably\n            # doesn't support it and will reject us anyways. :shrug:\n            digest_name = 'sha256'\n    # Modern protocol, indicate the digest used in the reply.\n    response = hmac.new(authkey, message, digest_name).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2066084a672c898f:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.12/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 901,
            "startColumn" : 42,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 899,
            "endLine" : 903,
            "snippet" : {
              "text" : "    import hmac\n    response_digest, response_mac = _get_digest_name_and_payload(response)\n    response_digest = response_digest or 'md5'\n    try:\n        expected = hmac.new(authkey, message, response_digest).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb4029077cfe9574:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.9/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.8/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.11/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.11/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 774,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 772,
            "endLine" : 776,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 889,
            "startColumn" : 19,
            "endColumn" : 59
          },
          "contextRegion" : {
            "startLine" : 887,
            "endLine" : 891,
            "snippet" : {
              "text" : "    \"\"\"\n    import hmac\n    digest_name = _get_digest_name_and_payload(message)[0]\n    # The MAC protects the entire message: digest header and payload.\n    if not digest_name:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de89dacab626ab5a:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 895,
            "startColumn" : 47,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 893,
            "endLine" : 897,
            "snippet" : {
              "text" : "        # Generate a legacy non-prefixed HMAC-MD5 reply.\n        try:\n            return hmac.new(authkey, message, 'md5').digest()\n        except ValueError:\n            # HMAC-MD5 is not available (FIPS mode?), fall back to\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fb625599cd4c304b:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 900,
            "startColumn" : 27,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 898,
            "endLine" : 902,
            "snippet" : {
              "text" : "            # HMAC-SHA2-256 modern protocol. The legacy server probably\n            # doesn't support it and will reject us anyways. :shrug:\n            digest_name = 'sha256'\n    # Modern protocol, indicate the digest used in the reply.\n    response = hmac.new(authkey, message, digest_name).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2066084a672c898f:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "py3.13/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 918,
            "startColumn" : 42,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 916,
            "endLine" : 920,
            "snippet" : {
              "text" : "    import hmac\n    response_digest, response_mac = _get_digest_name_and_payload(response)\n    response_digest = response_digest or 'md5'\n    try:\n        expected = hmac.new(authkey, message, response_digest).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb4029077cfe9574:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 742,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 740,
            "endLine" : 744,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypy3.10/multiprocess/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 758,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 756,
            "endLine" : 760,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:uqfoundation/multiprocess/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}