{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "src/zstd/tests/DEPRECATED-test-zstd-speed.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "src/test/rgw/bucket_notification/api.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/dashboard/awsauth.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "src/spdk/ocf/tests/functional/pyocf/types/data.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/telemetry/module.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/cephadm/module.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/crash/module.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/dashboard/plugins/motd.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "qa/tasks/cephfs/mount.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "src/test/objectstore/allocsim/ops_scraper.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "src/arrow/cpp/build-support/fuzzing/pack_corpus.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "src/powerdns/pdns-backend-rgw.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/cephadm/schedule.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/cephadm/serve.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "src/pybind/mgr/volumes/fs/operations/versions/subvolume_base.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "src/zstd/tests/test-zstd-versions.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "src/test/rgw/bucket_notification/test_bn.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "qa/tasks/mgr/dashboard/test_rgw.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "qa/tasks/cephfs/test_volumes.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "src/spdk/ocf/tests/functional/pyocf/types/volume.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/DEPRECATED-test-zstd-speed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 221,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 219,
            "endLine" : 223,
            "snippet" : {
              "text" : "                'mv programs/zstd programs/zstd_clang && ' +\n                'make -C programs clean zstd zstd32 MOREFLAGS=\"-DZSTD_GIT_COMMIT=%s\"' % version)\n    md5_zstd = hashfile(hashlib.md5(), clone_path + '/programs/zstd')\n    md5_zstd32 = hashfile(hashlib.md5(), clone_path + '/programs/zstd32')\n    md5_zstd_clang = hashfile(hashlib.md5(), clone_path + '/programs/zstd_clang')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cfa18ed98c18bdc3:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/DEPRECATED-test-zstd-speed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 222,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 220,
            "endLine" : 224,
            "snippet" : {
              "text" : "                'make -C programs clean zstd zstd32 MOREFLAGS=\"-DZSTD_GIT_COMMIT=%s\"' % version)\n    md5_zstd = hashfile(hashlib.md5(), clone_path + '/programs/zstd')\n    md5_zstd32 = hashfile(hashlib.md5(), clone_path + '/programs/zstd32')\n    md5_zstd_clang = hashfile(hashlib.md5(), clone_path + '/programs/zstd_clang')\n    print(\"md5(zstd)=%s\\nmd5(zstd32)=%s\\nmd5(zstd_clang)=%s\" % (md5_zstd, md5_zstd32, md5_zstd_clang))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1dbf0de9e03eb3ca:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/DEPRECATED-test-zstd-speed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 223,
            "startColumn" : 31,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 221,
            "endLine" : 225,
            "snippet" : {
              "text" : "    md5_zstd = hashfile(hashlib.md5(), clone_path + '/programs/zstd')\n    md5_zstd32 = hashfile(hashlib.md5(), clone_path + '/programs/zstd32')\n    md5_zstd_clang = hashfile(hashlib.md5(), clone_path + '/programs/zstd_clang')\n    print(\"md5(zstd)=%s\\nmd5(zstd32)=%s\\nmd5(zstd_clang)=%s\" % (md5_zstd, md5_zstd32, md5_zstd_clang))\n    print(\"gcc_version=%s clang_version=%s\" % (gcc_version, clang_version))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f56133179b64389f:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 43,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "    signature = base64.b64encode(hmac.new(conn.aws_secret_access_key.encode('utf-8'),\n                                          string_to_sign.encode('utf-8'),\n                                          hashlib.sha1).digest()).decode('ascii')\n    headers = {'Authorization': 'AWS '+conn.aws_access_key_id+':'+signature,\n               'Date': string_date,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e446d09f7149844a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 113,
            "startColumn" : 38,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 111,
            "endLine" : 115,
            "snippet" : {
              "text" : "        signature = base64.b64encode(hmac.new(self.conn.aws_secret_access_key.encode('utf-8'),\n                                     string_to_sign.encode('utf-8'),\n                                     hashlib.sha1).digest()).decode('ascii')\n        headers = {'Authorization': 'AWS '+self.conn.aws_access_key_id+':'+signature,\n                   'Date': string_date,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38bcac6adf7ead5e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 38,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "        signature = base64.b64encode(hmac.new(self.conn.aws_secret_access_key.encode('utf-8'),\n                                     string_to_sign.encode('utf-8'),\n                                     hashlib.sha1).digest()).decode('ascii')\n        headers = {'Authorization': 'AWS '+self.conn.aws_access_key_id+':'+signature,\n                   'Date': string_date,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38bcac6adf7ead5e:2",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/awsauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 42,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 83,
            "snippet" : {
              "text" : "        key = self.secret_key.encode('utf-8')\n        msg = canonical_string.encode('utf-8')\n        h = hmac.new(key, msg, digestmod=sha)\n        return encodestring(h.digest()).strip()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3ce60b06e374b661:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/awsauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from base64 import encodebytes as encodestring\nfrom email.utils import formatdate\nfrom hashlib import sha1 as sha\nfrom urllib.parse import unquote, urlparse\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9911198c87ef5e3a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/awsauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 29,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from base64 import encodebytes as encodestring\nfrom email.utils import formatdate\nfrom hashlib import sha1 as sha\nfrom urllib.parse import unquote, urlparse\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9911198c87ef5e3a:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/spdk/ocf/tests/functional/pyocf/types/data.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 19,
            "endLine" : 23,
            "snippet" : {
              "text" : ")\nfrom enum import IntEnum\nfrom hashlib import md5\nimport weakref\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "182b3aec5889626d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/telemetry/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 471,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 469,
            "endLine" : 473,
            "snippet" : {
              "text" : "\n        (etype, eid) = entity_name.split('.', 1)\n        m = hashlib.sha1()\n        salt = ''\n        if self.salt is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "896633450cdfc67c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/telemetry/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 779,
            "startColumn" : 17,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 777,
            "endLine" : 781,
            "snippet" : {
              "text" : "            # entity_name might have more than one '.', beware\n            (etype, eid) = c.get('entity_name', '').split('.', 1)\n            m = hashlib.sha1()\n            assert self.salt\n            m.update(self.salt.encode('utf-8'))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cceef9bf0a35822:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 684,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 682,
            "endLine" : 686,
            "snippet" : {
              "text" : "    def _get_cephadm_binary_path(self) -> str:\n        import hashlib\n        m = hashlib.sha256()\n        m.update(self._cephadm)\n        return f'/var/lib/ceph/{self._cluster_fsid}/cephadm.{m.hexdigest()}'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45ca82a1e710f182:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/crash/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 209,
            "startColumn" : 15,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 207,
            "endLine" : 211,
            "snippet" : {
              "text" : "\n    def calc_sig(self, bt: List[str], assert_msg: Optional[str]) -> str:\n        sig = hashlib.sha256()\n        for func in self.sanitize_backtrace(bt):\n            sig.update(func.encode())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0fe247be9da1cd2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/plugins/motd.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "            value: str = json.dumps({\n                'message': message,\n                'md5': hashlib.md5(message.encode()).hexdigest(),\n                'severity': severity.value,\n                'expires': expires\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "78dd12b390d570a7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "qa/tasks/cephfs/mount.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 1620,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1618,
            "endLine" : 1622,
            "snippet" : {
              "text" : "        checksum_text = self.run_shell(cmd).stdout.getvalue().strip()\n        checksum_sorted = sorted(checksum_text.split('\\n'), key=lambda v: v.split()[1])\n        return hashlib.md5(('\\n'.join(checksum_sorted)).encode('utf-8')).hexdigest()\n\n    def validate_subvol_options(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41b01a0d2d6675d0:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/objectstore/allocsim/ops_scraper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 110,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 108,
            "endLine" : 112,
            "snippet" : {
              "text" : "    if not Env.args().nohash :\n        if len(object_name_split) < 2:\n            object_name = hashlib.md5(object_name.encode()).hexdigest()\n        else:\n            object_name_split[-2] = hashlib.md5(object_name_split[-2].encode()).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eed3bc937e20b345:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/objectstore/allocsim/ops_scraper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 37,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "            object_name = hashlib.md5(object_name.encode()).hexdigest()\n        else:\n            object_name_split[-2] = hashlib.md5(object_name_split[-2].encode()).hexdigest()\n            object_name = ':'.join(object_name_split)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3ca070f687bf3f2f:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/arrow/cpp/build-support/fuzzing/pack_corpus.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 19,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        with child.open('rb') as f:\n            data = f.read()\n        arcname = hashlib.sha1(data).hexdigest()\n        if arcname in seen:\n            raise ValueError(\"Duplicate hash: {0} (in file {1})\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6bbe6f5dc85e1649:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/powerdns/pdns-backend-rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 95,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "\n    sign += \"%s\\n/%s/%s\" % (date, config['rgw']['admin_entry'], uri)\n    h = hmac.new(config['rgw']['secret_key'].encode('utf-8'), sign.encode('utf-8'), digestmod=sha)\n    return base64.encodestring(h.digest()).strip()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c464df9c508458d7:1",
        "primaryLocationStartColumnFingerprint" : "90"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/powerdns/pdns-backend-rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "from ConfigParser import SafeConfigParser, NoSectionError\nfrom flask import abort, Flask, request, Response\nfrom hashlib import sha1 as sha\nfrom time import gmtime, strftime\nfrom urllib.parse import urlparse\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a66d3933b3f840bc:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/powerdns/pdns-backend-rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 29,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "from ConfigParser import SafeConfigParser, NoSectionError\nfrom flask import abort, Flask, request, Response\nfrom hashlib import sha1 as sha\nfrom time import gmtime, strftime\nfrom urllib.parse import urlparse\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a66d3933b3f840bc:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/schedule.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 464,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 462,
            "endLine" : 466,
            "snippet" : {
              "text" : "        # This makes shuffling deterministic for the same service name.\n        seed = int(\n            hashlib.sha1(self.spec.service_name().encode('utf-8')).hexdigest(),\n            16\n        ) % (2 ** 32)  # truncate result to 32 bits\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e49768ad1a8d629c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/serve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 1167,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1165,
            "endLine" : 1169,
            "snippet" : {
              "text" : "        # ceph.conf\n        config = self.mgr.get_minimal_ceph_conf().encode('utf-8')\n        config_digest = ''.join('%02x' % c for c in hashlib.sha256(config).digest())\n        cluster_cfg_dir = f'/var/lib/ceph/{self.mgr._cluster_fsid}/config'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1dde494a826600c9:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/serve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 1202,
            "startColumn" : 54,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1200,
            "endLine" : 1204,
            "snippet" : {
              "text" : "                    self.log.warning(f'unable to fetch keyring for {ks.entity}')\n                    continue\n                digest = ''.join('%02x' % c for c in hashlib.sha256(\n                    keyring.encode('utf-8')).digest())\n                ha = HostAssignment(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2851f075f332416c:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 25,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "\n    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c694d81c35e11be:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 25,
            "endLine" : 34,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 36,
            "snippet" : {
              "text" : "\n    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n        root_builder = x509.CertificateBuilder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c694d81c35e11be:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 50,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "\n        self.root_cert = root_builder.sign(\n            private_key=self.root_key, algorithm=hashes.SHA256(), backend=default_backend()\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7846a343fa75a22b:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 107,
            "startColumn" : 39,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 105,
            "endLine" : 109,
            "snippet" : {
              "text" : "\n        cert = builder.sign(private_key=self.root_key,\n                            algorithm=hashes.SHA256(), backend=default_backend())\n        cert_str = cert.public_bytes(encoding=serialization.Encoding.PEM).decode('utf-8')\n        key_str = private_key.private_bytes(encoding=serialization.Encoding.PEM,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92888279e276ae36:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 23,
            "endLine" : 78,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 80,
            "snippet" : {
              "text" : "            have_ip = False\n\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da160455fe08047:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "            have_ip = False\n\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da160455fe08047:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "from cryptography import x509\nfrom cryptography.x509.oid import NameOID\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.backends import default_backend\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99c306167a440059:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/volumes/fs/operations/versions/subvolume_base.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 80,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 78,
            "endLine" : 82,
            "snippet" : {
              "text" : "    def legacy_config_path(self):\n        try:\n            m = hashlib.md5(self.base_path)\n        except ValueError:\n            try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d95645a8411856a:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/volumes/fs/operations/versions/subvolume_base.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "        except ValueError:\n            try:\n                m = hashlib.md5(self.base_path, usedforsecurity=False) # type: ignore\n            except TypeError:\n                raise VolumeException(-errno.EINVAL,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "48f294b26f89bdec:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/test-zstd-versions.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 126,
            "endLine" : 130,
            "snippet" : {
              "text" : "def sha1_of_file(filepath):\n    with open(filepath, 'rb') as f:\n        return hashlib.sha1(f.read()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bfa231436e32b6a6:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1528,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1526,
            "endLine" : 1530,
            "snippet" : {
              "text" : "            key = bucket.new_key(str(i))\n            content = str(os.urandom(1024*1024))\n            etag = hashlib.md5(content.encode()).hexdigest()\n            etags.append(etag)\n            thr = threading.Thread(target = set_contents_from_string, args=(key, content,))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "910fa34d8439a6ae:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2218,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 2216,
            "endLine" : 2220,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    # modify permissions to ensure that the broker user can access them\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f087367995bf24e3:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2226,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 2224,
            "endLine" : 2228,
            "snippet" : {
              "text" : "    KEYFILE = os.path.join(tempdir, 'server_key.pem')\n\n    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5123fb29d7121e09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2226,
            "startColumn" : 16,
            "endLine" : 2230,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2224,
            "endLine" : 2232,
            "snippet" : {
              "text" : "    KEYFILE = os.path.join(tempdir, 'server_key.pem')\n\n    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n    subject = issuer = x509.Name([\n        x509.NameAttribute(NameOID.COUNTRY_NAME, u\"UK\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5123fb29d7121e09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2252,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2250,
            "endLine" : 2254,
            "snippet" : {
              "text" : "    ).add_extension(\n        x509.BasicConstraints(ca=True, path_length=None), critical=True\n    ).sign(root_key, hashes.SHA256(), default_backend())\n    with open(CACERTFILE, \"wb\") as f:\n        f.write(root_cert.public_bytes(serialization.Encoding.PEM))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "544d5fc0448c676e:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2257,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 2255,
            "endLine" : 2259,
            "snippet" : {
              "text" : "\n    # Now we want to generate a cert from that root\n    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc3d350954feaad6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2257,
            "startColumn" : 16,
            "endLine" : 2261,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2255,
            "endLine" : 2263,
            "snippet" : {
              "text" : "\n    # Now we want to generate a cert from that root\n    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend(),\n    )\n    with open(KEYFILE, \"wb\") as f:\n        f.write(cert_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc3d350954feaad6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2289,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2287,
            "endLine" : 2291,
            "snippet" : {
              "text" : "        x509.SubjectAlternativeName([x509.DNSName(u\"localhost\")]),\n        critical=False,\n    ).sign(root_key, hashes.SHA256(), default_backend())\n    # Write our certificate out to disk.\n    with open(CERTFILE, \"wb\") as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "144c12573be6580d:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3443,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 3441,
            "endLine" : 3445,
            "snippet" : {
              "text" : "        key = bucket.new_key(str(i))\n        content = str(os.urandom(1024*1024))\n        etag = hashlib.md5(content.encode()).hexdigest()\n        etags.append(etag)\n        thr = threading.Thread(target = set_contents_from_string, args=(key, content,))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "910fa34d8439a6ae:2",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3496,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 3494,
            "endLine" : 3498,
            "snippet" : {
              "text" : "        key = bucket.new_key(str(i))\n        content = str(os.urandom(1024*1024))\n        etag = hashlib.md5(content.encode()).hexdigest()\n        etags.append(etag)\n        thr = threading.Thread(target = set_contents_from_string, args=(key, content,))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "910fa34d8439a6ae:3",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "qa/tasks/mgr/dashboard/test_rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 51,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.hashes import SHA1\nfrom cryptography.hazmat.primitives.twofactor.totp import TOTP\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e8a63c99b00296f6:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "qa/tasks/cephfs/test_volumes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "import uuid\nimport unittest\nfrom hashlib import md5\nfrom textwrap import dedent\nfrom io import StringIO\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b8b71c5f1ec38f8d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/spdk/ocf/tests/functional/pyocf/types/volume.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "    string_at,\n)\nfrom hashlib import md5\nimport weakref\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbd1253d71e4c2fe:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 25,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "\n    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c694d81c35e11be:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 25,
            "endLine" : 34,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 36,
            "snippet" : {
              "text" : "\n    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n        root_builder = x509.CertificateBuilder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c694d81c35e11be:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 23,
            "endLine" : 78,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 80,
            "snippet" : {
              "text" : "            have_ip = False\n\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da160455fe08047:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "            have_ip = False\n\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da160455fe08047:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "from cryptography import x509\nfrom cryptography.x509.oid import NameOID\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.backends import default_backend\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99c306167a440059:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2218,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 2216,
            "endLine" : 2220,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    # modify permissions to ensure that the broker user can access them\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f087367995bf24e3:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2226,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 2224,
            "endLine" : 2228,
            "snippet" : {
              "text" : "    KEYFILE = os.path.join(tempdir, 'server_key.pem')\n\n    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5123fb29d7121e09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2226,
            "startColumn" : 16,
            "endLine" : 2230,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2224,
            "endLine" : 2232,
            "snippet" : {
              "text" : "    KEYFILE = os.path.join(tempdir, 'server_key.pem')\n\n    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n    subject = issuer = x509.Name([\n        x509.NameAttribute(NameOID.COUNTRY_NAME, u\"UK\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5123fb29d7121e09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2257,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 2255,
            "endLine" : 2259,
            "snippet" : {
              "text" : "\n    # Now we want to generate a cert from that root\n    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc3d350954feaad6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2257,
            "startColumn" : 16,
            "endLine" : 2261,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2255,
            "endLine" : 2263,
            "snippet" : {
              "text" : "\n    # Now we want to generate a cert from that root\n    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend(),\n    )\n    with open(KEYFILE, \"wb\") as f:\n        f.write(cert_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc3d350954feaad6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/DEPRECATED-test-zstd-speed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 221,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 219,
            "endLine" : 223,
            "snippet" : {
              "text" : "                'mv programs/zstd programs/zstd_clang && ' +\n                'make -C programs clean zstd zstd32 MOREFLAGS=\"-DZSTD_GIT_COMMIT=%s\"' % version)\n    md5_zstd = hashfile(hashlib.md5(), clone_path + '/programs/zstd')\n    md5_zstd32 = hashfile(hashlib.md5(), clone_path + '/programs/zstd32')\n    md5_zstd_clang = hashfile(hashlib.md5(), clone_path + '/programs/zstd_clang')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cfa18ed98c18bdc3:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/DEPRECATED-test-zstd-speed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 222,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 220,
            "endLine" : 224,
            "snippet" : {
              "text" : "                'make -C programs clean zstd zstd32 MOREFLAGS=\"-DZSTD_GIT_COMMIT=%s\"' % version)\n    md5_zstd = hashfile(hashlib.md5(), clone_path + '/programs/zstd')\n    md5_zstd32 = hashfile(hashlib.md5(), clone_path + '/programs/zstd32')\n    md5_zstd_clang = hashfile(hashlib.md5(), clone_path + '/programs/zstd_clang')\n    print(\"md5(zstd)=%s\\nmd5(zstd32)=%s\\nmd5(zstd_clang)=%s\" % (md5_zstd, md5_zstd32, md5_zstd_clang))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1dbf0de9e03eb3ca:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/DEPRECATED-test-zstd-speed.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 223,
            "startColumn" : 31,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 221,
            "endLine" : 225,
            "snippet" : {
              "text" : "    md5_zstd = hashfile(hashlib.md5(), clone_path + '/programs/zstd')\n    md5_zstd32 = hashfile(hashlib.md5(), clone_path + '/programs/zstd32')\n    md5_zstd_clang = hashfile(hashlib.md5(), clone_path + '/programs/zstd_clang')\n    print(\"md5(zstd)=%s\\nmd5(zstd32)=%s\\nmd5(zstd_clang)=%s\" % (md5_zstd, md5_zstd32, md5_zstd_clang))\n    print(\"gcc_version=%s clang_version=%s\" % (gcc_version, clang_version))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f56133179b64389f:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 43,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "    signature = base64.b64encode(hmac.new(conn.aws_secret_access_key.encode('utf-8'),\n                                          string_to_sign.encode('utf-8'),\n                                          hashlib.sha1).digest()).decode('ascii')\n    headers = {'Authorization': 'AWS '+conn.aws_access_key_id+':'+signature,\n               'Date': string_date,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e446d09f7149844a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 113,
            "startColumn" : 38,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 111,
            "endLine" : 115,
            "snippet" : {
              "text" : "        signature = base64.b64encode(hmac.new(self.conn.aws_secret_access_key.encode('utf-8'),\n                                     string_to_sign.encode('utf-8'),\n                                     hashlib.sha1).digest()).decode('ascii')\n        headers = {'Authorization': 'AWS '+self.conn.aws_access_key_id+':'+signature,\n                   'Date': string_date,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38bcac6adf7ead5e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 162,
            "startColumn" : 38,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 160,
            "endLine" : 164,
            "snippet" : {
              "text" : "        signature = base64.b64encode(hmac.new(self.conn.aws_secret_access_key.encode('utf-8'),\n                                     string_to_sign.encode('utf-8'),\n                                     hashlib.sha1).digest()).decode('ascii')\n        headers = {'Authorization': 'AWS '+self.conn.aws_access_key_id+':'+signature,\n                   'Date': string_date,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38bcac6adf7ead5e:2",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/awsauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 42,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 83,
            "snippet" : {
              "text" : "        key = self.secret_key.encode('utf-8')\n        msg = canonical_string.encode('utf-8')\n        h = hmac.new(key, msg, digestmod=sha)\n        return encodestring(h.digest()).strip()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3ce60b06e374b661:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/awsauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from base64 import encodebytes as encodestring\nfrom email.utils import formatdate\nfrom hashlib import sha1 as sha\nfrom urllib.parse import unquote, urlparse\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9911198c87ef5e3a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/awsauth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 29,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from base64 import encodebytes as encodestring\nfrom email.utils import formatdate\nfrom hashlib import sha1 as sha\nfrom urllib.parse import unquote, urlparse\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9911198c87ef5e3a:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/spdk/ocf/tests/functional/pyocf/types/data.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 21,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 19,
            "endLine" : 23,
            "snippet" : {
              "text" : ")\nfrom enum import IntEnum\nfrom hashlib import md5\nimport weakref\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "182b3aec5889626d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/telemetry/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 471,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 469,
            "endLine" : 473,
            "snippet" : {
              "text" : "\n        (etype, eid) = entity_name.split('.', 1)\n        m = hashlib.sha1()\n        salt = ''\n        if self.salt is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "896633450cdfc67c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/telemetry/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 779,
            "startColumn" : 17,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 777,
            "endLine" : 781,
            "snippet" : {
              "text" : "            # entity_name might have more than one '.', beware\n            (etype, eid) = c.get('entity_name', '').split('.', 1)\n            m = hashlib.sha1()\n            assert self.salt\n            m.update(self.salt.encode('utf-8'))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5cceef9bf0a35822:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 684,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 682,
            "endLine" : 686,
            "snippet" : {
              "text" : "    def _get_cephadm_binary_path(self) -> str:\n        import hashlib\n        m = hashlib.sha256()\n        m.update(self._cephadm)\n        return f'/var/lib/ceph/{self._cluster_fsid}/cephadm.{m.hexdigest()}'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45ca82a1e710f182:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/crash/module.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 209,
            "startColumn" : 15,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 207,
            "endLine" : 211,
            "snippet" : {
              "text" : "\n    def calc_sig(self, bt: List[str], assert_msg: Optional[str]) -> str:\n        sig = hashlib.sha256()\n        for func in self.sanitize_backtrace(bt):\n            sig.update(func.encode())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e0fe247be9da1cd2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/dashboard/plugins/motd.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "            value: str = json.dumps({\n                'message': message,\n                'md5': hashlib.md5(message.encode()).hexdigest(),\n                'severity': severity.value,\n                'expires': expires\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "78dd12b390d570a7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "qa/tasks/cephfs/mount.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 1620,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1618,
            "endLine" : 1622,
            "snippet" : {
              "text" : "        checksum_text = self.run_shell(cmd).stdout.getvalue().strip()\n        checksum_sorted = sorted(checksum_text.split('\\n'), key=lambda v: v.split()[1])\n        return hashlib.md5(('\\n'.join(checksum_sorted)).encode('utf-8')).hexdigest()\n\n    def validate_subvol_options(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41b01a0d2d6675d0:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/objectstore/allocsim/ops_scraper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 110,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 108,
            "endLine" : 112,
            "snippet" : {
              "text" : "    if not Env.args().nohash :\n        if len(object_name_split) < 2:\n            object_name = hashlib.md5(object_name.encode()).hexdigest()\n        else:\n            object_name_split[-2] = hashlib.md5(object_name_split[-2].encode()).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eed3bc937e20b345:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/objectstore/allocsim/ops_scraper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 37,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "            object_name = hashlib.md5(object_name.encode()).hexdigest()\n        else:\n            object_name_split[-2] = hashlib.md5(object_name_split[-2].encode()).hexdigest()\n            object_name = ':'.join(object_name_split)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3ca070f687bf3f2f:1",
        "primaryLocationStartColumnFingerprint" : "24"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/arrow/cpp/build-support/fuzzing/pack_corpus.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 19,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        with child.open('rb') as f:\n            data = f.read()\n        arcname = hashlib.sha1(data).hexdigest()\n        if arcname in seen:\n            raise ValueError(\"Duplicate hash: {0} (in file {1})\"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6bbe6f5dc85e1649:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/powerdns/pdns-backend-rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 84,
            "startColumn" : 95,
            "endColumn" : 98
          },
          "contextRegion" : {
            "startLine" : 82,
            "endLine" : 86,
            "snippet" : {
              "text" : "\n    sign += \"%s\\n/%s/%s\" % (date, config['rgw']['admin_entry'], uri)\n    h = hmac.new(config['rgw']['secret_key'].encode('utf-8'), sign.encode('utf-8'), digestmod=sha)\n    return base64.encodestring(h.digest()).strip()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c464df9c508458d7:1",
        "primaryLocationStartColumnFingerprint" : "90"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/powerdns/pdns-backend-rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "from ConfigParser import SafeConfigParser, NoSectionError\nfrom flask import abort, Flask, request, Response\nfrom hashlib import sha1 as sha\nfrom time import gmtime, strftime\nfrom urllib.parse import urlparse\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a66d3933b3f840bc:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/powerdns/pdns-backend-rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 29,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "from ConfigParser import SafeConfigParser, NoSectionError\nfrom flask import abort, Flask, request, Response\nfrom hashlib import sha1 as sha\nfrom time import gmtime, strftime\nfrom urllib.parse import urlparse\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a66d3933b3f840bc:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/schedule.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 464,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 462,
            "endLine" : 466,
            "snippet" : {
              "text" : "        # This makes shuffling deterministic for the same service name.\n        seed = int(\n            hashlib.sha1(self.spec.service_name().encode('utf-8')).hexdigest(),\n            16\n        ) % (2 ** 32)  # truncate result to 32 bits\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e49768ad1a8d629c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/serve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 1167,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 1165,
            "endLine" : 1169,
            "snippet" : {
              "text" : "        # ceph.conf\n        config = self.mgr.get_minimal_ceph_conf().encode('utf-8')\n        config_digest = ''.join('%02x' % c for c in hashlib.sha256(config).digest())\n        cluster_cfg_dir = f'/var/lib/ceph/{self.mgr._cluster_fsid}/config'\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1dde494a826600c9:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/serve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 1202,
            "startColumn" : 54,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1200,
            "endLine" : 1204,
            "snippet" : {
              "text" : "                    self.log.warning(f'unable to fetch keyring for {ks.entity}')\n                    continue\n                digest = ''.join('%02x' % c for c in hashlib.sha256(\n                    keyring.encode('utf-8')).digest())\n                ha = HostAssignment(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2851f075f332416c:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 50,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "\n        self.root_cert = root_builder.sign(\n            private_key=self.root_key, algorithm=hashes.SHA256(), backend=default_backend()\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7846a343fa75a22b:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 107,
            "startColumn" : 39,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 105,
            "endLine" : 109,
            "snippet" : {
              "text" : "\n        cert = builder.sign(private_key=self.root_key,\n                            algorithm=hashes.SHA256(), backend=default_backend())\n        cert_str = cert.public_bytes(encoding=serialization.Encoding.PEM).decode('utf-8')\n        key_str = private_key.private_bytes(encoding=serialization.Encoding.PEM,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92888279e276ae36:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/volumes/fs/operations/versions/subvolume_base.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 80,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 78,
            "endLine" : 82,
            "snippet" : {
              "text" : "    def legacy_config_path(self):\n        try:\n            m = hashlib.md5(self.base_path)\n        except ValueError:\n            try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d95645a8411856a:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/volumes/fs/operations/versions/subvolume_base.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 21,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "        except ValueError:\n            try:\n                m = hashlib.md5(self.base_path, usedforsecurity=False) # type: ignore\n            except TypeError:\n                raise VolumeException(-errno.EINVAL,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "48f294b26f89bdec:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/zstd/tests/test-zstd-versions.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 126,
            "endLine" : 130,
            "snippet" : {
              "text" : "def sha1_of_file(filepath):\n    with open(filepath, 'rb') as f:\n        return hashlib.sha1(f.read()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bfa231436e32b6a6:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 1528,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1526,
            "endLine" : 1530,
            "snippet" : {
              "text" : "            key = bucket.new_key(str(i))\n            content = str(os.urandom(1024*1024))\n            etag = hashlib.md5(content.encode()).hexdigest()\n            etags.append(etag)\n            thr = threading.Thread(target = set_contents_from_string, args=(key, content,))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "910fa34d8439a6ae:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2252,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2250,
            "endLine" : 2254,
            "snippet" : {
              "text" : "    ).add_extension(\n        x509.BasicConstraints(ca=True, path_length=None), critical=True\n    ).sign(root_key, hashes.SHA256(), default_backend())\n    with open(CACERTFILE, \"wb\") as f:\n        f.write(root_cert.public_bytes(serialization.Encoding.PEM))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "544d5fc0448c676e:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2289,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 2287,
            "endLine" : 2291,
            "snippet" : {
              "text" : "        x509.SubjectAlternativeName([x509.DNSName(u\"localhost\")]),\n        critical=False,\n    ).sign(root_key, hashes.SHA256(), default_backend())\n    # Write our certificate out to disk.\n    with open(CERTFILE, \"wb\") as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "144c12573be6580d:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3443,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 3441,
            "endLine" : 3445,
            "snippet" : {
              "text" : "        key = bucket.new_key(str(i))\n        content = str(os.urandom(1024*1024))\n        etag = hashlib.md5(content.encode()).hexdigest()\n        etags.append(etag)\n        thr = threading.Thread(target = set_contents_from_string, args=(key, content,))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "910fa34d8439a6ae:2",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3496,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 3494,
            "endLine" : 3498,
            "snippet" : {
              "text" : "        key = bucket.new_key(str(i))\n        content = str(os.urandom(1024*1024))\n        etag = hashlib.md5(content.encode()).hexdigest()\n        etags.append(etag)\n        thr = threading.Thread(target = set_contents_from_string, args=(key, content,))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "910fa34d8439a6ae:3",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "qa/tasks/mgr/dashboard/test_rgw.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 51,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.hashes import SHA1\nfrom cryptography.hazmat.primitives.twofactor.totp import TOTP\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e8a63c99b00296f6:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "qa/tasks/cephfs/test_volumes.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "import uuid\nimport unittest\nfrom hashlib import md5\nfrom textwrap import dedent\nfrom io import StringIO\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b8b71c5f1ec38f8d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/spdk/ocf/tests/functional/pyocf/types/volume.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "    string_at,\n)\nfrom hashlib import md5\nimport weakref\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cbd1253d71e4c2fe:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 25,
            "endLine" : 34,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 36,
            "snippet" : {
              "text" : "\n    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n        root_builder = x509.CertificateBuilder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c694d81c35e11be:1",
        "primaryLocationStartColumnFingerprint" : "16"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 45,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n        root_builder = x509.CertificateBuilder()\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 23,
            "endLine" : 78,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 80,
            "snippet" : {
              "text" : "            have_ip = False\n\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da160455fe08047:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 78,
            "startColumn" : 45,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 76,
            "endLine" : 80,
            "snippet" : {
              "text" : "\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2226,
            "startColumn" : 16,
            "endLine" : 2230,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2224,
            "endLine" : 2232,
            "snippet" : {
              "text" : "    KEYFILE = os.path.join(tempdir, 'server_key.pem')\n\n    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n    subject = issuer = x509.Name([\n        x509.NameAttribute(NameOID.COUNTRY_NAME, u\"UK\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5123fb29d7121e09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2228,
            "startColumn" : 18,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 2226,
            "endLine" : 2230,
            "snippet" : {
              "text" : "    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2257,
            "startColumn" : 16,
            "endLine" : 2261,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2255,
            "endLine" : 2263,
            "snippet" : {
              "text" : "\n    # Now we want to generate a cert from that root\n    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend(),\n    )\n    with open(KEYFILE, \"wb\") as f:\n        f.write(cert_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc3d350954feaad6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2259,
            "startColumn" : 18,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 2257,
            "endLine" : 2261,
            "snippet" : {
              "text" : "    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend(),\n    )\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 25,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "\n    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c694d81c35e11be:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 25,
            "endLine" : 34,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 36,
            "snippet" : {
              "text" : "\n    def generate_root_cert(self, addr: str) -> Tuple[str, str]:\n        self.root_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        root_public_key = self.root_key.public_key()\n        root_builder = x509.CertificateBuilder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c694d81c35e11be:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 23,
            "endLine" : 78,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 80,
            "snippet" : {
              "text" : "            have_ip = False\n\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da160455fe08047:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "            have_ip = False\n\n        private_key = rsa.generate_private_key(\n            public_exponent=65537, key_size=4096, backend=default_backend())\n        public_key = private_key.public_key()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da160455fe08047:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/pybind/mgr/cephadm/ssl_cert_utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "from cryptography import x509\nfrom cryptography.x509.oid import NameOID\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import hashes, serialization\nfrom cryptography.hazmat.backends import default_backend\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "99c306167a440059:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2218,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 2216,
            "endLine" : 2220,
            "snippet" : {
              "text" : "    from cryptography.hazmat.backends import default_backend\n    from cryptography.hazmat.primitives import serialization\n    from cryptography.hazmat.primitives.asymmetric import rsa\n\n    # modify permissions to ensure that the broker user can access them\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f087367995bf24e3:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2226,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 2224,
            "endLine" : 2228,
            "snippet" : {
              "text" : "    KEYFILE = os.path.join(tempdir, 'server_key.pem')\n\n    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5123fb29d7121e09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2226,
            "startColumn" : 16,
            "endLine" : 2230,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2224,
            "endLine" : 2232,
            "snippet" : {
              "text" : "    KEYFILE = os.path.join(tempdir, 'server_key.pem')\n\n    root_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n    subject = issuer = x509.Name([\n        x509.NameAttribute(NameOID.COUNTRY_NAME, u\"UK\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5123fb29d7121e09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2257,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 2255,
            "endLine" : 2259,
            "snippet" : {
              "text" : "\n    # Now we want to generate a cert from that root\n    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc3d350954feaad6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/test/rgw/bucket_notification/test_bn.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2257,
            "startColumn" : 16,
            "endLine" : 2261,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 2255,
            "endLine" : 2263,
            "snippet" : {
              "text" : "\n    # Now we want to generate a cert from that root\n    cert_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend(),\n    )\n    with open(KEYFILE, \"wb\") as f:\n        f.write(cert_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dc3d350954feaad6:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:ceph/ceph/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}