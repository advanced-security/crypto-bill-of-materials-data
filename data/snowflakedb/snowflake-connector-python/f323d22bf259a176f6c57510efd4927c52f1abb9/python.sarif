{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "src/snowflake/connector/encryption_util.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/_query_context_cache.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/vendored/requests/auth.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/file_util.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/auth/keypair.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/s3_storage_client.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "src/snowflake/connector/vendored/urllib3/util/ssl_.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "test/unit/test_auth_keypair.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "test/unit/test_connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "test/integ/test_key_pair_authentication.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "\n        # encrypt key with QRMK\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        encryptor = cipher.encryptor()\n        enc_kek = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "739c89230b0e4fcf:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15f559735bfc481b:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/_query_context_cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "\nfrom functools import total_ordering\nfrom hashlib import md5\nfrom logging import getLogger\nfrom threading import Lock\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a794d63126582af8:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 148,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 146,
            "endLine" : 150,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.md5(x).hexdigest()\n\n            hash_utf8 = md5_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "180410456de91012:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 156,
            "startColumn" : 24,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 154,
            "endLine" : 158,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha1(x).hexdigest()\n\n            hash_utf8 = sha_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c461040f45e16247:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 164,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 162,
            "endLine" : 166,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha256(x).hexdigest()\n\n            hash_utf8 = sha256_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5dcdd915f6b0eb97:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 172,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 170,
            "endLine" : 174,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha512(x).hexdigest()\n\n            hash_utf8 = sha512_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e9349125333c36a3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 205,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 203,
            "endLine" : 207,
            "snippet" : {
              "text" : "        s += os.urandom(8)\n\n        cnonce = hashlib.sha1(s).hexdigest()[:16]\n        if _algorithm == \"MD5-SESS\":\n            HA1 = hash_utf8(f\"{HA1}:{nonce}:{cnonce}\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5de417172b40a045:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom . import errors, proxy\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abd01069237205a5:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom . import errors, proxy\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abd01069237205a5:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 25,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 83,
            "snippet" : {
              "text" : "        file_key = SnowflakeEncryptionUtil.get_secure_random(key_size)\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_data), backend=backend)\n        encryptor = cipher.encryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97e8d34b46236be8:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 83,
            "snippet" : {
              "text" : "        file_key = SnowflakeEncryptionUtil.get_secure_random(key_size)\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_data), backend=backend)\n        encryptor = cipher.encryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97e8d34b46236be8:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 25,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "\n        # encrypt key with QRMK\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        encryptor = cipher.encryptor()\n        enc_kek = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "739c89230b0e4fcf:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "\n        # encrypt key with QRMK\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        encryptor = cipher.encryptor()\n        enc_kek = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "739c89230b0e4fcf:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 25,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15f559735bfc481b:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15f559735bfc481b:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 25,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_bytes), backend=backend)\n        decryptor = cipher.decryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb57fbc10713f1b6:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 51,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_bytes), backend=backend)\n        decryptor = cipher.decryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb57fbc10713f1b6:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/file_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        CHUNK_SIZE = 64 * kilobyte\n        backend = default_backend()\n        chosen_hash = hashes.SHA256()\n        hasher = hashes.Hash(chosen_hash, backend)\n        while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b461a2ddb2f34c43:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 168,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 166,
            "endLine" : 170,
            "snippet" : {
              "text" : "\n        # take sha256 on raw bytes and then do base64 encode\n        sha256hash = hashlib.sha256()\n        sha256hash.update(public_key_der)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d44fbc230fd0916f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import jwt\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import (\n    Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import jwt\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import (\n    Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 367,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 365,
            "endLine" : 369,
            "snippet" : {
              "text" : "        else:\n            # the last resort. should not happen.\n            chosen_hash = hashes.SHA1()\n        hasher = hashes.Hash(chosen_hash, backend)\n        hasher.update(data.dump())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "606507a44d257815:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 373,
            "startColumn" : 36,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 371,
            "endLine" : 375,
            "snippet" : {
              "text" : "        try:\n            public_key.verify(\n                signature, digest, padding.PKCS1v15(), utils.Prehashed(chosen_hash)\n            )\n        except InvalidSignature:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c67218fded7255c:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 52,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 50,
            "endLine" : 54,
            "snippet" : {
              "text" : "    # map signature algorithm name to digest class\n    SIGNATURE_ALGORITHM_TO_DIGEST_CLASS = {\n        \"sha256\": hashes.SHA256,\n        \"sha384\": hashes.SHA3_384,\n        \"sha512\": hashes.SHA3_512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c5ef9ebdb1670971:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 19,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "    SIGNATURE_ALGORITHM_TO_DIGEST_CLASS = {\n        \"sha256\": hashes.SHA256,\n        \"sha384\": hashes.SHA3_384,\n        \"sha512\": hashes.SHA3_512,\n    }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84d138b9bcad0554:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 19,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "        \"sha256\": hashes.SHA256,\n        \"sha384\": hashes.SHA3_384,\n        \"sha512\": hashes.SHA3_512,\n    }\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6eca2553ecc11ea:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/s3_storage_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 123,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 121,
            "endLine" : 125,
            "snippet" : {
              "text" : "    def _sign_bytes(secret_key: bytes, _input: str) -> bytes:\n        \"\"\"Applies HMAC-SHA-256 to given string with secret_key.\"\"\"\n        h = hmac.HMAC(secret_key, hashes.SHA256())\n        h.update(_input.encode(\"utf-8\"))\n        return h.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7a35189b1b5b5db:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/s3_storage_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 135,
            "startColumn" : 30,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 133,
            "endLine" : 137,
            "snippet" : {
              "text" : "    def _hash_bytes(_input: bytes) -> bytes:\n        \"\"\"Applies SHA-256 hash to given bytes.\"\"\"\n        digest = hashes.Hash(hashes.SHA256())\n        digest.update(_input)\n        return digest.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "815c88d1ad53e67c:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 159,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 19,
            "endLine" : 159,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 161,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95cd9897106e98bd:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\nfrom pytest import raises\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\nfrom pytest import raises\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 366,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 364,
            "endLine" : 368,
            "snippet" : {
              "text" : "    private_key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 366,
            "startColumn" : 19,
            "endLine" : 368,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 364,
            "endLine" : 370,
            "snippet" : {
              "text" : "    private_key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 394,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 392,
            "endLine" : 396,
            "snippet" : {
              "text" : "    key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:2",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 394,
            "startColumn" : 19,
            "endLine" : 396,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 392,
            "endLine" : 398,
            "snippet" : {
              "text" : "    key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:2",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\nimport snowflake.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6b8b8d260223a2c:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 235,
            "startColumn" : 23,
            "endColumn" : 89
          },
          "contextRegion" : {
            "startLine" : 233,
            "endLine" : 237,
            "snippet" : {
              "text" : "    }\n\n    dsa_private_key = dsa.generate_private_key(key_size=2048, backend=default_backend())\n    dsa_private_key_der = dsa_private_key.private_bytes(\n        encoding=serialization.Encoding.DER,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "44752eb80c4b504b:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 242,
            "startColumn" : 37,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 240,
            "endLine" : 244,
            "snippet" : {
              "text" : "    )\n\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92f24b6a9051f740:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 242,
            "startColumn" : 37,
            "endLine" : 244,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 240,
            "endLine" : 246,
            "snippet" : {
              "text" : "    )\n\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n        encoding=serialization.Encoding.DER,\n        format=serialization.PrivateFormat.PKCS8,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92f24b6a9051f740:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 264,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 262,
            "endLine" : 266,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 264,
            "startColumn" : 19,
            "endLine" : 266,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 262,
            "endLine" : 268,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 60,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import dsa, rsa\n\nimport snowflake.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4279626d39be17f4:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 16,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "    @staticmethod\n    def get_secure_random(byte_length: int) -> bytes:\n        return os.urandom(byte_length)\n\n    @staticmethod\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "770ff081dc0ed6ff:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 167,
            "startColumn" : 20,
            "endColumn" : 56
          },
          "contextRegion" : {
            "startLine" : 165,
            "endLine" : 169,
            "snippet" : {
              "text" : "        )\n        key_bytes = base64.standard_b64decode(key_base64)\n        iv_bytes = base64.standard_b64decode(iv_base64)\n\n        backend = default_backend()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f109681aa84b858a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom . import errors, proxy\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abd01069237205a5:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom . import errors, proxy\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abd01069237205a5:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import jwt\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import (\n    Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import jwt\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import (\n    Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 159,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 19,
            "endLine" : 159,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 161,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95cd9897106e98bd:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\nfrom pytest import raises\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\nfrom pytest import raises\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 366,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 364,
            "endLine" : 368,
            "snippet" : {
              "text" : "    private_key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 366,
            "startColumn" : 19,
            "endLine" : 368,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 364,
            "endLine" : 370,
            "snippet" : {
              "text" : "    private_key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 394,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 392,
            "endLine" : 396,
            "snippet" : {
              "text" : "    key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:2",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 394,
            "startColumn" : 19,
            "endLine" : 396,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 392,
            "endLine" : 398,
            "snippet" : {
              "text" : "    key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:2",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\nimport snowflake.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6b8b8d260223a2c:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 235,
            "startColumn" : 23,
            "endColumn" : 89
          },
          "contextRegion" : {
            "startLine" : 233,
            "endLine" : 237,
            "snippet" : {
              "text" : "    }\n\n    dsa_private_key = dsa.generate_private_key(key_size=2048, backend=default_backend())\n    dsa_private_key_der = dsa_private_key.private_bytes(\n        encoding=serialization.Encoding.DER,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "44752eb80c4b504b:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 242,
            "startColumn" : 37,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 240,
            "endLine" : 244,
            "snippet" : {
              "text" : "    )\n\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92f24b6a9051f740:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 242,
            "startColumn" : 37,
            "endLine" : 244,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 240,
            "endLine" : 246,
            "snippet" : {
              "text" : "    )\n\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n        encoding=serialization.Encoding.DER,\n        format=serialization.PrivateFormat.PKCS8,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92f24b6a9051f740:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 264,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 262,
            "endLine" : 266,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 264,
            "startColumn" : 19,
            "endLine" : 266,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 262,
            "endLine" : 268,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 60,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import dsa, rsa\n\nimport snowflake.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4279626d39be17f4:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/_query_context_cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "\nfrom functools import total_ordering\nfrom hashlib import md5\nfrom logging import getLogger\nfrom threading import Lock\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a794d63126582af8:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 148,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 146,
            "endLine" : 150,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.md5(x).hexdigest()\n\n            hash_utf8 = md5_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "180410456de91012:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 156,
            "startColumn" : 24,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 154,
            "endLine" : 158,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha1(x).hexdigest()\n\n            hash_utf8 = sha_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c461040f45e16247:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 164,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 162,
            "endLine" : 166,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha256(x).hexdigest()\n\n            hash_utf8 = sha256_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5dcdd915f6b0eb97:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 172,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 170,
            "endLine" : 174,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha512(x).hexdigest()\n\n            hash_utf8 = sha512_utf8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e9349125333c36a3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 205,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 203,
            "endLine" : 207,
            "snippet" : {
              "text" : "        s += os.urandom(8)\n\n        cnonce = hashlib.sha1(s).hexdigest()[:16]\n        if _algorithm == \"MD5-SESS\":\n            HA1 = hash_utf8(f\"{HA1}:{nonce}:{cnonce}\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5de417172b40a045:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/file_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "        CHUNK_SIZE = 64 * kilobyte\n        backend = default_backend()\n        chosen_hash = hashes.SHA256()\n        hasher = hashes.Hash(chosen_hash, backend)\n        while True:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b461a2ddb2f34c43:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 168,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 166,
            "endLine" : 170,
            "snippet" : {
              "text" : "\n        # take sha256 on raw bytes and then do base64 encode\n        sha256hash = hashlib.sha256()\n        sha256hash.update(public_key_der)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d44fbc230fd0916f:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 367,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 365,
            "endLine" : 369,
            "snippet" : {
              "text" : "        else:\n            # the last resort. should not happen.\n            chosen_hash = hashes.SHA1()\n        hasher = hashes.Hash(chosen_hash, backend)\n        hasher.update(data.dump())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "606507a44d257815:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 52,
            "startColumn" : 19,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 50,
            "endLine" : 54,
            "snippet" : {
              "text" : "    # map signature algorithm name to digest class\n    SIGNATURE_ALGORITHM_TO_DIGEST_CLASS = {\n        \"sha256\": hashes.SHA256,\n        \"sha384\": hashes.SHA3_384,\n        \"sha512\": hashes.SHA3_512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c5ef9ebdb1670971:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 19,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "    SIGNATURE_ALGORITHM_TO_DIGEST_CLASS = {\n        \"sha256\": hashes.SHA256,\n        \"sha384\": hashes.SHA3_384,\n        \"sha512\": hashes.SHA3_512,\n    }\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84d138b9bcad0554:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 54,
            "startColumn" : 19,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 52,
            "endLine" : 56,
            "snippet" : {
              "text" : "        \"sha256\": hashes.SHA256,\n        \"sha384\": hashes.SHA3_384,\n        \"sha512\": hashes.SHA3_512,\n    }\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6eca2553ecc11ea:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/s3_storage_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 123,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 121,
            "endLine" : 125,
            "snippet" : {
              "text" : "    def _sign_bytes(secret_key: bytes, _input: str) -> bytes:\n        \"\"\"Applies HMAC-SHA-256 to given string with secret_key.\"\"\"\n        h = hmac.HMAC(secret_key, hashes.SHA256())\n        h.update(_input.encode(\"utf-8\"))\n        return h.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7a35189b1b5b5db:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/s3_storage_client.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 135,
            "startColumn" : 30,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 133,
            "endLine" : 137,
            "snippet" : {
              "text" : "    def _hash_bytes(_input: bytes) -> bytes:\n        \"\"\"Applies SHA-256 hash to given bytes.\"\"\"\n        digest = hashes.Hash(hashes.SHA256())\n        digest.update(_input)\n        return digest.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "815c88d1ad53e67c:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/vendored/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 25,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 83,
            "snippet" : {
              "text" : "        file_key = SnowflakeEncryptionUtil.get_secure_random(key_size)\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_data), backend=backend)\n        encryptor = cipher.encryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97e8d34b46236be8:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 25,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "\n        # encrypt key with QRMK\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        encryptor = cipher.encryptor()\n        enc_kek = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "739c89230b0e4fcf:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 25,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15f559735bfc481b:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 25,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_bytes), backend=backend)\n        decryptor = cipher.decryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb57fbc10713f1b6:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](2)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](3)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 19,
            "endLine" : 159,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 161,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 65,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "def test_auth_keypair():\n    \"\"\"Simple Key Pair test.\"\"\"\n    private_key_der, public_key_der_encoded = generate_key_pair(2048)\n    application = \"testapplication\"\n    account = \"testaccount\"\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 70,
            "startColumn" : 65,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 68,
            "endLine" : 72,
            "snippet" : {
              "text" : "def test_auth_keypair_abc():\n    \"\"\"Simple Key Pair test using abstraction layer.\"\"\"\n    private_key_der, public_key_der_encoded = generate_key_pair(2048)\n    application = \"testapplication\"\n    account = \"testaccount\"\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 119,
            "startColumn" : 44,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 117,
            "endLine" : 121,
            "snippet" : {
              "text" : "@patch(\"snowflake.connector.auth.keypair.AuthByKeyPair.prepare\")\ndef test_renew_token(mockPrepare):\n    private_key_der, _ = generate_key_pair(2048)\n    auth_instance = AuthByKeyPair(private_key=private_key_der)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 366,
            "startColumn" : 19,
            "endLine" : 368,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 364,
            "endLine" : 370,
            "snippet" : {
              "text" : "    private_key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 367,
            "startColumn" : 68,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 365,
            "endLine" : 369,
            "snippet" : {
              "text" : "\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 394,
            "startColumn" : 19,
            "endLine" : 396,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 392,
            "endLine" : 398,
            "snippet" : {
              "text" : "    key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:2",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 395,
            "startColumn" : 68,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 393,
            "endLine" : 397,
            "snippet" : {
              "text" : "\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm DSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 235,
            "startColumn" : 23,
            "endColumn" : 89
          },
          "contextRegion" : {
            "startLine" : 233,
            "endLine" : 237,
            "snippet" : {
              "text" : "    }\n\n    dsa_private_key = dsa.generate_private_key(key_size=2048, backend=default_backend())\n    dsa_private_key_der = dsa_private_key.private_bytes(\n        encoding=serialization.Encoding.DER,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "44752eb80c4b504b:1",
        "primaryLocationStartColumnFingerprint" : "18"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 235,
            "startColumn" : 57,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 233,
            "endLine" : 237,
            "snippet" : {
              "text" : "    }\n\n    dsa_private_key = dsa.generate_private_key(key_size=2048, backend=default_backend())\n    dsa_private_key_der = dsa_private_key.private_bytes(\n        encoding=serialization.Encoding.DER,\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 242,
            "startColumn" : 37,
            "endLine" : 244,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 240,
            "endLine" : 246,
            "snippet" : {
              "text" : "    )\n\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n        encoding=serialization.Encoding.DER,\n        format=serialization.PrivateFormat.PKCS8,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92f24b6a9051f740:1",
        "primaryLocationStartColumnFingerprint" : "32"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 243,
            "startColumn" : 18,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 241,
            "endLine" : 245,
            "snippet" : {
              "text" : "\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n        encoding=serialization.Encoding.DER,\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](2)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 264,
            "startColumn" : 19,
            "endLine" : 266,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 262,
            "endLine" : 268,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 165,
            "startColumn" : 73,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 163,
            "endLine" : 167,
            "snippet" : {
              "text" : "    request.addfinalizer(fin)\n\n    private_key_one_der, public_key_one_der_encoded = generate_key_pair(2048)\n    private_key_two_der, public_key_two_der_encoded = generate_key_pair(2048)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 166,
            "startColumn" : 73,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 164,
            "endLine" : 168,
            "snippet" : {
              "text" : "\n    private_key_one_der, public_key_one_der_encoded = generate_key_pair(2048)\n    private_key_two_der, public_key_two_der_encoded = generate_key_pair(2048)\n\n    with conn_cnx() as cnx:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/ocsp_asn1crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 373,
            "startColumn" : 36,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 371,
            "endLine" : 375,
            "snippet" : {
              "text" : "        try:\n            public_key.verify(\n                signature, digest, padding.PKCS1v15(), utils.Prehashed(chosen_hash)\n            )\n        except InvalidSignature:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3c67218fded7255c:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/signing-algorithms",
      "ruleIndex" : 11,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/signing-algorithms",
        "index" : 11
      },
      "message" : {
        "text" : "Use of algorithm DSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 235,
            "startColumn" : 23,
            "endColumn" : 89
          },
          "contextRegion" : {
            "startLine" : 233,
            "endLine" : 237,
            "snippet" : {
              "text" : "    }\n\n    dsa_private_key = dsa.generate_private_key(key_size=2048, backend=default_backend())\n    dsa_private_key_der = dsa_private_key.private_bytes(\n        encoding=serialization.Encoding.DER,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "44752eb80c4b504b:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom . import errors, proxy\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abd01069237205a5:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom . import errors, proxy\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "abd01069237205a5:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import jwt\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import (\n    Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/auth/keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "import jwt\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import (\n    Encoding,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 159,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 19,
            "endLine" : 159,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 161,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95cd9897106e98bd:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\nfrom pytest import raises\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_auth_keypair.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 13,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 11,
            "endLine" : 15,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import load_der_private_key\nfrom pytest import raises\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 366,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 364,
            "endLine" : 368,
            "snippet" : {
              "text" : "    private_key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 366,
            "startColumn" : 19,
            "endLine" : 368,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 364,
            "endLine" : 370,
            "snippet" : {
              "text" : "    private_key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 394,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 392,
            "endLine" : 396,
            "snippet" : {
              "text" : "    key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:2",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 394,
            "startColumn" : 19,
            "endLine" : 396,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 392,
            "endLine" : 398,
            "snippet" : {
              "text" : "    key_file = tmp_path / \"key.pem\"\n\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=2048\n    )\n\n    private_key_pem = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bed4fb17b:2",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/unit/test_connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\nimport snowflake.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6b8b8d260223a2c:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 242,
            "startColumn" : 37,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 240,
            "endLine" : 244,
            "snippet" : {
              "text" : "    )\n\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92f24b6a9051f740:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 242,
            "startColumn" : 37,
            "endLine" : 244,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 240,
            "endLine" : 246,
            "snippet" : {
              "text" : "    )\n\n    encrypted_rsa_private_key_der = rsa.generate_private_key(\n        key_size=2048, public_exponent=65537, backend=default_backend()\n    ).private_bytes(\n        encoding=serialization.Encoding.DER,\n        format=serialization.PrivateFormat.PKCS8,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92f24b6a9051f740:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 264,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 262,
            "endLine" : 266,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 264,
            "startColumn" : 19,
            "endLine" : 266,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 262,
            "endLine" : 268,
            "snippet" : {
              "text" : "\ndef generate_key_pair(key_length):\n    private_key = rsa.generate_private_key(\n        backend=default_backend(), public_exponent=65537, key_size=key_length\n    )\n\n    private_key_der = private_key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6e3b71bf3d82ce7:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integ/test_key_pair_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 60,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import dsa, rsa\n\nimport snowflake.connector\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4279626d39be17f4:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 81,
            "startColumn" : 51,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 79,
            "endLine" : 83,
            "snippet" : {
              "text" : "        file_key = SnowflakeEncryptionUtil.get_secure_random(key_size)\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_data), backend=backend)\n        encryptor = cipher.encryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97e8d34b46236be8:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 98,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 96,
            "endLine" : 100,
            "snippet" : {
              "text" : "\n        # encrypt key with QRMK\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        encryptor = cipher.encryptor()\n        enc_kek = (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "739c89230b0e4fcf:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 54,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "\n        backend = default_backend()\n        cipher = Cipher(algorithms.AES(decoded_key), modes.ECB(), backend=backend)\n        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15f559735bfc481b:1",
        "primaryLocationStartColumnFingerprint" : "45"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "src/snowflake/connector/encryption_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 51,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "        decryptor = cipher.decryptor()\n        file_key = PKCS5_UNPAD(decryptor.update(key_bytes) + decryptor.finalize())\n        cipher = Cipher(algorithms.AES(file_key), modes.CBC(iv_bytes), backend=backend)\n        decryptor = cipher.decryptor()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb57fbc10713f1b6:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:snowflakedb/snowflake-connector-python/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}