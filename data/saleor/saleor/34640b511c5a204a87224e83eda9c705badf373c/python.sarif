{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "saleor/graphql/utils/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "saleor/webhook/transport/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "saleor/core/hashers.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "saleor/core/jwt_manager.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "saleor/graphql/tests/test_tracing.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "saleor/webhook/transport/utils.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "saleor/graphql/views.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "saleor/payment/gateways/adyen/webhooks.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/utils/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 266,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 264,
            "endLine" : 268,
            "snippet" : {
              "text" : "                label = definition.operation\n            break\n    query_hash = hashlib.md5(document.document_string.encode(\"utf-8\")).hexdigest()\n    return f\"{label}:{query_hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec36aa6bf4053f99:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/webhook/transport/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 55,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 12,
            "snippet" : {
              "text" : "    if not secret_key:\n        return get_jwt_manager().jws_encode(body)\n    hash = hmac.new(bytes(secret_key, \"utf-8\"), body, hashlib.sha256)\n    return hash.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d2f718e521910c48:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/hashers.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "    def encode(self, password, salt, iterations=None):\n        symfony_iterations = 5000\n        digest = hashlib.sha512(force_bytes(password, encoding=\"ISO-8859-1\")).digest()\n        for i in range(symfony_iterations - 1):\n            digest = hashlib.sha512(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cd5dda27a1ffcff5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/hashers.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "        digest = hashlib.sha512(force_bytes(password, encoding=\"ISO-8859-1\")).digest()\n        for i in range(symfony_iterations - 1):\n            digest = hashlib.sha512(\n                digest + force_bytes(password, encoding=\"ISO-8859-1\")\n            ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eedbc3e2937d5f23:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 33,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_private_key(cls) -> rsa.RSAPrivateKey:\n        return NotImplemented\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "98cdb680135a12ea:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 32,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_public_key(cls) -> rsa.RSAPublicKey:\n        return NotImplemented\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f6750aa3eeb6232:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 13,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "            password = password.encode(\"utf-8\")\n        return cast(\n            rsa.RSAPrivateKey,\n            serialization.load_pem_private_key(pem, password=password),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bf38fda6412f772:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "        with open(path, \"rb\") as key_file:\n            return cast(\n                rsa.RSAPrivateKey,\n                serialization.load_pem_private_key(key_file.read(), password=None),\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c50f26db702d1b49:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 120,
            "snippet" : {
              "text" : "    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "163e7adcd171b81b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 23,
            "endLine" : 121,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 123,
            "snippet" : {
              "text" : "    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n        )\n        with open(path, \"wb\") as p_key_file:\n            p_key_file.write(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "163e7adcd171b81b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 33,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_private_key(cls) -> rsa.RSAPrivateKey:\n        pem = settings.RSA_PRIVATE_KEY\n        if not pem:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ddf9d8b10203f2b6:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 58,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 86,
            "endLine" : 90,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _get_private_key(cls, pem: Union[str, bytes]) -> rsa.RSAPrivateKey:\n        if isinstance(pem, str):\n            pem = pem.encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c69cd377374346ba:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 41,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _load_debug_private_key(cls) -> rsa.RSAPrivateKey:\n        key_path = join(settings.PROJECT_ROOT, cls.KEY_FILE_FOR_DEBUG)\n        if exists(key_path):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "750b565688cb97d5:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 109,
            "startColumn" : 47,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 107,
            "endLine" : 111,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _load_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        with open(path, \"rb\") as key_file:\n            return cast(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1aaf7a015049b9ac:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 117,
            "startColumn" : 49,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 115,
            "endLine" : 119,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1140b946461483e1:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 133,
            "startColumn" : 32,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 131,
            "endLine" : 135,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_public_key(cls) -> rsa.RSAPublicKey:\n        global PUBLIC_KEY\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82dd372e47c1d8a6:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "from authlib.jose import JsonWebKey\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "89f464bc16ea666b:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "logger = logging.getLogger(__name__)\n\nPUBLIC_KEY: Optional[rsa.RSAPublicKey] = None\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "83115d53fd83878d:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:test:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 82,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 80,
            "endLine" : 84,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:test:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:2",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 153,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 151,
            "endLine" : 155,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:3",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 185,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 183,
            "endLine" : 187,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:4",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 223,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 221,
            "endLine" : 225,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"mutation:cancelOrder:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:5",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/webhook/transport/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 95,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 93,
            "endLine" : 97,
            "snippet" : {
              "text" : "    return (\n        f\"{app_id}-{webhook_url}-{event}-\"\n        f\"{hashlib.sha256(key.encode('utf-8')).hexdigest()}\"\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d0632d276fa1a2f:1",
        "primaryLocationStartColumnFingerprint" : "3"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/views.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 446,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 444,
            "endLine" : 448,
            "snippet" : {
              "text" : "\ndef generate_cache_key(raw_query: str) -> str:\n    hashed_query = hashlib.sha256(str(raw_query).encode(\"utf-8\")).hexdigest()\n    return f\"{saleor_version}-{hashed_query}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "672c811509e3eeba:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/payment/gateways/adyen/webhooks.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 935,
            "startColumn" : 54,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 933,
            "endLine" : 937,
            "snippet" : {
              "text" : "\n    hmac_key = binascii.a2b_hex(hmac_key)\n    hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)\n    expected_merchant_sign = base64.b64encode(hm.digest())\n    return hmac.compare_digest(hmac_signature, expected_merchant_sign.decode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7b9c74119d676291:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 33,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_private_key(cls) -> rsa.RSAPrivateKey:\n        return NotImplemented\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "98cdb680135a12ea:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 32,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_public_key(cls) -> rsa.RSAPublicKey:\n        return NotImplemented\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f6750aa3eeb6232:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 13,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "            password = password.encode(\"utf-8\")\n        return cast(\n            rsa.RSAPrivateKey,\n            serialization.load_pem_private_key(pem, password=password),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bf38fda6412f772:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "        with open(path, \"rb\") as key_file:\n            return cast(\n                rsa.RSAPrivateKey,\n                serialization.load_pem_private_key(key_file.read(), password=None),\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c50f26db702d1b49:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 120,
            "snippet" : {
              "text" : "    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "163e7adcd171b81b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 23,
            "endLine" : 121,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 123,
            "snippet" : {
              "text" : "    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n        )\n        with open(path, \"wb\") as p_key_file:\n            p_key_file.write(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "163e7adcd171b81b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 33,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_private_key(cls) -> rsa.RSAPrivateKey:\n        pem = settings.RSA_PRIVATE_KEY\n        if not pem:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ddf9d8b10203f2b6:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 58,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 86,
            "endLine" : 90,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _get_private_key(cls, pem: Union[str, bytes]) -> rsa.RSAPrivateKey:\n        if isinstance(pem, str):\n            pem = pem.encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c69cd377374346ba:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 41,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _load_debug_private_key(cls) -> rsa.RSAPrivateKey:\n        key_path = join(settings.PROJECT_ROOT, cls.KEY_FILE_FOR_DEBUG)\n        if exists(key_path):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "750b565688cb97d5:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 109,
            "startColumn" : 47,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 107,
            "endLine" : 111,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _load_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        with open(path, \"rb\") as key_file:\n            return cast(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1aaf7a015049b9ac:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 117,
            "startColumn" : 49,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 115,
            "endLine" : 119,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1140b946461483e1:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 133,
            "startColumn" : 32,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 131,
            "endLine" : 135,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_public_key(cls) -> rsa.RSAPublicKey:\n        global PUBLIC_KEY\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82dd372e47c1d8a6:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "from authlib.jose import JsonWebKey\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "89f464bc16ea666b:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "logger = logging.getLogger(__name__)\n\nPUBLIC_KEY: Optional[rsa.RSAPublicKey] = None\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "83115d53fd83878d:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/utils/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 266,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 264,
            "endLine" : 268,
            "snippet" : {
              "text" : "                label = definition.operation\n            break\n    query_hash = hashlib.md5(document.document_string.encode(\"utf-8\")).hexdigest()\n    return f\"{label}:{query_hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ec36aa6bf4053f99:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/webhook/transport/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 11,
            "startColumn" : 55,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 9,
            "endLine" : 12,
            "snippet" : {
              "text" : "    if not secret_key:\n        return get_jwt_manager().jws_encode(body)\n    hash = hmac.new(bytes(secret_key, \"utf-8\"), body, hashlib.sha256)\n    return hash.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d2f718e521910c48:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/hashers.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "    def encode(self, password, salt, iterations=None):\n        symfony_iterations = 5000\n        digest = hashlib.sha512(force_bytes(password, encoding=\"ISO-8859-1\")).digest()\n        for i in range(symfony_iterations - 1):\n            digest = hashlib.sha512(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cd5dda27a1ffcff5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/hashers.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "        digest = hashlib.sha512(force_bytes(password, encoding=\"ISO-8859-1\")).digest()\n        for i in range(symfony_iterations - 1):\n            digest = hashlib.sha512(\n                digest + force_bytes(password, encoding=\"ISO-8859-1\")\n            ).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eedbc3e2937d5f23:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:test:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 82,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 80,
            "endLine" : 84,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:test:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:2",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 153,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 151,
            "endLine" : 155,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:3",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 185,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 183,
            "endLine" : 187,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"query:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:4",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/tests/test_tracing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 223,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 221,
            "endLine" : 225,
            "snippet" : {
              "text" : "\n    # then\n    hash = hashlib.md5(span.tags[\"graphql.query\"].encode(\"utf-8\")).hexdigest()\n    assert span.tags[\"graphql.query_fingerprint\"] == f\"mutation:cancelOrder:{hash}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d55c1f78be36223:5",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/webhook/transport/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 95,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 93,
            "endLine" : 97,
            "snippet" : {
              "text" : "    return (\n        f\"{app_id}-{webhook_url}-{event}-\"\n        f\"{hashlib.sha256(key.encode('utf-8')).hexdigest()}\"\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d0632d276fa1a2f:1",
        "primaryLocationStartColumnFingerprint" : "3"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/graphql/views.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 446,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 444,
            "endLine" : 448,
            "snippet" : {
              "text" : "\ndef generate_cache_key(raw_query: str) -> str:\n    hashed_query = hashlib.sha256(str(raw_query).encode(\"utf-8\")).hexdigest()\n    return f\"{saleor_version}-{hashed_query}\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "672c811509e3eeba:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/payment/gateways/adyen/webhooks.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 935,
            "startColumn" : 54,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 933,
            "endLine" : 937,
            "snippet" : {
              "text" : "\n    hmac_key = binascii.a2b_hex(hmac_key)\n    hm = hmac.new(hmac_key, payload.encode(\"utf-8\"), hashlib.sha256)\n    expected_merchant_sign = base64.b64encode(hm.digest())\n    return hmac.compare_digest(hmac_signature, expected_merchant_sign.decode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7b9c74119d676291:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 23,
            "endLine" : 121,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 123,
            "snippet" : {
              "text" : "    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n        )\n        with open(path, \"wb\") as p_key_file:\n            p_key_file.write(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "163e7adcd171b81b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 120,
            "startColumn" : 22,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 118,
            "endLine" : 122,
            "snippet" : {
              "text" : "        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n        )\n        with open(path, \"wb\") as p_key_file:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 31,
            "startColumn" : 33,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 29,
            "endLine" : 33,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_private_key(cls) -> rsa.RSAPrivateKey:\n        return NotImplemented\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "98cdb680135a12ea:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 32,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_public_key(cls) -> rsa.RSAPublicKey:\n        return NotImplemented\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9f6750aa3eeb6232:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 13,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "            password = password.encode(\"utf-8\")\n        return cast(\n            rsa.RSAPrivateKey,\n            serialization.load_pem_private_key(pem, password=password),\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bf38fda6412f772:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 112,
            "startColumn" : 17,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 110,
            "endLine" : 114,
            "snippet" : {
              "text" : "        with open(path, \"rb\") as key_file:\n            return cast(\n                rsa.RSAPrivateKey,\n                serialization.load_pem_private_key(key_file.read(), password=None),\n            )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c50f26db702d1b49:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 23,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 120,
            "snippet" : {
              "text" : "    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "163e7adcd171b81b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 23,
            "endLine" : 121,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 123,
            "snippet" : {
              "text" : "    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048,\n        )\n        with open(path, \"wb\") as p_key_file:\n            p_key_file.write(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "163e7adcd171b81b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 33,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_private_key(cls) -> rsa.RSAPrivateKey:\n        pem = settings.RSA_PRIVATE_KEY\n        if not pem:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ddf9d8b10203f2b6:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 88,
            "startColumn" : 58,
            "endColumn" : 75
          },
          "contextRegion" : {
            "startLine" : 86,
            "endLine" : 90,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _get_private_key(cls, pem: Union[str, bytes]) -> rsa.RSAPrivateKey:\n        if isinstance(pem, str):\n            pem = pem.encode(\"utf-8\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c69cd377374346ba:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 41,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _load_debug_private_key(cls) -> rsa.RSAPrivateKey:\n        key_path = join(settings.PROJECT_ROOT, cls.KEY_FILE_FOR_DEBUG)\n        if exists(key_path):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "750b565688cb97d5:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 109,
            "startColumn" : 47,
            "endColumn" : 64
          },
          "contextRegion" : {
            "startLine" : 107,
            "endLine" : 111,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _load_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        with open(path, \"rb\") as key_file:\n            return cast(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1aaf7a015049b9ac:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 117,
            "startColumn" : 49,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 115,
            "endLine" : 119,
            "snippet" : {
              "text" : "\n    @classmethod\n    def _create_local_private_key(cls, path) -> rsa.RSAPrivateKey:\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1140b946461483e1:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 133,
            "startColumn" : 32,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 131,
            "endLine" : 135,
            "snippet" : {
              "text" : "\n    @classmethod\n    def get_public_key(cls) -> rsa.RSAPublicKey:\n        global PUBLIC_KEY\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82dd372e47c1d8a6:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 9,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 7,
            "endLine" : 11,
            "snippet" : {
              "text" : "from authlib.jose import JsonWebKey\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom django.conf import settings\nfrom django.core.exceptions import ImproperlyConfigured\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "89f464bc16ea666b:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "saleor/core/jwt_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 22,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "logger = logging.getLogger(__name__)\n\nPUBLIC_KEY: Optional[rsa.RSAPublicKey] = None\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "83115d53fd83878d:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:saleor/saleor/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}