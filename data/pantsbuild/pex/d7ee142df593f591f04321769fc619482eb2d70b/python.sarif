{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "pex/atomic_directory.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_internal/cache.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/database.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "pex/resolve/lockfile/download_manager.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_vendor/cachecontrol/caches/file_cache.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_internal/commands/hash.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "pex/hashing.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/index.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "pex/interpreter.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_internal/utils/misc.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "scripts/package.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "pex/pep_376.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "pex/pex_bootstrapper.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "pex/pex_builder.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_internal/req/req_tracker.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "pex/resolve/resolved_requirement.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "pex/resolver.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_internal/self_outdated_check.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/pip/pip/_vendor/urllib3/util/ssl_.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "tests/test_dependency_manager.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    }, {
      "location" : {
        "uri" : "tests/resolve/lockfile/test_download_manager.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      }
    }, {
      "location" : {
        "uri" : "tests/integration/test_downloads.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      }
    }, {
      "location" : {
        "uri" : "tests/test_hashing.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      }
    }, {
      "location" : {
        "uri" : "tests/integration/test_inject_env_and_args.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      }
    }, {
      "location" : {
        "uri" : "tests/integration/test_lock_resolver.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 25
      }
    }, {
      "location" : {
        "uri" : "tests/integration/test_locked_resolve.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 26
      }
    }, {
      "location" : {
        "uri" : "tests/test_pip.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 27
      }
    }, {
      "location" : {
        "uri" : "tests/test_util.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 28
      }
    }, {
      "location" : {
        "uri" : "pex/util.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 29
      }
    }, {
      "location" : {
        "uri" : "pex/variables.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 30
      }
    }, {
      "location" : {
        "uri" : "pex/vendor/_vendored/wheel/wheel/wheelfile.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 31
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/atomic_directory.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "            # See: https://github.com/pantsbuild/pex/issues/2087\n\n            fingerprint = hashlib.sha256(target_basename.encode(\"utf-8\")).hexdigest()\n            self._work_dir = os.path.join(\n                os.path.dirname(self._target_dir),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "49dac7039120c895:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 148,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 146,
            "endLine" : 150,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.md5(x).hexdigest()\n            hash_utf8 = md5_utf8\n        elif _algorithm == 'SHA':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b3402b913637369:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 154,
            "startColumn" : 24,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 152,
            "endLine" : 156,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.sha1(x).hexdigest()\n            hash_utf8 = sha_utf8\n        elif _algorithm == 'SHA-256':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f11213bae4eed0c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.sha256(x).hexdigest()\n            hash_utf8 = sha256_utf8\n        elif _algorithm == 'SHA-512':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "788cab14a716e181:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 166,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 164,
            "endLine" : 168,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.sha512(x).hexdigest()\n            hash_utf8 = sha512_utf8\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dfcde21b4bff3560:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 198,
            "startColumn" : 19,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 196,
            "endLine" : 200,
            "snippet" : {
              "text" : "        s += os.urandom(8)\n\n        cnonce = (hashlib.sha1(s).hexdigest()[:16])\n        if _algorithm == 'MD5-SESS':\n            HA1 = hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a66cb96b5cdb632:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "    \"\"\"Return a stable sha224 of a dictionary.\"\"\"\n    s = json.dumps(d, sort_keys=True, separators=(\",\", \":\"), ensure_ascii=True)\n    return hashlib.sha224(s.encode(\"ascii\")).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2c99bb01f5b22f4:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "        # thus less secure). However the differences don't make a lot of\n        # difference for our use case here.\n        hashed = hashlib.sha224(key_url.encode()).hexdigest()\n\n        # We want to nest the directories some to prevent having a ton of top\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "59608c8338cecc25:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/database.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 519,
            "startColumn" : 22,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 517,
            "endLine" : 521,
            "snippet" : {
              "text" : "            hasher = self.hasher\n        if hasher is None:\n            hasher = hashlib.md5\n            prefix = ''\n        else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1bad1330c556003f:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/database.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1017,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1015,
            "endLine" : 1019,
            "snippet" : {
              "text" : "            finally:\n                f.close()\n            return hashlib.md5(content).hexdigest()\n\n        def _size(path):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4c4218b13880642b:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/resolve/lockfile/download_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 150,
            "startColumn" : 41,
            "endColumn" : 71
          },
          "contextRegion" : {
            "startLine" : 148,
            "endLine" : 152,
            "snippet" : {
              "text" : "                    # the fingerprint on other cheeseshops that use a lower-grade hash algorithm (\n                    # See: https://peps.python.org/pep-0503/#specification).\n                    check = hashlib.new(artifact.fingerprint.algorithm)  # External\n                    digests.append(check)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2ba25fbdae38f1c8:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/cachecontrol/caches/file_cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 99,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 97,
            "endLine" : 101,
            "snippet" : {
              "text" : "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n    def _fn(self, name):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d973055deccd2055:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/commands/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 21,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "            return ERROR\n\n        algorithm = options.algorithm\n        for path in args:\n            write_output('%s:\\n--hash=%s:%s',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e99afd58dbc04c6:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 114,
            "startColumn" : 36,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 112,
            "endLine" : 116,
            "snippet" : {
              "text" : "        # type: (...) -> None\n        self._hexdigest_type = hexdigest_type\n        self._hasher = hashlib.new(hexdigest_type.algorithm, data)\n\n    @property\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b88987ccfeef4198:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/index.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 276,
            "startColumn" : 22,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 274,
            "endLine" : 278,
            "snippet" : {
              "text" : "        with open(filename, 'rb') as f:\n            file_data = f.read()\n        md5_digest = hashlib.md5(file_data).hexdigest()\n        sha256_digest = hashlib.sha256(file_data).hexdigest()\n        d.update({\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f26195a8f43fda6:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/index.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 277,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 275,
            "endLine" : 279,
            "snippet" : {
              "text" : "            file_data = f.read()\n        md5_digest = hashlib.md5(file_data).hexdigest()\n        sha256_digest = hashlib.sha256(file_data).hexdigest()\n        d.update({\n            ':action': 'file_upload',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45fbf08d139ec900:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/interpreter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 883,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 881,
            "endLine" : 885,
            "snippet" : {
              "text" : "        # release. That data can change when the OS is upgraded but (some of) the installed interpreters\n        # remain the same. As such, include the OS in the hash structure for cached interpreters.\n        os_digest = hashlib.sha1()\n        for os_identifier in platform.release(), platform.version():\n            os_digest.update(os_identifier.encode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "beb0cd3a8d6cd711:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/interpreter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 906,
            "startColumn" : 19,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 904,
            "endLine" : 908,
            "snippet" : {
              "text" : "        # length hash of the interpreter binary path to ensure uniqueness and not run afoul of file\n        # name length limits.\n        path_id = hashlib.sha1(binary.encode(\"utf-8\")).hexdigest()\n\n        cache_dir = os.path.join(os_cache_dir, interpreter_hash, path_id)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6aa66dca64c8b04e:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/utils/misc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 917,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 915,
            "endLine" : 919,
            "snippet" : {
              "text" : "    \"\"\"\n\n    h = hashlib.sha256()\n    length = 0\n    with open(path, 'rb') as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5a44514762d6e49:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/package.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "\ndef describe_file(path: Path) -> Tuple[str, int]:\n    hasher = hashlib.sha256()\n    size = 0\n    with path.open(\"rb\") as fp:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "638d348462c1cc1c:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pep_376.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "    def new_hasher(self):\n        # type: () -> Hasher\n        return hashlib.new(self.algorithm)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "db94d875a8700cd6:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pep_376.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "    ):\n        # type: (...) -> InstalledFile\n        hasher = hashlib.sha256()\n        hashing.file_hash(path, digest=hasher)\n        return InstalledFile(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b8853d9878ea71e:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pex_bootstrapper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 511,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 509,
            "endLine" : 513,
            "snippet" : {
              "text" : "            # PEX venv on this machine. If we still collide after using the whole sha1 (for a total\n            # of 33 collisions), then the universe is broken and we raise. It's the least we can do.\n            venv_hash = hashlib.sha1(venv_dir.encode(\"utf-8\")).hexdigest()\n            collisions = []\n            for chars in range(8, len(venv_hash) + 1):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d5c15e467f1b59c:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pex_builder.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 573,
            "startColumn" : 35,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 571,
            "endLine" : 575,
            "snippet" : {
              "text" : "    def _prepare_code(self):\n        self._pex_info.code_hash = CacheHelper.pex_code_hash(self._chroot.path())\n        self._pex_info.pex_hash = hashlib.sha1(self._pex_info.dump().encode(\"utf-8\")).hexdigest()\n        self._chroot.write(self._pex_info.dump().encode(\"utf-8\"), PexInfo.PATH, label=\"manifest\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "71e306590e5db2e:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pex_builder.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 630,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 628,
            "endLine" : 632,
            "snippet" : {
              "text" : "        )\n\n        bootstrap_digest = hashlib.sha1()\n        bootstrap_packages = [\"third_party\", \"venv\"]\n        if self._pex_info.includes_tools:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ed67cfb0705d379:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/req/req_tracker.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "    def _entry_path(self, link):\n        # type: (Link) -> str\n        hashed = hashlib.sha224(link.url_without_fragment.encode()).hexdigest()\n        return os.path.join(self._root, hashed)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d8d87ad2cc11ec5e:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/resolve/resolved_requirement.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 57,
            "startColumn" : 19,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 55,
            "endLine" : 59,
            "snippet" : {
              "text" : "        cls,\n        stream,  # type: BinaryIO\n        algorithm=\"sha256\",  # type: str\n    ):\n        # type: (...) -> Fingerprint\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "65ab3324a254de6b:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/resolver.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 210,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 208,
            "endLine" : 212,
            "snippet" : {
              "text" : "    # See: https://github.com/pantsbuild/pex/issues/1655 for a general overview of these cache\n    # structure concerns.\n    hasher = hashlib.sha256\n\n    if os.path.isdir(path):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d513629c3dc5b6af:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/self_outdated_check.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "    # type: (Union[str, Text]) -> str\n    key_bytes = ensure_binary(key)\n    name = hashlib.sha224(key_bytes).hexdigest()\n    return name\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5a0d1feaa1a4af8a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dependency_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 37,
            "endLine" : 41,
            "snippet" : {
              "text" : "    ):\n        # type: (...) -> FingerprintedDistribution\n        fingerprint = hashlib.sha256(name.encode(\"utf-8\")).hexdigest()\n        location = os.path.join(self.install_base_dir, fingerprint, name)\n        os.makedirs(location)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2aa0ddb6dc5e273e:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/resolve/lockfile/test_download_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 82,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 77,
            "snippet" : {
              "text" : "    return FileArtifact(\n        url=\"file:///foo-1.0.tar.gz\",\n        fingerprint=Fingerprint.from_stream(BytesIO(expected_content), algorithm=\"sha1\"),\n        filename=\"foo-1.0.tar.gz\",\n        verified=False,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d41bd0b1069347cc:1",
        "primaryLocationStartColumnFingerprint" : "73"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_downloads.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 70,
            "endLine" : 74,
            "snippet" : {
              "text" : "    dest_dir = os.path.join(str(tmpdir), \"dest_dir\")\n    assert foreign_artifact.filename == downloader.download(\n        foreign_artifact, dest_dir=dest_dir, digest=hashlib.sha256()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1d4234f6add07f3:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "    # type: () -> None\n\n    assert hashlib.sha1().hexdigest() == Sha1Fingerprint.new_hasher().hexdigest()\n    assert hashlib.sha256().hexdigest() == Sha256Fingerprint.new_hasher().hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82be7ad33de266f5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "\n    assert hashlib.sha1().hexdigest() == Sha1Fingerprint.new_hasher().hexdigest()\n    assert hashlib.sha256().hexdigest() == Sha256Fingerprint.new_hasher().hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f4fed77b7bbb3bb3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "    assert isinstance(hasher, HashlibHasher)\n\n    sha1 = hashlib.sha1()\n    assert sha1.name == hasher.name\n    assert sha1.block_size == hasher.block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11f3d47a9db659e3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_inject_env_and_args.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "    pex = os.path.join(\n        str(tmpdir),\n        \"pex-{}\".format(hashlib.sha256(json.dumps(inject_args).encode(\"utf-8\")).hexdigest()),\n    )\n    with open(os.path.join(str(tmpdir), \"exe.py\"), \"w\") as fp:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "22ac304c6647477c:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_lock_resolver.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 211,
            "startColumn" : 17,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 209,
            "endLine" : 213,
            "snippet" : {
              "text" : "        ProjectName(\"requests\")\n    ]\n    algorithm = locked_requirement.artifact.fingerprint.algorithm\n    expected_hash = locked_requirement.artifact.fingerprint.hash\n    actual_hash = CacheHelper.hash(requests_distribution, digest=hashlib.new(algorithm))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "40c70e58eb49cb4f:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_locked_resolve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 130,
            "startColumn" : 40,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 128,
            "endLine" : 132,
            "snippet" : {
              "text" : "        assert fingerprint.hash == CacheHelper.hash(\n            path=local_distributions_by_pin[locked_req.pin].path,\n            hasher=lambda: hashlib.new(fingerprint.algorithm),\n        ), (\n            \"Expected the fingerprint of the downloaded distribution to match the fingerprint \"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e64fbcf39f5d0eb3:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pip.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 315,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 313,
            "endLine" : 317,
            "snippet" : {
              "text" : "    pip_w_linked_ppp = create_pip(current_interpreter, PEX_PYTHON_PATH=binary_link)\n    print(\"binary link real path resolves to: {}\".format(os.path.realpath(binary_link)))\n    venv_contents_hash = hashlib.sha1(\n        json.dumps(\n            {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "885393cb9048036b:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import os\nimport subprocess\nfrom hashlib import sha1\nfrom textwrap import dedent\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a2e16c2192b9f3c:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "        # type: (str) -> str\n        \"\"\"Return a reproducible hash of the contents of a loose PEX; excluding all `.pyc` files.\"\"\"\n        digest = hashlib.sha1()\n        hashing.dir_hash(\n            directory=directory,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25f0038932bf5c23:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 120,
            "snippet" : {
              "text" : "        # type: (...) -> str\n        \"\"\"Return a reproducible hash of the contents of a zip; excluding all `.pyc` files.\"\"\"\n        digest = hashlib.sha1()\n        hashing.zip_hash(\n            zip_path=zip_path,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f2fbf50d58ed25d7:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import shutil\nimport tempfile\nfrom hashlib import sha1\nfrom site import makepath  # type: ignore[attr-defined]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "be0bbf98b3a91103:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/variables.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 841,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 839,
            "endLine" : 843,
            "snippet" : {
              "text" : "        venv_contents[\"interpreter\"] = os.path.realpath(interpreter_path)\n\n    venv_contents_hash = hashlib.sha1(\n        json.dumps(venv_contents, sort_keys=True).encode(\"utf-8\")\n    ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ece003b18702969:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/wheel/wheel/wheelfile.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 26,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "    \"\"\"\n\n    _default_algorithm = hashlib.sha256\n\n    def __init__(self, file, mode='r', compression=ZIP_DEFLATED):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a65fd6c46e549efe:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/atomic_directory.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "            # See: https://github.com/pantsbuild/pex/issues/2087\n\n            fingerprint = hashlib.sha256(target_basename.encode(\"utf-8\")).hexdigest()\n            self._work_dir = os.path.join(\n                os.path.dirname(self._target_dir),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "49dac7039120c895:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 148,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 146,
            "endLine" : 150,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.md5(x).hexdigest()\n            hash_utf8 = md5_utf8\n        elif _algorithm == 'SHA':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b3402b913637369:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 154,
            "startColumn" : 24,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 152,
            "endLine" : 156,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.sha1(x).hexdigest()\n            hash_utf8 = sha_utf8\n        elif _algorithm == 'SHA-256':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f11213bae4eed0c:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.sha256(x).hexdigest()\n            hash_utf8 = sha256_utf8\n        elif _algorithm == 'SHA-512':\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "788cab14a716e181:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 166,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 164,
            "endLine" : 168,
            "snippet" : {
              "text" : "                if isinstance(x, str):\n                    x = x.encode('utf-8')\n                return hashlib.sha512(x).hexdigest()\n            hash_utf8 = sha512_utf8\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dfcde21b4bff3560:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/requests/auth.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 198,
            "startColumn" : 19,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 196,
            "endLine" : 200,
            "snippet" : {
              "text" : "        s += os.urandom(8)\n\n        cnonce = (hashlib.sha1(s).hexdigest()[:16])\n        if _algorithm == 'MD5-SESS':\n            HA1 = hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a66cb96b5cdb632:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 33,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 31,
            "endLine" : 35,
            "snippet" : {
              "text" : "    \"\"\"Return a stable sha224 of a dictionary.\"\"\"\n    s = json.dumps(d, sort_keys=True, separators=(\",\", \":\"), ensure_ascii=True)\n    return hashlib.sha224(s.encode(\"ascii\")).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2c99bb01f5b22f4:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 77,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 75,
            "endLine" : 79,
            "snippet" : {
              "text" : "        # thus less secure). However the differences don't make a lot of\n        # difference for our use case here.\n        hashed = hashlib.sha224(key_url.encode()).hexdigest()\n\n        # We want to nest the directories some to prevent having a ton of top\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "59608c8338cecc25:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/database.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 519,
            "startColumn" : 22,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 517,
            "endLine" : 521,
            "snippet" : {
              "text" : "            hasher = self.hasher\n        if hasher is None:\n            hasher = hashlib.md5\n            prefix = ''\n        else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1bad1330c556003f:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/database.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1017,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1015,
            "endLine" : 1019,
            "snippet" : {
              "text" : "            finally:\n                f.close()\n            return hashlib.md5(content).hexdigest()\n\n        def _size(path):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4c4218b13880642b:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/resolve/lockfile/download_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 150,
            "startColumn" : 41,
            "endColumn" : 71
          },
          "contextRegion" : {
            "startLine" : 148,
            "endLine" : 152,
            "snippet" : {
              "text" : "                    # the fingerprint on other cheeseshops that use a lower-grade hash algorithm (\n                    # See: https://peps.python.org/pep-0503/#specification).\n                    check = hashlib.new(artifact.fingerprint.algorithm)  # External\n                    digests.append(check)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2ba25fbdae38f1c8:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/cachecontrol/caches/file_cache.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 99,
            "startColumn" : 16,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 97,
            "endLine" : 101,
            "snippet" : {
              "text" : "    @staticmethod\n    def encode(x):\n        return hashlib.sha224(x.encode()).hexdigest()\n\n    def _fn(self, name):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d973055deccd2055:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/commands/hash.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 21,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "            return ERROR\n\n        algorithm = options.algorithm\n        for path in args:\n            write_output('%s:\\n--hash=%s:%s',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e99afd58dbc04c6:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 114,
            "startColumn" : 36,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 112,
            "endLine" : 116,
            "snippet" : {
              "text" : "        # type: (...) -> None\n        self._hexdigest_type = hexdigest_type\n        self._hasher = hashlib.new(hexdigest_type.algorithm, data)\n\n    @property\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b88987ccfeef4198:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/index.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 276,
            "startColumn" : 22,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 274,
            "endLine" : 278,
            "snippet" : {
              "text" : "        with open(filename, 'rb') as f:\n            file_data = f.read()\n        md5_digest = hashlib.md5(file_data).hexdigest()\n        sha256_digest = hashlib.sha256(file_data).hexdigest()\n        d.update({\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f26195a8f43fda6:1",
        "primaryLocationStartColumnFingerprint" : "13"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/distlib/index.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 277,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 275,
            "endLine" : 279,
            "snippet" : {
              "text" : "            file_data = f.read()\n        md5_digest = hashlib.md5(file_data).hexdigest()\n        sha256_digest = hashlib.sha256(file_data).hexdigest()\n        d.update({\n            ':action': 'file_upload',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45fbf08d139ec900:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/interpreter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 883,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 881,
            "endLine" : 885,
            "snippet" : {
              "text" : "        # release. That data can change when the OS is upgraded but (some of) the installed interpreters\n        # remain the same. As such, include the OS in the hash structure for cached interpreters.\n        os_digest = hashlib.sha1()\n        for os_identifier in platform.release(), platform.version():\n            os_digest.update(os_identifier.encode(\"utf-8\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "beb0cd3a8d6cd711:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/interpreter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 906,
            "startColumn" : 19,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 904,
            "endLine" : 908,
            "snippet" : {
              "text" : "        # length hash of the interpreter binary path to ensure uniqueness and not run afoul of file\n        # name length limits.\n        path_id = hashlib.sha1(binary.encode(\"utf-8\")).hexdigest()\n\n        cache_dir = os.path.join(os_cache_dir, interpreter_hash, path_id)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6aa66dca64c8b04e:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/utils/misc.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 917,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 915,
            "endLine" : 919,
            "snippet" : {
              "text" : "    \"\"\"\n\n    h = hashlib.sha256()\n    length = 0\n    with open(path, 'rb') as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b5a44514762d6e49:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/package.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "\ndef describe_file(path: Path) -> Tuple[str, int]:\n    hasher = hashlib.sha256()\n    size = 0\n    with path.open(\"rb\") as fp:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "638d348462c1cc1c:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pep_376.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "    def new_hasher(self):\n        # type: () -> Hasher\n        return hashlib.new(self.algorithm)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "db94d875a8700cd6:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pep_376.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 240,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 238,
            "endLine" : 242,
            "snippet" : {
              "text" : "    ):\n        # type: (...) -> InstalledFile\n        hasher = hashlib.sha256()\n        hashing.file_hash(path, digest=hasher)\n        return InstalledFile(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2b8853d9878ea71e:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pex_bootstrapper.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 511,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 509,
            "endLine" : 513,
            "snippet" : {
              "text" : "            # PEX venv on this machine. If we still collide after using the whole sha1 (for a total\n            # of 33 collisions), then the universe is broken and we raise. It's the least we can do.\n            venv_hash = hashlib.sha1(venv_dir.encode(\"utf-8\")).hexdigest()\n            collisions = []\n            for chars in range(8, len(venv_hash) + 1):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3d5c15e467f1b59c:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pex_builder.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 573,
            "startColumn" : 35,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 571,
            "endLine" : 575,
            "snippet" : {
              "text" : "    def _prepare_code(self):\n        self._pex_info.code_hash = CacheHelper.pex_code_hash(self._chroot.path())\n        self._pex_info.pex_hash = hashlib.sha1(self._pex_info.dump().encode(\"utf-8\")).hexdigest()\n        self._chroot.write(self._pex_info.dump().encode(\"utf-8\"), PexInfo.PATH, label=\"manifest\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "71e306590e5db2e:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/pex_builder.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 630,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 628,
            "endLine" : 632,
            "snippet" : {
              "text" : "        )\n\n        bootstrap_digest = hashlib.sha1()\n        bootstrap_packages = [\"third_party\", \"venv\"]\n        if self._pex_info.includes_tools:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ed67cfb0705d379:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/req/req_tracker.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "    def _entry_path(self, link):\n        # type: (Link) -> str\n        hashed = hashlib.sha224(link.url_without_fragment.encode()).hexdigest()\n        return os.path.join(self._root, hashed)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d8d87ad2cc11ec5e:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/resolve/resolved_requirement.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 57,
            "startColumn" : 19,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 55,
            "endLine" : 59,
            "snippet" : {
              "text" : "        cls,\n        stream,  # type: BinaryIO\n        algorithm=\"sha256\",  # type: str\n    ):\n        # type: (...) -> Fingerprint\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "65ab3324a254de6b:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/resolver.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 210,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 208,
            "endLine" : 212,
            "snippet" : {
              "text" : "    # See: https://github.com/pantsbuild/pex/issues/1655 for a general overview of these cache\n    # structure concerns.\n    hasher = hashlib.sha256\n\n    if os.path.isdir(path):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d513629c3dc5b6af:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_internal/self_outdated_check.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "    # type: (Union[str, Text]) -> str\n    key_bytes = ensure_binary(key)\n    name = hashlib.sha224(key_bytes).hexdigest()\n    return name\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5a0d1feaa1a4af8a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 26,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/pip/pip/_vendor/urllib3/util/ssl_.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 32,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import warnings\nfrom binascii import hexlify, unhexlify\nfrom hashlib import md5, sha1, sha256\n\nfrom ..exceptions import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "23432d0383f44e92:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_dependency_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 39,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 37,
            "endLine" : 41,
            "snippet" : {
              "text" : "    ):\n        # type: (...) -> FingerprintedDistribution\n        fingerprint = hashlib.sha256(name.encode(\"utf-8\")).hexdigest()\n        location = os.path.join(self.install_base_dir, fingerprint, name)\n        os.makedirs(location)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2aa0ddb6dc5e273e:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/resolve/lockfile/test_download_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 82,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 77,
            "snippet" : {
              "text" : "    return FileArtifact(\n        url=\"file:///foo-1.0.tar.gz\",\n        fingerprint=Fingerprint.from_stream(BytesIO(expected_content), algorithm=\"sha1\"),\n        filename=\"foo-1.0.tar.gz\",\n        verified=False,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d41bd0b1069347cc:1",
        "primaryLocationStartColumnFingerprint" : "73"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_downloads.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 53,
            "endColumn" : 67
          },
          "contextRegion" : {
            "startLine" : 70,
            "endLine" : 74,
            "snippet" : {
              "text" : "    dest_dir = os.path.join(str(tmpdir), \"dest_dir\")\n    assert foreign_artifact.filename == downloader.download(\n        foreign_artifact, dest_dir=dest_dir, digest=hashlib.sha256()\n    )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c1d4234f6add07f3:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "    # type: () -> None\n\n    assert hashlib.sha1().hexdigest() == Sha1Fingerprint.new_hasher().hexdigest()\n    assert hashlib.sha256().hexdigest() == Sha256Fingerprint.new_hasher().hexdigest()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "82be7ad33de266f5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 36,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 34,
            "endLine" : 38,
            "snippet" : {
              "text" : "\n    assert hashlib.sha1().hexdigest() == Sha1Fingerprint.new_hasher().hexdigest()\n    assert hashlib.sha256().hexdigest() == Sha256Fingerprint.new_hasher().hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f4fed77b7bbb3bb3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 12,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "    assert isinstance(hasher, HashlibHasher)\n\n    sha1 = hashlib.sha1()\n    assert sha1.name == hasher.name\n    assert sha1.block_size == hasher.block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "11f3d47a9db659e3:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_inject_env_and_args.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 97,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 95,
            "endLine" : 99,
            "snippet" : {
              "text" : "    pex = os.path.join(\n        str(tmpdir),\n        \"pex-{}\".format(hashlib.sha256(json.dumps(inject_args).encode(\"utf-8\")).hexdigest()),\n    )\n    with open(os.path.join(str(tmpdir), \"exe.py\"), \"w\") as fp:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "22ac304c6647477c:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_lock_resolver.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 25
          },
          "region" : {
            "startLine" : 211,
            "startColumn" : 17,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 209,
            "endLine" : 213,
            "snippet" : {
              "text" : "        ProjectName(\"requests\")\n    ]\n    algorithm = locked_requirement.artifact.fingerprint.algorithm\n    expected_hash = locked_requirement.artifact.fingerprint.hash\n    actual_hash = CacheHelper.hash(requests_distribution, digest=hashlib.new(algorithm))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "40c70e58eb49cb4f:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/integration/test_locked_resolve.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 26
          },
          "region" : {
            "startLine" : 130,
            "startColumn" : 40,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 128,
            "endLine" : 132,
            "snippet" : {
              "text" : "        assert fingerprint.hash == CacheHelper.hash(\n            path=local_distributions_by_pin[locked_req.pin].path,\n            hasher=lambda: hashlib.new(fingerprint.algorithm),\n        ), (\n            \"Expected the fingerprint of the downloaded distribution to match the fingerprint \"\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e64fbcf39f5d0eb3:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pip.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 27
          },
          "region" : {
            "startLine" : 315,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 313,
            "endLine" : 317,
            "snippet" : {
              "text" : "    pip_w_linked_ppp = create_pip(current_interpreter, PEX_PYTHON_PATH=binary_link)\n    print(\"binary link real path resolves to: {}\".format(os.path.realpath(binary_link)))\n    venv_contents_hash = hashlib.sha1(\n        json.dumps(\n            {\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "885393cb9048036b:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 28
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import os\nimport subprocess\nfrom hashlib import sha1\nfrom textwrap import dedent\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a2e16c2192b9f3c:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "        # type: (str) -> str\n        \"\"\"Return a reproducible hash of the contents of a loose PEX; excluding all `.pyc` files.\"\"\"\n        digest = hashlib.sha1()\n        hashing.dir_hash(\n            directory=directory,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25f0038932bf5c23:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 118,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 116,
            "endLine" : 120,
            "snippet" : {
              "text" : "        # type: (...) -> str\n        \"\"\"Return a reproducible hash of the contents of a zip; excluding all `.pyc` files.\"\"\"\n        digest = hashlib.sha1()\n        hashing.zip_hash(\n            zip_path=zip_path,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f2fbf50d58ed25d7:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 29
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "import shutil\nimport tempfile\nfrom hashlib import sha1\nfrom site import makepath  # type: ignore[attr-defined]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "be0bbf98b3a91103:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/variables.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 30
          },
          "region" : {
            "startLine" : 841,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 839,
            "endLine" : 843,
            "snippet" : {
              "text" : "        venv_contents[\"interpreter\"] = os.path.realpath(interpreter_path)\n\n    venv_contents_hash = hashlib.sha1(\n        json.dumps(venv_contents, sort_keys=True).encode(\"utf-8\")\n    ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ece003b18702969:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pex/vendor/_vendored/wheel/wheel/wheelfile.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 31
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 26,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "    \"\"\"\n\n    _default_algorithm = hashlib.sha256\n\n    def __init__(self, file, mode='r', compression=ZIP_DEFLATED):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a65fd6c46e549efe:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:pantsbuild/pex/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}