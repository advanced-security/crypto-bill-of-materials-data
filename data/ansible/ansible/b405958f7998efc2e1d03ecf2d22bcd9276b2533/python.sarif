{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "lib/ansible/parsing/vault/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "test/lib/ansible_test/_internal/commands/sanity/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/plugins/inventory/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/galaxy/collection/__init__.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/cli/scripts/ansible_connection_cli_stub.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/galaxy/api.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/module_utils/basic.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "test/integration/targets/ansible-galaxy-collection/files/build_bad_tar.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/galaxy/collection/concrete_artifact_manager.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/module_utils/network/common/config.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/module_utils/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/plugins/filter/core.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/utils/hashing.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "hacking/azp/incidental.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/modules/known_hosts.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/vars/manager.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_get.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_put.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/plugins/lookup/password.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 19
      }
    }, {
      "location" : {
        "uri" : "packaging/release.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 20
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/plugins/connection/ssh.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 21
      }
    }, {
      "location" : {
        "uri" : "test/units/galaxy/test_collection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 22
      }
    }, {
      "location" : {
        "uri" : "lib/ansible/module_utils/urls.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 23
      }
    }, {
      "location" : {
        "uri" : "test/units/ansible_test/ci/util.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 24
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1188,
            "startColumn" : 51,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1186,
            "endLine" : 1190,
            "snippet" : {
              "text" : "    @staticmethod\n    def _encrypt_cryptography(b_plaintext, b_key1, b_key2, b_iv):\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        encryptor = cipher.encryptor()\n        padder = padding.PKCS7(algorithms.AES.block_size).padder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97932c8c2082f1a1:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1246,
            "startColumn" : 51,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1244,
            "endLine" : 1248,
            "snippet" : {
              "text" : "            raise AnsibleVaultError('HMAC verification failed: %s' % e)\n\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        decryptor = cipher.decryptor()\n        unpadder = padding.PKCS7(128).unpadder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "607cfca172f6398d:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1158,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1156,
            "endLine" : 1160,
            "snippet" : {
              "text" : "    def _create_key_cryptography(b_password, b_salt, key_length, iv_length):\n        kdf = PBKDF2HMAC(\n            algorithm=hashes.SHA256(),\n            length=2 * key_length + iv_length,\n            salt=b_salt,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1a7c2921e92dbd5:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1188,
            "startColumn" : 27,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1186,
            "endLine" : 1190,
            "snippet" : {
              "text" : "    @staticmethod\n    def _encrypt_cryptography(b_plaintext, b_key1, b_key2, b_iv):\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        encryptor = cipher.encryptor()\n        padder = padding.PKCS7(algorithms.AES.block_size).padder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97932c8c2082f1a1:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1188,
            "startColumn" : 51,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1186,
            "endLine" : 1190,
            "snippet" : {
              "text" : "    @staticmethod\n    def _encrypt_cryptography(b_plaintext, b_key1, b_key2, b_iv):\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        encryptor = cipher.encryptor()\n        padder = padding.PKCS7(algorithms.AES.block_size).padder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97932c8c2082f1a1:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1195,
            "startColumn" : 29,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1193,
            "endLine" : 1197,
            "snippet" : {
              "text" : "\n        # COMBINE SALT, DIGEST AND DATA\n        hmac = HMAC(b_key2, hashes.SHA256(), CRYPTOGRAPHY_BACKEND)\n        hmac.update(b_ciphertext)\n        b_hmac = hmac.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "37b61165337f34ce:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1239,
            "startColumn" : 29,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1237,
            "endLine" : 1241,
            "snippet" : {
              "text" : "        # b_key1, b_key2, b_iv = self._gen_key_initctr(b_password, b_salt)\n        # EXIT EARLY IF DIGEST DOESN'T MATCH\n        hmac = HMAC(b_key2, hashes.SHA256(), CRYPTOGRAPHY_BACKEND)\n        hmac.update(b_ciphertext)\n        try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "155321a62eb2580e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1246,
            "startColumn" : 27,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1244,
            "endLine" : 1248,
            "snippet" : {
              "text" : "            raise AnsibleVaultError('HMAC verification failed: %s' % e)\n\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        decryptor = cipher.decryptor()\n        unpadder = padding.PKCS7(128).unpadder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "607cfca172f6398d:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1246,
            "startColumn" : 51,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1244,
            "endLine" : 1248,
            "snippet" : {
              "text" : "            raise AnsibleVaultError('HMAC verification failed: %s' % e)\n\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        decryptor = cipher.decryptor()\n        unpadder = padding.PKCS7(128).unpadder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "607cfca172f6398d:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 59,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "    from cryptography.hazmat.primitives import hashes, padding\n    from cryptography.hazmat.primitives.hmac import HMAC\n    from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\n    from cryptography.hazmat.primitives.ciphers import (\n        Cipher as C_Cipher, algorithms, modes\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ab7b07e2843c1a1:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/commands/sanity/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 1182,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 1180,
            "endLine" : 1184,
            "snippet" : {
              "text" : "    serialized_commands = json.dumps([make_pip_command_hashable(command) for command in commands], indent=4)\n\n    return hashlib.sha256(to_bytes(serialized_commands)).hexdigest()[:8]\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6dc16a21bc795d13:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 72,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "        assert isinstance(private_key, ec.EllipticCurvePrivateKey)\n\n        signature_raw_bytes = private_key.sign(payload_bytes, ec.ECDSA(hashes.SHA256()))\n\n        return signature_raw_bytes\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc2211d957962b00:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 63,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "        assert isinstance(private_key, ec.EllipticCurvePrivateKey)\n\n        signature_raw_bytes = private_key.sign(payload_bytes, ec.ECDSA(hashes.SHA256()))\n\n        return signature_raw_bytes\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc2211d957962b00:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 171,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 169,
            "endLine" : 173,
            "snippet" : {
              "text" : "        from cryptography.hazmat.primitives.asymmetric import ec\n\n        private_key = ec.generate_private_key(ec.SECP384R1(), default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1167ce5de9301a52:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/inventory/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 312,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 310,
            "endLine" : 314,
            "snippet" : {
              "text" : "        ''' create predictable unique prefix for plugin/inventory '''\n\n        m = hashlib.sha1()\n        m.update(to_bytes(self.NAME, errors='surrogate_or_strict'))\n        d1 = m.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d74b4faf0541c40d:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/inventory/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 316,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 314,
            "endLine" : 318,
            "snippet" : {
              "text" : "        d1 = m.hexdigest()\n\n        n = hashlib.sha1()\n        n.update(to_bytes(path, errors='surrogate_or_strict'))\n        d2 = n.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b28d5ab3ce30a23c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/galaxy/collection/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 30,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 28,
            "endLine" : 32,
            "snippet" : {
              "text" : "from contextlib import contextmanager\nfrom dataclasses import dataclass\nfrom hashlib import sha256\nfrom io import BytesIO\nfrom importlib.metadata import distribution\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "797a385d7120b04e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/cli/scripts/ansible_connection_cli_stub.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "\n    data_hash = to_text(byte_stream.readline().strip())\n    if data_hash != hashlib.sha1(data).hexdigest():\n        raise Exception(\"Read {0} bytes, but data did not match checksum\".format(size))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ded04169c9ba54ca:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/galaxy/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 666,
            "startColumn" : 69,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 664,
            "endLine" : 668,
            "snippet" : {
              "text" : "\n        with open(b_collection_path, 'rb') as collection_tar:\n            sha256 = secure_hash_s(collection_tar.read(), hash_func=hashlib.sha256)\n\n        content_type, b_form_data = prepare_multipart(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "48b9b933979c5d95:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/module_utils/basic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 105,
            "startColumn" : 31,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 103,
            "endLine" : 107,
            "snippet" : {
              "text" : "        # Algorithms in Python 2.7.x (used only for Python 2.7.0 through 2.7.8)\n        # https://docs.python.org/2.7/library/hashlib.html#hashlib.hashlib.algorithms\n        algorithm_names = set(hashlib.algorithms)\n\n    algorithms = {}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "123b7eda8212fbc7:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integration/targets/ansible-galaxy-collection/files/build_bad_tar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "\n    if update_files:\n        sha256 = hashlib.sha256()\n        sha256.update(b_content)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d83be6bb2d67c53c:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integration/targets/ansible-galaxy-collection/files/build_bad_tar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 70,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 68,
            "endLine" : 72,
            "snippet" : {
              "text" : "\n    b_files = json.dumps(files).encode('utf-8')\n    b_files_hash = hashlib.sha256()\n    b_files_hash.update(b_files)\n    manifest['file_manifest_file']['chksum_sha256'] = b_files_hash.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4d7b5fbe35685a35:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/galaxy/collection/concrete_artifact_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "\nfrom contextlib import contextmanager\nfrom hashlib import sha256\nfrom urllib.error import URLError\nfrom urllib.parse import urldefrag\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c85f8db27623d38:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/module_utils/network/common/config.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 193,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 191,
            "endLine" : 195,
            "snippet" : {
              "text" : "    @property\n    def sha1(self):\n        sha1 = hashlib.sha1()\n        sha1.update(to_bytes(str(self), errors=\"surrogate_or_strict\"))\n        return sha1.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "53249635aa65f9ef:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/module_utils/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "    # They should be rehydrated on the receiving end\n    src = src.replace(b'\\r', br'\\r')\n    data_hash = to_bytes(hashlib.sha1(src).hexdigest())\n\n    os.write(fd, b'%d\\n' % len(src))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "773603da200d83c5:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/filter/core.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 266,
            "startColumn" : 29,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 264,
            "endLine" : 268,
            "snippet" : {
              "text" : "\n\ndef get_hash(data, hashtype='sha1'):\n    try:\n        h = hashlib.new(hashtype)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4db1e27ca0faad1d:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/utils/hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "import os\n\nfrom hashlib import sha1\n\ntry:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "180ceb0c6f1d721d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/utils/hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "\ntry:\n    from hashlib import md5 as _md5\nexcept ImportError:\n    # Assume we're running in FIPS mode here\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e8b34967602017b0:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "hacking/azp/incidental.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 154,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 152,
            "endLine" : 156,
            "snippet" : {
              "text" : "\n    # generate a unique subdirectory in the output directory based on the input files being used\n    path_hash = hashlib.sha256(b'\\n'.join(p.encode() for p in coverage_data.paths)).hexdigest()\n    output_path = os.path.abspath(os.path.join(args.output, path_hash))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d376b711e6a34251:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/modules/known_hosts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 297,
            "startColumn" : 54,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 295,
            "endLine" : 299,
            "snippet" : {
              "text" : "def hash_host_key(host, key):\n    hmac_key = os.urandom(20)\n    hashed_host = hmac.new(hmac_key, to_bytes(host), hashlib.sha1).digest()\n    parts = key.strip().split()\n    # @ indicates the optional marker field used for @cert-authority or @revoked\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5d399ce85a6f71a:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/vars/manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "from collections import defaultdict\nfrom collections.abc import Mapping, MutableMapping, Sequence\nfrom hashlib import sha1\n\nfrom jinja2.exceptions import UndefinedError\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "998993316ffee123:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_get.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "            raise\n\n        sha1 = hashlib.sha1()\n        old_content_b = to_bytes(old_content, errors=\"surrogate_or_strict\")\n        sha1.update(old_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e3cddf3a0843425a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_get.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 165,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 163,
            "endLine" : 167,
            "snippet" : {
              "text" : "        checksum_old = sha1.digest()\n\n        sha1 = hashlib.sha1()\n        new_content_b = to_bytes(new_content, errors=\"surrogate_or_strict\")\n        sha1.update(new_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eccab91afa443c63:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_put.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 179,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 177,
            "endLine" : 181,
            "snippet" : {
              "text" : "            raise\n\n        sha1 = hashlib.sha1()\n        old_content_b = to_bytes(old_content, errors=\"surrogate_or_strict\")\n        sha1.update(old_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e3cddf3a0843425a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_put.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 184,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 182,
            "endLine" : 186,
            "snippet" : {
              "text" : "        checksum_old = sha1.digest()\n\n        sha1 = hashlib.sha1()\n        new_content_b = to_bytes(new_content, errors=\"surrogate_or_strict\")\n        sha1.update(new_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eccab91afa443c63:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/lookup/password.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 270,
            "startColumn" : 54,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 268,
            "endLine" : 272,
            "snippet" : {
              "text" : "    first_process = False\n    b_pathdir = os.path.dirname(b_path)\n    lockfile_name = to_bytes(\"%s.ansible_lockfile\" % hashlib.sha1(b_path).hexdigest())\n    lockfile = os.path.join(b_pathdir, lockfile_name)\n    if not os.path.exists(lockfile) and b_path != to_bytes('/dev/null'):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5f22c625aabfdfbd:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 679,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 677,
            "endLine" : 681,
            "snippet" : {
              "text" : "    requirements_content += release_requirements\n\n    requirements_hash = hashlib.sha256(requirements_content.encode()).hexdigest()[:8]\n\n    python_version = \".\".join(map(str, sys.version_info[:2]))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d13151add58b858c:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 870,
            "startColumn" : 24,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 868,
            "endLine" : 872,
            "snippet" : {
              "text" : "    \"\"\"Return the digest for the specified file.\"\"\"\n    # TODO: use hashlib.file_digest once Python 3.11 is the minimum supported version\n    return hashlib.new(DIGEST_ALGORITHM, path.read_bytes()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7e729a96fa419b2d:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 382,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 380,
            "endLine" : 384,
            "snippet" : {
              "text" : "ANSIBLE_VERSION_FORMAT = \"__version__ = '{version}'\"\n\nDIGEST_ALGORITHM = \"sha256\"\n\n# These endpoint names match those defined as defaults in twine.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8dc26fb8859bb9f8:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 382,
            "endColumn" : 17
          },
          "contextRegion" : {
            "startLine" : 380,
            "endLine" : 384,
            "snippet" : {
              "text" : "ANSIBLE_VERSION_FORMAT = \"__version__ = '{version}'\"\n\nDIGEST_ALGORITHM = \"sha256\"\n\n# These endpoint names match those defined as defaults in twine.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8dc26fb8859bb9f8:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/connection/ssh.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 626,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 624,
            "endLine" : 628,
            "snippet" : {
              "text" : "        if pid:\n            pstring += '-%s' % to_text(pid)\n        m = hashlib.sha1()\n        m.update(to_bytes(pstring))\n        digest = m.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68df5712580637a7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/units/galaxy/test_collection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import uuid\n\nfrom hashlib import sha256\nfrom io import BytesIO\nfrom unittest.mock import MagicMock, mock_open, patch\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7175ab3c74ee181:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/module_utils/urls.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 612,
            "startColumn" : 26,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 610,
            "endLine" : 614,
            "snippet" : {
              "text" : "    # If the signature hash algorithm is unknown/unsupported or md5/sha1 we must use SHA256.\n    if not hash_algorithm or hash_algorithm.name in ('md5', 'sha1'):\n        hash_algorithm = hashes.SHA256()\n\n    digest = hashes.Hash(hash_algorithm, default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "81c88bb568544a18:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/units/ansible_test/ci/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 18,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 50,
            "snippet" : {
              "text" : "        base64.b64decode(signature.encode()),\n        payload_bytes,\n        ec.ECDSA(hashes.SHA256()),\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e88172ff39c846f:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 171,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 169,
            "endLine" : 173,
            "snippet" : {
              "text" : "        from cryptography.hazmat.primitives.asymmetric import ec\n\n        private_key = ec.generate_private_key(ec.SECP384R1(), default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1167ce5de9301a52:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1158,
            "startColumn" : 23,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1156,
            "endLine" : 1160,
            "snippet" : {
              "text" : "    def _create_key_cryptography(b_password, b_salt, key_length, iv_length):\n        kdf = PBKDF2HMAC(\n            algorithm=hashes.SHA256(),\n            length=2 * key_length + iv_length,\n            salt=b_salt,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b1a7c2921e92dbd5:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1195,
            "startColumn" : 29,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1193,
            "endLine" : 1197,
            "snippet" : {
              "text" : "\n        # COMBINE SALT, DIGEST AND DATA\n        hmac = HMAC(b_key2, hashes.SHA256(), CRYPTOGRAPHY_BACKEND)\n        hmac.update(b_ciphertext)\n        b_hmac = hmac.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "37b61165337f34ce:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1239,
            "startColumn" : 29,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1237,
            "endLine" : 1241,
            "snippet" : {
              "text" : "        # b_key1, b_key2, b_iv = self._gen_key_initctr(b_password, b_salt)\n        # EXIT EARLY IF DIGEST DOESN'T MATCH\n        hmac = HMAC(b_key2, hashes.SHA256(), CRYPTOGRAPHY_BACKEND)\n        hmac.update(b_ciphertext)\n        try:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "155321a62eb2580e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/commands/sanity/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 1182,
            "startColumn" : 12,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 1180,
            "endLine" : 1184,
            "snippet" : {
              "text" : "    serialized_commands = json.dumps([make_pip_command_hashable(command) for command in commands], indent=4)\n\n    return hashlib.sha256(to_bytes(serialized_commands)).hexdigest()[:8]\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6dc16a21bc795d13:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 72,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "        assert isinstance(private_key, ec.EllipticCurvePrivateKey)\n\n        signature_raw_bytes = private_key.sign(payload_bytes, ec.ECDSA(hashes.SHA256()))\n\n        return signature_raw_bytes\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc2211d957962b00:1",
        "primaryLocationStartColumnFingerprint" : "63"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/inventory/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 312,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 310,
            "endLine" : 314,
            "snippet" : {
              "text" : "        ''' create predictable unique prefix for plugin/inventory '''\n\n        m = hashlib.sha1()\n        m.update(to_bytes(self.NAME, errors='surrogate_or_strict'))\n        d1 = m.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d74b4faf0541c40d:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/inventory/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 316,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 314,
            "endLine" : 318,
            "snippet" : {
              "text" : "        d1 = m.hexdigest()\n\n        n = hashlib.sha1()\n        n.update(to_bytes(path, errors='surrogate_or_strict'))\n        d2 = n.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b28d5ab3ce30a23c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/galaxy/collection/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 30,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 28,
            "endLine" : 32,
            "snippet" : {
              "text" : "from contextlib import contextmanager\nfrom dataclasses import dataclass\nfrom hashlib import sha256\nfrom io import BytesIO\nfrom importlib.metadata import distribution\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "797a385d7120b04e:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/cli/scripts/ansible_connection_cli_stub.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 44,
            "startColumn" : 21,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 42,
            "endLine" : 46,
            "snippet" : {
              "text" : "\n    data_hash = to_text(byte_stream.readline().strip())\n    if data_hash != hashlib.sha1(data).hexdigest():\n        raise Exception(\"Read {0} bytes, but data did not match checksum\".format(size))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ded04169c9ba54ca:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/galaxy/api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 666,
            "startColumn" : 69,
            "endColumn" : 83
          },
          "contextRegion" : {
            "startLine" : 664,
            "endLine" : 668,
            "snippet" : {
              "text" : "\n        with open(b_collection_path, 'rb') as collection_tar:\n            sha256 = secure_hash_s(collection_tar.read(), hash_func=hashlib.sha256)\n\n        content_type, b_form_data = prepare_multipart(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "48b9b933979c5d95:1",
        "primaryLocationStartColumnFingerprint" : "56"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/module_utils/basic.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 105,
            "startColumn" : 31,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 103,
            "endLine" : 107,
            "snippet" : {
              "text" : "        # Algorithms in Python 2.7.x (used only for Python 2.7.0 through 2.7.8)\n        # https://docs.python.org/2.7/library/hashlib.html#hashlib.hashlib.algorithms\n        algorithm_names = set(hashlib.algorithms)\n\n    algorithms = {}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "123b7eda8212fbc7:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integration/targets/ansible-galaxy-collection/files/build_bad_tar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 18,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "\n    if update_files:\n        sha256 = hashlib.sha256()\n        sha256.update(b_content)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d83be6bb2d67c53c:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/integration/targets/ansible-galaxy-collection/files/build_bad_tar.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 70,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 68,
            "endLine" : 72,
            "snippet" : {
              "text" : "\n    b_files = json.dumps(files).encode('utf-8')\n    b_files_hash = hashlib.sha256()\n    b_files_hash.update(b_files)\n    manifest['file_manifest_file']['chksum_sha256'] = b_files_hash.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4d7b5fbe35685a35:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/galaxy/collection/concrete_artifact_manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "\nfrom contextlib import contextmanager\nfrom hashlib import sha256\nfrom urllib.error import URLError\nfrom urllib.parse import urldefrag\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c85f8db27623d38:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/module_utils/network/common/config.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 193,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 191,
            "endLine" : 195,
            "snippet" : {
              "text" : "    @property\n    def sha1(self):\n        sha1 = hashlib.sha1()\n        sha1.update(to_bytes(str(self), errors=\"surrogate_or_strict\"))\n        return sha1.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "53249635aa65f9ef:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/module_utils/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "    # They should be rehydrated on the receiving end\n    src = src.replace(b'\\r', br'\\r')\n    data_hash = to_bytes(hashlib.sha1(src).hexdigest())\n\n    os.write(fd, b'%d\\n' % len(src))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "773603da200d83c5:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/filter/core.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 266,
            "startColumn" : 29,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 264,
            "endLine" : 268,
            "snippet" : {
              "text" : "\n\ndef get_hash(data, hashtype='sha1'):\n    try:\n        h = hashlib.new(hashtype)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4db1e27ca0faad1d:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/utils/hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 22,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 20,
            "endLine" : 24,
            "snippet" : {
              "text" : "import os\n\nfrom hashlib import sha1\n\ntry:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "180ceb0c6f1d721d:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/utils/hashing.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "\ntry:\n    from hashlib import md5 as _md5\nexcept ImportError:\n    # Assume we're running in FIPS mode here\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e8b34967602017b0:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "hacking/azp/incidental.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 154,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 152,
            "endLine" : 156,
            "snippet" : {
              "text" : "\n    # generate a unique subdirectory in the output directory based on the input files being used\n    path_hash = hashlib.sha256(b'\\n'.join(p.encode() for p in coverage_data.paths)).hexdigest()\n    output_path = os.path.abspath(os.path.join(args.output, path_hash))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d376b711e6a34251:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/modules/known_hosts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 297,
            "startColumn" : 54,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 295,
            "endLine" : 299,
            "snippet" : {
              "text" : "def hash_host_key(host, key):\n    hmac_key = os.urandom(20)\n    hashed_host = hmac.new(hmac_key, to_bytes(host), hashlib.sha1).digest()\n    parts = key.strip().split()\n    # @ indicates the optional marker field used for @cert-authority or @revoked\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5d399ce85a6f71a:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/vars/manager.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "from collections import defaultdict\nfrom collections.abc import Mapping, MutableMapping, Sequence\nfrom hashlib import sha1\n\nfrom jinja2.exceptions import UndefinedError\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "998993316ffee123:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_get.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "            raise\n\n        sha1 = hashlib.sha1()\n        old_content_b = to_bytes(old_content, errors=\"surrogate_or_strict\")\n        sha1.update(old_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e3cddf3a0843425a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_get.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 165,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 163,
            "endLine" : 167,
            "snippet" : {
              "text" : "        checksum_old = sha1.digest()\n\n        sha1 = hashlib.sha1()\n        new_content_b = to_bytes(new_content, errors=\"surrogate_or_strict\")\n        sha1.update(new_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eccab91afa443c63:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_put.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 179,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 177,
            "endLine" : 181,
            "snippet" : {
              "text" : "            raise\n\n        sha1 = hashlib.sha1()\n        old_content_b = to_bytes(old_content, errors=\"surrogate_or_strict\")\n        sha1.update(old_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e3cddf3a0843425a:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/support/network-integration/collections/ansible_collections/ansible/netcommon/plugins/action/net_put.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 184,
            "startColumn" : 16,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 182,
            "endLine" : 186,
            "snippet" : {
              "text" : "        checksum_old = sha1.digest()\n\n        sha1 = hashlib.sha1()\n        new_content_b = to_bytes(new_content, errors=\"surrogate_or_strict\")\n        sha1.update(new_content_b)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eccab91afa443c63:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/lookup/password.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 19
          },
          "region" : {
            "startLine" : 270,
            "startColumn" : 54,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 268,
            "endLine" : 272,
            "snippet" : {
              "text" : "    first_process = False\n    b_pathdir = os.path.dirname(b_path)\n    lockfile_name = to_bytes(\"%s.ansible_lockfile\" % hashlib.sha1(b_path).hexdigest())\n    lockfile = os.path.join(b_pathdir, lockfile_name)\n    if not os.path.exists(lockfile) and b_path != to_bytes('/dev/null'):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5f22c625aabfdfbd:1",
        "primaryLocationStartColumnFingerprint" : "49"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 679,
            "startColumn" : 25,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 677,
            "endLine" : 681,
            "snippet" : {
              "text" : "    requirements_content += release_requirements\n\n    requirements_hash = hashlib.sha256(requirements_content.encode()).hexdigest()[:8]\n\n    python_version = \".\".join(map(str, sys.version_info[:2]))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d13151add58b858c:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 870,
            "startColumn" : 24,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 868,
            "endLine" : 872,
            "snippet" : {
              "text" : "    \"\"\"Return the digest for the specified file.\"\"\"\n    # TODO: use hashlib.file_digest once Python 3.11 is the minimum supported version\n    return hashlib.new(DIGEST_ALGORITHM, path.read_bytes()).hexdigest()\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7e729a96fa419b2d:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 382,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 380,
            "endLine" : 384,
            "snippet" : {
              "text" : "ANSIBLE_VERSION_FORMAT = \"__version__ = '{version}'\"\n\nDIGEST_ALGORITHM = \"sha256\"\n\n# These endpoint names match those defined as defaults in twine.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8dc26fb8859bb9f8:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "packaging/release.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 20
          },
          "region" : {
            "startLine" : 382,
            "endColumn" : 17
          },
          "contextRegion" : {
            "startLine" : 380,
            "endLine" : 384,
            "snippet" : {
              "text" : "ANSIBLE_VERSION_FORMAT = \"__version__ = '{version}'\"\n\nDIGEST_ALGORITHM = \"sha256\"\n\n# These endpoint names match those defined as defaults in twine.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8dc26fb8859bb9f8:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/plugins/connection/ssh.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 21
          },
          "region" : {
            "startLine" : 626,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 624,
            "endLine" : 628,
            "snippet" : {
              "text" : "        if pid:\n            pstring += '-%s' % to_text(pid)\n        m = hashlib.sha1()\n        m.update(to_bytes(pstring))\n        digest = m.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "68df5712580637a7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/units/galaxy/test_collection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 22
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "import uuid\n\nfrom hashlib import sha256\nfrom io import BytesIO\nfrom unittest.mock import MagicMock, mock_open, patch\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d7175ab3c74ee181:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/module_utils/urls.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 23
          },
          "region" : {
            "startLine" : 612,
            "startColumn" : 26,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 610,
            "endLine" : 614,
            "snippet" : {
              "text" : "    # If the signature hash algorithm is unknown/unsupported or md5/sha1 we must use SHA256.\n    if not hash_algorithm or hash_algorithm.name in ('md5', 'sha1'):\n        hash_algorithm = hashes.SHA256()\n\n    digest = hashes.Hash(hash_algorithm, default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "81c88bb568544a18:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/units/ansible_test/ci/util.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 24
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 18,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 50,
            "snippet" : {
              "text" : "        base64.b64decode(signature.encode()),\n        payload_bytes,\n        ec.ECDSA(hashes.SHA256()),\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e88172ff39c846f:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1188,
            "startColumn" : 27,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1186,
            "endLine" : 1190,
            "snippet" : {
              "text" : "    @staticmethod\n    def _encrypt_cryptography(b_plaintext, b_key1, b_key2, b_iv):\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        encryptor = cipher.encryptor()\n        padder = padding.PKCS7(algorithms.AES.block_size).padder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97932c8c2082f1a1:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1246,
            "startColumn" : 27,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1244,
            "endLine" : 1248,
            "snippet" : {
              "text" : "            raise AnsibleVaultError('HMAC verification failed: %s' % e)\n\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        decryptor = cipher.decryptor()\n        unpadder = padding.PKCS7(128).unpadder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "607cfca172f6398d:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm SECP384R1 with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 171,
            "startColumn" : 23,
            "endColumn" : 81
          },
          "contextRegion" : {
            "startLine" : 169,
            "endLine" : 173,
            "snippet" : {
              "text" : "        from cryptography.hazmat.primitives.asymmetric import ec\n\n        private_key = ec.generate_private_key(ec.SECP384R1(), default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1167ce5de9301a52:1",
        "primaryLocationStartColumnFingerprint" : "14"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 171,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 169,
            "endLine" : 173,
            "snippet" : {
              "text" : "        from cryptography.hazmat.primitives.asymmetric import ec\n\n        private_key = ec.generate_private_key(ec.SECP384R1(), default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 160,
            "startColumn" : 63,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 158,
            "endLine" : 162,
            "snippet" : {
              "text" : "        assert isinstance(private_key, ec.EllipticCurvePrivateKey)\n\n        signature_raw_bytes = private_key.sign(payload_bytes, ec.ECDSA(hashes.SHA256()))\n\n        return signature_raw_bytes\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bc2211d957962b00:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm PBKDF2HMAC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1157,
            "startColumn" : 15,
            "endLine" : 1162,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 1155,
            "endLine" : 1164,
            "snippet" : {
              "text" : "    @staticmethod\n    def _create_key_cryptography(b_password, b_salt, key_length, iv_length):\n        kdf = PBKDF2HMAC(\n            algorithm=hashes.SHA256(),\n            length=2 * key_length + iv_length,\n            salt=b_salt,\n            iterations=10000,\n            backend=CRYPTOGRAPHY_BACKEND)\n        b_derivedkey = kdf.derive(b_password)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f97a8fc0094447fa:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1188,
            "startColumn" : 51,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1186,
            "endLine" : 1190,
            "snippet" : {
              "text" : "    @staticmethod\n    def _encrypt_cryptography(b_plaintext, b_key1, b_key2, b_iv):\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        encryptor = cipher.encryptor()\n        padder = padding.PKCS7(algorithms.AES.block_size).padder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "97932c8c2082f1a1:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CTR"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "lib/ansible/parsing/vault/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 1246,
            "startColumn" : 51,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 1244,
            "endLine" : 1248,
            "snippet" : {
              "text" : "            raise AnsibleVaultError('HMAC verification failed: %s' % e)\n\n        cipher = C_Cipher(algorithms.AES(b_key1), modes.CTR(b_iv), CRYPTOGRAPHY_BACKEND)\n        decryptor = cipher.decryptor()\n        unpadder = padding.PKCS7(128).unpadder()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "607cfca172f6398d:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1 with key size (in bits) 384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "test/lib/ansible_test/_internal/ci/__init__.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 171,
            "startColumn" : 47,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 169,
            "endLine" : 173,
            "snippet" : {
              "text" : "        from cryptography.hazmat.primitives.asymmetric import ec\n\n        private_key = ec.generate_private_key(ec.SECP384R1(), default_backend())\n        public_key = private_key.public_key()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1167ce5de9301a52:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:ansible/ansible/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}