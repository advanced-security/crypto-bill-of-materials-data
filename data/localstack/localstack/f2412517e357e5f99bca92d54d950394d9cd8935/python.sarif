{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "localstack/utils/crypto.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "localstack/services/s3/v3/storage/ephemeral.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "localstack/services/apigateway/helpers.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "localstack/services/lambda_/invocation/lambda_service.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "localstack/utils/analytics/logger.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "localstack/services/s3/v3/models.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "localstack/services/sqs/models.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "localstack/services/kms/models.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "localstack/aws/handlers/partition_rewriter.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "localstack/services/sqs/provider.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "localstack/services/kms/provider.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "localstack/services/sns/publisher.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "localstack/utils/strings.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "tests/aws/services/kms/test_kms.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "tests/aws/services/lambda_/test_lambda_api.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    }, {
      "location" : {
        "uri" : "tests/unit/test_partition_rewriter.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 16
      }
    }, {
      "location" : {
        "uri" : "tests/aws/services/s3/test_s3.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 17
      }
    }, {
      "location" : {
        "uri" : "localstack/services/s3/utils.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 18
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 21,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "def encrypt(key: bytes, message: bytes, iv: bytes = None, aad: bytes = None) -> Tuple[bytes, bytes]:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8759856d022a7938:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm GCM"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 42,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "def encrypt(key: bytes, message: bytes, iv: bytes = None, aad: bytes = None) -> Tuple[bytes, bytes]:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8759856d022a7938:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 181,
            "startColumn" : 21,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 179,
            "endLine" : 183,
            "snippet" : {
              "text" : ") -> bytes:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "710ee091381962a8:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm GCM"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 181,
            "startColumn" : 42,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 179,
            "endLine" : 183,
            "snippet" : {
              "text" : ") -> bytes:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "710ee091381962a8:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/v3/storage/ephemeral.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 132,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 130,
            "endLine" : 134,
            "snippet" : {
              "text" : "            file.truncate()\n\n            etag = hashlib.md5(usedforsecurity=False)\n\n            with read_lock:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4efd159e397b351d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/v3/storage/ephemeral.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 198,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 196,
            "endLine" : 200,
            "snippet" : {
              "text" : "    def etag(self) -> str:\n        if not self._etag:\n            etag = hashlib.md5(usedforsecurity=False)\n            original_pos = self._pos\n            self._pos = 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6fec8dc621d78e0:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 41,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 39,
            "endLine" : 43,
            "snippet" : {
              "text" : "        match alg:\n            case HashAlgorithm.MD5:\n                hash_inp = hashlib.md5(inp_enc)\n            case HashAlgorithm.SHA_1:\n                hash_inp = hashlib.sha1(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "66a49335d024de34:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "                hash_inp = hashlib.md5(inp_enc)\n            case HashAlgorithm.SHA_1:\n                hash_inp = hashlib.sha1(inp_enc)\n            case HashAlgorithm.SHA_256:\n                hash_inp = hashlib.sha256(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2e9a8476a03de67a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "                hash_inp = hashlib.sha1(inp_enc)\n            case HashAlgorithm.SHA_256:\n                hash_inp = hashlib.sha256(inp_enc)\n            case HashAlgorithm.SHA_384:\n                hash_inp = hashlib.sha384(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16e0c209e8d0e95d:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "                hash_inp = hashlib.sha256(inp_enc)\n            case HashAlgorithm.SHA_384:\n                hash_inp = hashlib.sha384(inp_enc)\n            case HashAlgorithm.SHA_512:\n                hash_inp = hashlib.sha512(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7990d5384a55149b:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "                hash_inp = hashlib.sha384(inp_enc)\n            case HashAlgorithm.SHA_512:\n                hash_inp = hashlib.sha512(inp_enc)\n        hash_value: str = hash_inp.hexdigest()\n        return hash_value\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a042f059c2fc5d16:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/apigateway/helpers.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1568,
            "startColumn" : 12,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 1566,
            "endLine" : 1570,
            "snippet" : {
              "text" : "    TODO: use this in the future to dispatch API Gateway API invocations made to the regional domain name\n    \"\"\"\n    return hashlib.shake_128(to_bytes(domain_name)).hexdigest(4)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a9ea2f6b6877fd5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/lambda_/invocation/lambda_service.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "from concurrent.futures import Executor, Future, ThreadPoolExecutor\nfrom datetime import datetime\nfrom hashlib import sha256\nfrom pathlib import PurePosixPath, PureWindowsPath\nfrom threading import RLock\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "64e3b8f032be4ae8:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/analytics/logger.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "def get_hash(value) -> str:\n    max_length = 10\n    digest = hashlib.sha1()\n    digest.update(to_bytes(str(value)))\n    result = digest.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "32e5ba97b22aacaf:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/v3/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 477,
            "startColumn" : 23,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 475,
            "endLine" : 479,
            "snippet" : {
              "text" : "        # if self.object.checksum_algorithm:\n        #     checksum_key = f\"Checksum{self.object.checksum_algorithm.upper()}\"\n        object_etag = hashlib.md5(usedforsecurity=False)\n        pos = 0\n        for index, part in enumerate(parts):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4b392a5c759c1b56:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/sqs/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 836,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 834,
            "endLine" : 838,
            "snippet" : {
              "text" : "        content_based_deduplication = not is_message_deduplication_id_required(self)\n        if not dedup_id and content_based_deduplication:\n            dedup_id = hashlib.sha256(message.get(\"Body\").encode(\"utf-8\")).hexdigest()\n        if not dedup_id:\n            raise InvalidParameterValueException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ac9ca9ba03b89f30:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a19f026f7158315:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 19,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a19f026f7158315:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 21,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n            key = ec.generate_private_key(curve)\n        elif key_spec.startswith(\"HMAC\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6d50ada461abc0a:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 309,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 307,
            "endLine" : 311,
            "snippet" : {
              "text" : "    def _get_hmac_context(self, mac_algorithm: MacAlgorithmSpec) -> hmac.HMAC:\n        if mac_algorithm == \"HMAC_SHA_224\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA224())\n        elif mac_algorithm == \"HMAC_SHA_256\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA256())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5aa216a105ad6002:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 311,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 309,
            "endLine" : 313,
            "snippet" : {
              "text" : "            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA224())\n        elif mac_algorithm == \"HMAC_SHA_256\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA256())\n        elif mac_algorithm == \"HMAC_SHA_384\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA384())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5054fa3653b9fb31:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 313,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 311,
            "endLine" : 315,
            "snippet" : {
              "text" : "            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA256())\n        elif mac_algorithm == \"HMAC_SHA_384\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA384())\n        elif mac_algorithm == \"HMAC_SHA_512\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA512())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "793a3ae1eb396c6c:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 315,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 313,
            "endLine" : 317,
            "snippet" : {
              "text" : "            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA384())\n        elif mac_algorithm == \"HMAC_SHA_512\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA512())\n        else:\n            raise ValidationException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "59b7c2cd015d8fd0:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 330,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 328,
            "endLine" : 332,
            "snippet" : {
              "text" : "\n        if \"SHA_256\" in signing_algorithm:\n            hasher = hashes.SHA256()\n        elif \"SHA_384\" in signing_algorithm:\n            hasher = hashes.SHA384()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cca9c209c0b1e8d8:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 351,
            "startColumn" : 37,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 349,
            "endLine" : 353,
            "snippet" : {
              "text" : "        if signing_algorithm.startswith(\"RSA\"):\n            if \"PKCS\" in signing_algorithm:\n                kwargs[\"padding\"] = padding.PKCS1v15()\n            elif \"PSS\" in signing_algorithm:\n                kwargs[\"padding\"] = padding.PSS(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7db843c25bb0366f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PSS"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 353,
            "startColumn" : 37,
            "endLine" : 355,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 351,
            "endLine" : 357,
            "snippet" : {
              "text" : "                kwargs[\"padding\"] = padding.PKCS1v15()\n            elif \"PSS\" in signing_algorithm:\n                kwargs[\"padding\"] = padding.PSS(\n                    mgf=padding.MGF1(hasher), salt_length=padding.PSS.MAX_LENGTH\n                )\n            else:\n                LOG.warning(\"Unsupported padding in SigningAlgorithm '%s'\", signing_algorithm)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a80b3d18544317:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 332,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 330,
            "endLine" : 334,
            "snippet" : {
              "text" : "            hasher = hashes.SHA256()\n        elif \"SHA_384\" in signing_algorithm:\n            hasher = hashes.SHA384()\n        elif \"SHA_512\" in signing_algorithm:\n            hasher = hashes.SHA512()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c9c3fc2ff021bba:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 334,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 332,
            "endLine" : 336,
            "snippet" : {
              "text" : "            hasher = hashes.SHA384()\n        elif \"SHA_512\" in signing_algorithm:\n            hasher = hashes.SHA512()\n        else:\n            raise ValidationException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e8431466213107d5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 68,
            "endColumn" : 71
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes, hmac\nfrom cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "89b411ccf8d45891:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom localstack.aws.api.kms import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d21fd4bbc9655836:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom localstack.aws.api.kms import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d21fd4bbc9655836:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 58,
            "endLine" : 62,
            "snippet" : {
              "text" : "\nECC_CURVES = {\n    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d15d285c2758b375:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "ECC_CURVES = {\n    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "96ac840ae982a004:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8c92287d444e7fd5:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP256K1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 61,
            "endLine" : 65,
            "snippet" : {
              "text" : "    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb4d44d71d697fb7:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/aws/handlers/partition_rewriter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 143,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 141,
            "endLine" : 145,
            "snippet" : {
              "text" : "        # if a Content-MD5 was given, we need to update it after a potential modification\n        if \"Content-MD5\" in forward_rewritten_headers:\n            md = hashlib.md5(forward_rewritten_body).digest()\n            content_md5 = base64.b64encode(md).decode(\"utf-8\")\n            forward_rewritten_headers[\"Content-MD5\"] = content_md5\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d10237c977e2688:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/sqs/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "    if not isinstance(message_attributes, dict):\n        return\n    hash = hashlib.md5()\n\n    for attrName in sorted(message_attributes.keys()):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d69c41bc454192e6:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1065,
            "startColumn" : 31,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1063,
            "endLine" : 1067,
            "snippet" : {
              "text" : "\n        if import_state.wrapping_algo == AlgorithmSpec.RSAES_PKCS1_V1_5:\n            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d4bf32a1d58c92e:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1067,
            "startColumn" : 57,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1065,
            "endLine" : 1069,
            "snippet" : {
              "text" : "            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4894865364f8680:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1067,
            "startColumn" : 73,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1065,
            "endLine" : 1069,
            "snippet" : {
              "text" : "            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4894865364f8680:1",
        "primaryLocationStartColumnFingerprint" : "60"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm OAEP"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1067,
            "startColumn" : 31,
            "endColumn" : 93
          },
          "contextRegion" : {
            "startLine" : 1065,
            "endLine" : 1069,
            "snippet" : {
              "text" : "            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4894865364f8680:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1069,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 1067,
            "endLine" : 1071,
            "snippet" : {
              "text" : "            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n        else:\n            raise KMSInvalidStateException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2db77f6594c0f506:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1069,
            "startColumn" : 75,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 1067,
            "endLine" : 1071,
            "snippet" : {
              "text" : "            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n        else:\n            raise KMSInvalidStateException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2db77f6594c0f506:1",
        "primaryLocationStartColumnFingerprint" : "62"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm OAEP"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1069,
            "startColumn" : 31,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1067,
            "endLine" : 1071,
            "snippet" : {
              "text" : "            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n        else:\n            raise KMSInvalidStateException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2db77f6594c0f506:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/sns/publisher.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 316,
            "startColumn" : 52,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 314,
            "endLine" : 318,
            "snippet" : {
              "text" : "                # https://docs.aws.amazon.com/sns/latest/dg/fifo-message-dedup.html\n                content = msg_context.message_content(\"sqs\")\n                kwargs[\"MessageDeduplicationId\"] = hashlib.sha256(\n                    content.encode(\"utf-8\")\n                ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1e945f345ec78a1:1",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/strings.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 144,
            "snippet" : {
              "text" : "\ndef md5(string: Union[str, bytes]) -> str:\n    m = hashlib.md5()\n    m.update(to_bytes(string))\n    return m.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9633c2e348676275:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/strings.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 163,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 161,
            "endLine" : 165,
            "snippet" : {
              "text" : "\ndef hash_sha1(string: Union[str, bytes]) -> str:\n    digest = hashlib.sha1(to_bytes(string)).digest()\n    return base64.b64encode(digest).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9cebe49900bffd7:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/strings.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 168,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 166,
            "endLine" : 170,
            "snippet" : {
              "text" : "\ndef hash_sha256(string: Union[str, bytes]) -> str:\n    digest = hashlib.sha256(to_bytes(string)).digest()\n    return base64.b64encode(digest).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f2e853800abd0709:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/kms/test_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 588,
            "startColumn" : 59,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 586,
            "endLine" : 590,
            "snippet" : {
              "text" : "        # import symmetric key (key material) into KMS\n        public_key = load_der_public_key(params[\"PublicKey\"])\n        encrypted_key = public_key.encrypt(symmetric_key, PKCS1v15())\n        describe_key_before_import = aws_client.kms.describe_key(KeyId=key_id)\n        snapshot.match(\"describe-key-before-import\", describe_key_before_import)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb59984e63971538:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/lambda_/test_lambda_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "import logging\nimport re\nfrom hashlib import sha256\nfrom io import BytesIO\nfrom typing import Callable\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c27fc3db0b5aac6:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/test_partition_rewriter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 126,
            "startColumn" : 37,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 124,
            "endLine" : 128,
            "snippet" : {
              "text" : "    data = {\"some-data-with-arn\": \"arn:aws-us-gov:iam::000000000000:role/test-role\"}\n    body = urlencode(data)\n    original_md5 = base64.b64encode(hashlib.md5(body.encode(\"utf-8\")).digest()).decode(\"utf-8\")\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7bcfebea5e5a1fe:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/test_partition_rewriter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 148,
            "startColumn" : 62,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 146,
            "endLine" : 150,
            "snippet" : {
              "text" : "    assert \"Content-MD5\" in result.headers\n    assert result.headers[\"Content-MD5\"] != original_md5\n    assert result.headers[\"Content-MD5\"] == base64.b64encode(hashlib.md5(data).digest()).decode(\n        \"utf-8\"\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84ce3f7cb6e10b4b:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2708,
            "startColumn" : 30,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 2706,
            "endLine" : 2710,
            "snippet" : {
              "text" : "        # Test for https://github.com/localstack/localstack/issues/8703\n        body = \"Hello Blob\"\n        precalculated_etag = hashlib.md5(body.encode()).hexdigest()\n        headers = {\n            \"Authorization\": mock_aws_request_headers(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1128132b39ee6760:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2799,
            "startColumn" : 40,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 2797,
            "endLine" : 2801,
            "snippet" : {
              "text" : "            \"\\r\\n0;chunk-signature=bd5c830b94346b57ddc8805ba26c44a122256c207014433bf6579b0985f21df7\\r\\n\\r\\n\"\n        )\n        content_md5 = base64.b64encode(hashlib.md5(object_data.encode()).digest()).decode()\n        headers = {\n            \"Content-Md5\": content_md5,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a616e8d86808163:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3173,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 3171,
            "endLine" : 3175,
            "snippet" : {
              "text" : "            Body=content,\n        )\n        md = hashlib.md5(content.encode(\"utf-8\")).digest()\n        content_md5 = base64.b64encode(md).decode(\"utf-8\")\n        base_64_content_md5 = etag_to_base_64_content_md5(response[\"ETag\"])\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25cb1d89a638a7f7:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3943,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 3941,
            "endLine" : 3945,
            "snippet" : {
              "text" : "        \"\"\"\n\n        md = hashlib.md5(data.encode(\"utf-8\")).digest()\n        contents_md5 = base64.b64encode(md).decode(\"utf-8\")\n        header = {\"content-md5\": contents_md5, \"x-amz-request-payer\": \"requester\"}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9684bfdd00dc3de0:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 4000,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 3998,
            "endLine" : 4002,
            "snippet" : {
              "text" : "            \"\"\"\n\n        md = hashlib.md5(data.encode(\"utf-8\")).digest()\n        contents_md5 = base64.b64encode(md).decode(\"utf-8\")\n        header = {\"content-md5\": contents_md5, \"x-amz-request-payer\": \"requester\"}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9684bfdd00dc3de0:2",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 150,
            "startColumn" : 20,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 148,
            "endLine" : 152,
            "snippet" : {
              "text" : "\n        case ChecksumAlgorithm.SHA1:\n            return hashlib.sha1(usedforsecurity=False)\n\n        case ChecksumAlgorithm.SHA256:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3f1061a63ef744fc:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 153,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 151,
            "endLine" : 155,
            "snippet" : {
              "text" : "\n        case ChecksumAlgorithm.SHA256:\n            return hashlib.sha256(usedforsecurity=False)\n\n        case _:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d1dd91b02bbfe261:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 168,
            "startColumn" : 53,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 166,
            "endLine" : 170,
            "snippet" : {
              "text" : "\n\ndef encrypt(key: bytes, message: bytes, iv: bytes = None, aad: bytes = None) -> Tuple[bytes, bytes]:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d9be3674f8fbee93:1",
        "primaryLocationStartColumnFingerprint" : "52"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 169,
            "startColumn" : 16,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 167,
            "endLine" : 171,
            "snippet" : {
              "text" : "\ndef encrypt(key: bytes, message: bytes, iv: bytes = None, aad: bytes = None) -> Tuple[bytes, bytes]:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "30a37d301c34b646:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 47,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 176,
            "endLine" : 180,
            "snippet" : {
              "text" : "\ndef decrypt(\n    key: bytes, encrypted: bytes, iv: bytes = None, tag: bytes = None, aad: bytes = None\n) -> bytes:\n    iv = iv or b\"0\" * BLOCK_SIZE\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9b417c271be3441b:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 16,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "    key: bytes, encrypted: bytes, iv: bytes = None, tag: bytes = None, aad: bytes = None\n) -> bytes:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag), backend=default_backend())\n    decryptor = cipher.decryptor()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15ef4ceb995701c:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 263,
            "startColumn" : 14,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 261,
            "endLine" : 265,
            "snippet" : {
              "text" : "    # hold KeyIds. Maybe it would be possible to remodel this better.\n    def encrypt(self, plaintext: bytes, encryption_context: EncryptionContextType = None) -> bytes:\n        iv = os.urandom(IV_LEN)\n        aad = _serialize_encryption_context(encryption_context=encryption_context)\n        ciphertext, tag = encrypt(self.crypto_key.key_material, plaintext, iv, aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "212364ba5e727fbd:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 278,
            "startColumn" : 66,
            "endColumn" : 79
          },
          "contextRegion" : {
            "startLine" : 276,
            "endLine" : 280,
            "snippet" : {
              "text" : "        aad = _serialize_encryption_context(encryption_context=encryption_context)\n        return decrypt(\n            self.crypto_key.key_material, ciphertext.ciphertext, ciphertext.iv, ciphertext.tag, aad\n        )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b7e6f946e348f004:1",
        "primaryLocationStartColumnFingerprint" : "53"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a19f026f7158315:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 19,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a19f026f7158315:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 21,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n            key = ec.generate_private_key(curve)\n        elif key_spec.startswith(\"HMAC\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a6d50ada461abc0a:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 68,
            "endColumn" : 71
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes, hmac\nfrom cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "89b411ccf8d45891:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom localstack.aws.api.kms import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d21fd4bbc9655836:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom localstack.aws.api.kms import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d21fd4bbc9655836:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 58,
            "endLine" : 62,
            "snippet" : {
              "text" : "\nECC_CURVES = {\n    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d15d285c2758b375:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "ECC_CURVES = {\n    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "96ac840ae982a004:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8c92287d444e7fd5:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP256K1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 61,
            "endLine" : 65,
            "snippet" : {
              "text" : "    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb4d44d71d697fb7:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/v3/storage/ephemeral.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 132,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 130,
            "endLine" : 134,
            "snippet" : {
              "text" : "            file.truncate()\n\n            etag = hashlib.md5(usedforsecurity=False)\n\n            with read_lock:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4efd159e397b351d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/v3/storage/ephemeral.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 198,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 196,
            "endLine" : 200,
            "snippet" : {
              "text" : "    def etag(self) -> str:\n        if not self._etag:\n            etag = hashlib.md5(usedforsecurity=False)\n            original_pos = self._pos\n            self._pos = 0\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6fec8dc621d78e0:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 41,
            "startColumn" : 28,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 39,
            "endLine" : 43,
            "snippet" : {
              "text" : "        match alg:\n            case HashAlgorithm.MD5:\n                hash_inp = hashlib.md5(inp_enc)\n            case HashAlgorithm.SHA_1:\n                hash_inp = hashlib.sha1(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "66a49335d024de34:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 28,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "                hash_inp = hashlib.md5(inp_enc)\n            case HashAlgorithm.SHA_1:\n                hash_inp = hashlib.sha1(inp_enc)\n            case HashAlgorithm.SHA_256:\n                hash_inp = hashlib.sha256(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2e9a8476a03de67a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 45,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 43,
            "endLine" : 47,
            "snippet" : {
              "text" : "                hash_inp = hashlib.sha1(inp_enc)\n            case HashAlgorithm.SHA_256:\n                hash_inp = hashlib.sha256(inp_enc)\n            case HashAlgorithm.SHA_384:\n                hash_inp = hashlib.sha384(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "16e0c209e8d0e95d:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 47,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 45,
            "endLine" : 49,
            "snippet" : {
              "text" : "                hash_inp = hashlib.sha256(inp_enc)\n            case HashAlgorithm.SHA_384:\n                hash_inp = hashlib.sha384(inp_enc)\n            case HashAlgorithm.SHA_512:\n                hash_inp = hashlib.sha512(inp_enc)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7990d5384a55149b:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/stepfunctions/asl/component/intrinsic/function/statesfunction/hash_calculations/hash_func.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 49,
            "startColumn" : 28,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 47,
            "endLine" : 51,
            "snippet" : {
              "text" : "                hash_inp = hashlib.sha384(inp_enc)\n            case HashAlgorithm.SHA_512:\n                hash_inp = hashlib.sha512(inp_enc)\n        hash_value: str = hash_inp.hexdigest()\n        return hash_value\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a042f059c2fc5d16:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/apigateway/helpers.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1568,
            "startColumn" : 12,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 1566,
            "endLine" : 1570,
            "snippet" : {
              "text" : "    TODO: use this in the future to dispatch API Gateway API invocations made to the regional domain name\n    \"\"\"\n    return hashlib.shake_128(to_bytes(domain_name)).hexdigest(4)\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7a9ea2f6b6877fd5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/lambda_/invocation/lambda_service.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 10,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 8,
            "endLine" : 12,
            "snippet" : {
              "text" : "from concurrent.futures import Executor, Future, ThreadPoolExecutor\nfrom datetime import datetime\nfrom hashlib import sha256\nfrom pathlib import PurePosixPath, PureWindowsPath\nfrom threading import RLock\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "64e3b8f032be4ae8:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/analytics/logger.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 12,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 10,
            "endLine" : 14,
            "snippet" : {
              "text" : "def get_hash(value) -> str:\n    max_length = 10\n    digest = hashlib.sha1()\n    digest.update(to_bytes(str(value)))\n    result = digest.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "32e5ba97b22aacaf:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/v3/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 477,
            "startColumn" : 23,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 475,
            "endLine" : 479,
            "snippet" : {
              "text" : "        # if self.object.checksum_algorithm:\n        #     checksum_key = f\"Checksum{self.object.checksum_algorithm.upper()}\"\n        object_etag = hashlib.md5(usedforsecurity=False)\n        pos = 0\n        for index, part in enumerate(parts):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4b392a5c759c1b56:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/sqs/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 836,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 834,
            "endLine" : 838,
            "snippet" : {
              "text" : "        content_based_deduplication = not is_message_deduplication_id_required(self)\n        if not dedup_id and content_based_deduplication:\n            dedup_id = hashlib.sha256(message.get(\"Body\").encode(\"utf-8\")).hexdigest()\n        if not dedup_id:\n            raise InvalidParameterValueException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ac9ca9ba03b89f30:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 309,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 307,
            "endLine" : 311,
            "snippet" : {
              "text" : "    def _get_hmac_context(self, mac_algorithm: MacAlgorithmSpec) -> hmac.HMAC:\n        if mac_algorithm == \"HMAC_SHA_224\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA224())\n        elif mac_algorithm == \"HMAC_SHA_256\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA256())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5aa216a105ad6002:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 311,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 309,
            "endLine" : 313,
            "snippet" : {
              "text" : "            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA224())\n        elif mac_algorithm == \"HMAC_SHA_256\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA256())\n        elif mac_algorithm == \"HMAC_SHA_384\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA384())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5054fa3653b9fb31:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 313,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 311,
            "endLine" : 315,
            "snippet" : {
              "text" : "            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA256())\n        elif mac_algorithm == \"HMAC_SHA_384\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA384())\n        elif mac_algorithm == \"HMAC_SHA_512\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA512())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "793a3ae1eb396c6c:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 315,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 313,
            "endLine" : 317,
            "snippet" : {
              "text" : "            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA384())\n        elif mac_algorithm == \"HMAC_SHA_512\":\n            h = hmac.HMAC(self.crypto_key.key_material, hashes.SHA512())\n        else:\n            raise ValidationException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "59b7c2cd015d8fd0:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 330,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 328,
            "endLine" : 332,
            "snippet" : {
              "text" : "\n        if \"SHA_256\" in signing_algorithm:\n            hasher = hashes.SHA256()\n        elif \"SHA_384\" in signing_algorithm:\n            hasher = hashes.SHA384()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cca9c209c0b1e8d8:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 332,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 330,
            "endLine" : 334,
            "snippet" : {
              "text" : "            hasher = hashes.SHA256()\n        elif \"SHA_384\" in signing_algorithm:\n            hasher = hashes.SHA384()\n        elif \"SHA_512\" in signing_algorithm:\n            hasher = hashes.SHA512()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c9c3fc2ff021bba:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 334,
            "startColumn" : 22,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 332,
            "endLine" : 336,
            "snippet" : {
              "text" : "            hasher = hashes.SHA384()\n        elif \"SHA_512\" in signing_algorithm:\n            hasher = hashes.SHA512()\n        else:\n            raise ValidationException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e8431466213107d5:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/aws/handlers/partition_rewriter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 143,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 141,
            "endLine" : 145,
            "snippet" : {
              "text" : "        # if a Content-MD5 was given, we need to update it after a potential modification\n        if \"Content-MD5\" in forward_rewritten_headers:\n            md = hashlib.md5(forward_rewritten_body).digest()\n            content_md5 = base64.b64encode(md).decode(\"utf-8\")\n            forward_rewritten_headers[\"Content-MD5\"] = content_md5\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7d10237c977e2688:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/sqs/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 1339,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 1337,
            "endLine" : 1341,
            "snippet" : {
              "text" : "    if not isinstance(message_attributes, dict):\n        return\n    hash = hashlib.md5()\n\n    for attrName in sorted(message_attributes.keys()):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d69c41bc454192e6:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1067,
            "startColumn" : 57,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1065,
            "endLine" : 1069,
            "snippet" : {
              "text" : "            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4894865364f8680:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1067,
            "startColumn" : 73,
            "endColumn" : 84
          },
          "contextRegion" : {
            "startLine" : 1065,
            "endLine" : 1069,
            "snippet" : {
              "text" : "            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4894865364f8680:1",
        "primaryLocationStartColumnFingerprint" : "60"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1069,
            "startColumn" : 57,
            "endColumn" : 70
          },
          "contextRegion" : {
            "startLine" : 1067,
            "endLine" : 1071,
            "snippet" : {
              "text" : "            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n        else:\n            raise KMSInvalidStateException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2db77f6594c0f506:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1069,
            "startColumn" : 75,
            "endColumn" : 88
          },
          "contextRegion" : {
            "startLine" : 1067,
            "endLine" : 1071,
            "snippet" : {
              "text" : "            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n        else:\n            raise KMSInvalidStateException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2db77f6594c0f506:1",
        "primaryLocationStartColumnFingerprint" : "62"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/sns/publisher.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 316,
            "startColumn" : 52,
            "endColumn" : 66
          },
          "contextRegion" : {
            "startLine" : 314,
            "endLine" : 318,
            "snippet" : {
              "text" : "                # https://docs.aws.amazon.com/sns/latest/dg/fifo-message-dedup.html\n                content = msg_context.message_content(\"sqs\")\n                kwargs[\"MessageDeduplicationId\"] = hashlib.sha256(\n                    content.encode(\"utf-8\")\n                ).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1e945f345ec78a1:1",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/strings.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 142,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 140,
            "endLine" : 144,
            "snippet" : {
              "text" : "\ndef md5(string: Union[str, bytes]) -> str:\n    m = hashlib.md5()\n    m.update(to_bytes(string))\n    return m.hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9633c2e348676275:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/strings.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 163,
            "startColumn" : 14,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 161,
            "endLine" : 165,
            "snippet" : {
              "text" : "\ndef hash_sha1(string: Union[str, bytes]) -> str:\n    digest = hashlib.sha1(to_bytes(string)).digest()\n    return base64.b64encode(digest).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9cebe49900bffd7:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/strings.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 168,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 166,
            "endLine" : 170,
            "snippet" : {
              "text" : "\ndef hash_sha256(string: Union[str, bytes]) -> str:\n    digest = hashlib.sha256(to_bytes(string)).digest()\n    return base64.b64encode(digest).decode()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f2e853800abd0709:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/lambda_/test_lambda_api.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "import logging\nimport re\nfrom hashlib import sha256\nfrom io import BytesIO\nfrom typing import Callable\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c27fc3db0b5aac6:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/test_partition_rewriter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 126,
            "startColumn" : 37,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 124,
            "endLine" : 128,
            "snippet" : {
              "text" : "    data = {\"some-data-with-arn\": \"arn:aws-us-gov:iam::000000000000:role/test-role\"}\n    body = urlencode(data)\n    original_md5 = base64.b64encode(hashlib.md5(body.encode(\"utf-8\")).digest()).decode(\"utf-8\")\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7bcfebea5e5a1fe:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/unit/test_partition_rewriter.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 16
          },
          "region" : {
            "startLine" : 148,
            "startColumn" : 62,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 146,
            "endLine" : 150,
            "snippet" : {
              "text" : "    assert \"Content-MD5\" in result.headers\n    assert result.headers[\"Content-MD5\"] != original_md5\n    assert result.headers[\"Content-MD5\"] == base64.b64encode(hashlib.md5(data).digest()).decode(\n        \"utf-8\"\n    )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "84ce3f7cb6e10b4b:1",
        "primaryLocationStartColumnFingerprint" : "57"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2708,
            "startColumn" : 30,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 2706,
            "endLine" : 2710,
            "snippet" : {
              "text" : "        # Test for https://github.com/localstack/localstack/issues/8703\n        body = \"Hello Blob\"\n        precalculated_etag = hashlib.md5(body.encode()).hexdigest()\n        headers = {\n            \"Authorization\": mock_aws_request_headers(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1128132b39ee6760:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 2799,
            "startColumn" : 40,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 2797,
            "endLine" : 2801,
            "snippet" : {
              "text" : "            \"\\r\\n0;chunk-signature=bd5c830b94346b57ddc8805ba26c44a122256c207014433bf6579b0985f21df7\\r\\n\\r\\n\"\n        )\n        content_md5 = base64.b64encode(hashlib.md5(object_data.encode()).digest()).decode()\n        headers = {\n            \"Content-Md5\": content_md5,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a616e8d86808163:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3173,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 3171,
            "endLine" : 3175,
            "snippet" : {
              "text" : "            Body=content,\n        )\n        md = hashlib.md5(content.encode(\"utf-8\")).digest()\n        content_md5 = base64.b64encode(md).decode(\"utf-8\")\n        base_64_content_md5 = etag_to_base_64_content_md5(response[\"ETag\"])\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "25cb1d89a638a7f7:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 3943,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 3941,
            "endLine" : 3945,
            "snippet" : {
              "text" : "        \"\"\"\n\n        md = hashlib.md5(data.encode(\"utf-8\")).digest()\n        contents_md5 = base64.b64encode(md).decode(\"utf-8\")\n        header = {\"content-md5\": contents_md5, \"x-amz-request-payer\": \"requester\"}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9684bfdd00dc3de0:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/s3/test_s3.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 17
          },
          "region" : {
            "startLine" : 4000,
            "startColumn" : 14,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 3998,
            "endLine" : 4002,
            "snippet" : {
              "text" : "            \"\"\"\n\n        md = hashlib.md5(data.encode(\"utf-8\")).digest()\n        contents_md5 = base64.b64encode(md).decode(\"utf-8\")\n        header = {\"content-md5\": contents_md5, \"x-amz-request-payer\": \"requester\"}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9684bfdd00dc3de0:2",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 150,
            "startColumn" : 20,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 148,
            "endLine" : 152,
            "snippet" : {
              "text" : "\n        case ChecksumAlgorithm.SHA1:\n            return hashlib.sha1(usedforsecurity=False)\n\n        case ChecksumAlgorithm.SHA256:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3f1061a63ef744fc:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/s3/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 18
          },
          "region" : {
            "startLine" : 153,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 151,
            "endLine" : 155,
            "snippet" : {
              "text" : "\n        case ChecksumAlgorithm.SHA256:\n            return hashlib.sha256(usedforsecurity=False)\n\n        case _:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d1dd91b02bbfe261:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 21,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "def encrypt(key: bytes, message: bytes, iv: bytes = None, aad: bytes = None) -> Tuple[bytes, bytes]:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8759856d022a7938:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 181,
            "startColumn" : 21,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 179,
            "endLine" : 183,
            "snippet" : {
              "text" : ") -> bytes:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "710ee091381962a8:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 19,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a19f026f7158315:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 173,
            "startColumn" : 24,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 171,
            "endLine" : 175,
            "snippet" : {
              "text" : "\n        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 177,
            "startColumn" : 19,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 175,
            "endLine" : 179,
            "snippet" : {
              "text" : "        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n            key = ec.generate_private_key(curve)\n        elif key_spec.startswith(\"HMAC\"):\n            if key_spec not in HMAC_RANGE_KEY_LENGTHS:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d81aa94fe477e614:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 176,
            "startColumn" : 21,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 174,
            "endLine" : 178,
            "snippet" : {
              "text" : "            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n            key = ec.generate_private_key(curve)\n        elif key_spec.startswith(\"HMAC\"):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 351,
            "startColumn" : 37,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 349,
            "endLine" : 353,
            "snippet" : {
              "text" : "        if signing_algorithm.startswith(\"RSA\"):\n            if \"PKCS\" in signing_algorithm:\n                kwargs[\"padding\"] = padding.PKCS1v15()\n            elif \"PSS\" in signing_algorithm:\n                kwargs[\"padding\"] = padding.PSS(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7db843c25bb0366f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PSS"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 353,
            "startColumn" : 37,
            "endLine" : 355,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 351,
            "endLine" : 357,
            "snippet" : {
              "text" : "                kwargs[\"padding\"] = padding.PKCS1v15()\n            elif \"PSS\" in signing_algorithm:\n                kwargs[\"padding\"] = padding.PSS(\n                    mgf=padding.MGF1(hasher), salt_length=padding.PSS.MAX_LENGTH\n                )\n            else:\n                LOG.warning(\"Unsupported padding in SigningAlgorithm '%s'\", signing_algorithm)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a80b3d18544317:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1065,
            "startColumn" : 31,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1063,
            "endLine" : 1067,
            "snippet" : {
              "text" : "\n        if import_state.wrapping_algo == AlgorithmSpec.RSAES_PKCS1_V1_5:\n            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9d4bf32a1d58c92e:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm OAEP"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1067,
            "startColumn" : 31,
            "endColumn" : 93
          },
          "contextRegion" : {
            "startLine" : 1065,
            "endLine" : 1069,
            "snippet" : {
              "text" : "            decrypt_padding = padding.PKCS1v15()\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_1:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c4894865364f8680:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm OAEP"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/provider.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 1069,
            "startColumn" : 31,
            "endColumn" : 97
          },
          "contextRegion" : {
            "startLine" : 1067,
            "endLine" : 1071,
            "snippet" : {
              "text" : "            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA1()), hashes.SHA1(), None)\n        elif import_state.wrapping_algo == AlgorithmSpec.RSAES_OAEP_SHA_256:\n            decrypt_padding = padding.OAEP(padding.MGF1(hashes.SHA256()), hashes.SHA256(), None)\n        else:\n            raise KMSInvalidStateException(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2db77f6594c0f506:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/aws/services/kms/test_kms.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 588,
            "startColumn" : 59,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 586,
            "endLine" : 590,
            "snippet" : {
              "text" : "        # import symmetric key (key material) into KMS\n        public_key = load_der_public_key(params[\"PublicKey\"])\n        encrypted_key = public_key.encrypt(symmetric_key, PKCS1v15())\n        describe_key_before_import = aws_client.kms.describe_key(KeyId=key_id)\n        snapshot.match(\"describe-key-before-import\", describe_key_before_import)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cb59984e63971538:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 19,
            "endColumn" : 43
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a19f026f7158315:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 19,
            "endColumn" : 85
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "        if key_spec.startswith(\"RSA\"):\n            key_size = RSA_CRYPTO_KEY_LENGTHS.get(key_spec)\n            key = rsa.generate_private_key(public_exponent=65537, key_size=key_size)\n        elif key_spec.startswith(\"ECC\"):\n            curve = ECC_CURVES.get(key_spec)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8a19f026f7158315:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 19,
            "startColumn" : 68,
            "endColumn" : 71
          },
          "contextRegion" : {
            "startLine" : 17,
            "endLine" : 21,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes, hmac\nfrom cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "89b411ccf8d45891:1",
        "primaryLocationStartColumnFingerprint" : "67"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom localstack.aws.api.kms import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d21fd4bbc9655836:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 20,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 18,
            "endLine" : 22,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import serialization as crypto_serialization\nfrom cryptography.hazmat.primitives.asymmetric import ec, padding, rsa, utils\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n\nfrom localstack.aws.api.kms import (\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d21fd4bbc9655836:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm GCM"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 170,
            "startColumn" : 42,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 168,
            "endLine" : 172,
            "snippet" : {
              "text" : "def encrypt(key: bytes, message: bytes, iv: bytes = None, aad: bytes = None) -> Tuple[bytes, bytes]:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    encryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8759856d022a7938:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm GCM"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/utils/crypto.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 181,
            "startColumn" : 42,
            "endColumn" : 60
          },
          "contextRegion" : {
            "startLine" : 179,
            "endLine" : 183,
            "snippet" : {
              "text" : ") -> bytes:\n    iv = iv or b\"0\" * BLOCK_SIZE\n    cipher = Cipher(algorithms.AES(key), modes.GCM(iv, tag), backend=default_backend())\n    decryptor = cipher.decryptor()\n    decryptor.authenticate_additional_data(aad)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "710ee091381962a8:1",
        "primaryLocationStartColumnFingerprint" : "37"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256R1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 60,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 58,
            "endLine" : 62,
            "snippet" : {
              "text" : "\nECC_CURVES = {\n    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d15d285c2758b375:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP384R1 with key size (in bits) 384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 61,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 59,
            "endLine" : 63,
            "snippet" : {
              "text" : "ECC_CURVES = {\n    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "96ac840ae982a004:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1 with key size (in bits) 521"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 62,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 60,
            "endLine" : 64,
            "snippet" : {
              "text" : "    \"ECC_NIST_P256\": ec.SECP256R1(),\n    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n}\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8c92287d444e7fd5:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP256K1 with key size (in bits) 256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "localstack/services/kms/models.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 24,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 61,
            "endLine" : 65,
            "snippet" : {
              "text" : "    \"ECC_NIST_P384\": ec.SECP384R1(),\n    \"ECC_NIST_P521\": ec.SECP521R1(),\n    \"ECC_SECG_P256K1\": ec.SECP256K1(),\n}\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb4d44d71d697fb7:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:localstack/localstack/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}