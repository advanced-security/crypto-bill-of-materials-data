{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "Lib/antigravity.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "Lib/multiprocessing/connection.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "Lib/random.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "Lib/urllib/request.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "extra_tests/snippets/stdlib_hashlib.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "Lib/test/test_hashlib.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "Lib/test/test_hmac.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "Lib/test/test_tarfile.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "Lib/test/test_unicodedata.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "Lib/test/test_urllib2_localnet.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "Lib/distutils/command/upload.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "Lib/uuid.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/antigravity.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "    '''\n    # https://xkcd.com/426/\n    h = hashlib.md5(datedow, usedforsecurity=False).hexdigest()\n    p, q = [('%f' % float.fromhex('0.' + x)) for x in (h[:16], h[16:32])]\n    print('%d%s %d%s' % (latitude, p[1:], longitude, q[1:]))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4133cd2df06a093b:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/multiprocessing/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 744,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 742,
            "endLine" : 746,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/multiprocessing/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 760,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 758,
            "endLine" : 762,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/random.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 78,
            "startColumn" : 25,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 76,
            "endLine" : 80,
            "snippet" : {
              "text" : "except ImportError:\n    # fallback to official implementation\n    from hashlib import sha512 as _sha512\n\n__all__ = [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9c40294951168a7:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/urllib/request.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1143,
            "startColumn" : 15,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1141,
            "endLine" : 1145,
            "snippet" : {
              "text" : "        s = \"%s:%s:%s:\" % (self.nonce_count, nonce, time.ctime())\n        b = s.encode(\"ascii\") + _randombytes(8)\n        dig = hashlib.sha1(b).hexdigest()\n        return dig[:16]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86d5ab59cfa127a0:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/urllib/request.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1211,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 1209,
            "endLine" : 1213,
            "snippet" : {
              "text" : "        # lambdas assume digest modules are imported at the top level\n        if algorithm == 'MD5':\n            H = lambda x: hashlib.md5(x.encode(\"ascii\")).hexdigest()\n        elif algorithm == 'SHA':\n            H = lambda x: hashlib.sha1(x.encode(\"ascii\")).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe833d9ed419670b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/urllib/request.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1213,
            "startColumn" : 27,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1211,
            "endLine" : 1215,
            "snippet" : {
              "text" : "            H = lambda x: hashlib.md5(x.encode(\"ascii\")).hexdigest()\n        elif algorithm == 'SHA':\n            H = lambda x: hashlib.sha1(x.encode(\"ascii\")).hexdigest()\n        # XXX MD5-sess\n        else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a2e7a3f5ae2c788:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 5,
            "endColumn" : 16
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "\n# print(hashlib.md5)\nh = hashlib.md5()\nh.update(b'a')\ng = hashlib.md5(b'a')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "594f5f466615d5d8:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 5,
            "endColumn" : 16
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "h = hashlib.md5()\nh.update(b'a')\ng = hashlib.md5(b'a')\nassert h.name == g.name == 'md5'\nprint(h.hexdigest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6aed1e8f38018afd:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "assert h.digest_size == g.digest_size == 16\n\nh = hashlib.sha256()\nh.update(b'a')\ng = hashlib.sha256(b'a')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a218d7bf5c15f06:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "h = hashlib.sha256()\nh.update(b'a')\ng = hashlib.sha256(b'a')\nassert h.name == g.name == 'sha256'\nassert h.digest_size == g.digest_size == 32\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de33444bba6112c7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "assert h.hexdigest() == g.hexdigest() == 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb'\n\nh = hashlib.sha512()\ng = hashlib.sha512(b'a')\nassert h.name == g.name == 'sha512'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e3ac44181f5c72a:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "\nh = hashlib.sha512()\ng = hashlib.sha512(b'a')\nassert h.name == g.name == 'sha512'\nh.update(b'a')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c12b53eb5dbcd92c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 17,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "assert h.hexdigest() == g.hexdigest() == '1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75'\n\nh = hashlib.new(\"blake2s\", b\"fubar\")\nprint(h.hexdigest())\nassert h.hexdigest() == 'a0e1ad0c123c9c65e8ef850db2ce4b5cef2c35b06527c615b0154353574d0415'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1bc9e96bca2b8ab0:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 232,
            "startColumn" : 21,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 230,
            "endLine" : 234,
            "snippet" : {
              "text" : "\n    def test_usedforsecurity_true(self):\n        hashlib.new(\"sha256\", usedforsecurity=True)\n        if self.is_fips_mode:\n            self.skipTest(\"skip in FIPS mode\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a19bd9892590b081:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 238,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 236,
            "endLine" : 240,
            "snippet" : {
              "text" : "            cons(usedforsecurity=True)\n            cons(b'', usedforsecurity=True)\n        hashlib.new(\"md5\", usedforsecurity=True)\n        hashlib.md5(usedforsecurity=True)\n        if self._hashlib is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3e2a22df5aad04a:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 239,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 237,
            "endLine" : 241,
            "snippet" : {
              "text" : "            cons(b'', usedforsecurity=True)\n        hashlib.new(\"md5\", usedforsecurity=True)\n        hashlib.md5(usedforsecurity=True)\n        if self._hashlib is not None:\n            self._hashlib.new(\"md5\", usedforsecurity=True)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f18a7dfc48871e2:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 245,
            "startColumn" : 21,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 243,
            "endLine" : 247,
            "snippet" : {
              "text" : "\n    def test_usedforsecurity_false(self):\n        hashlib.new(\"sha256\", usedforsecurity=False)\n        for cons in self.hash_constructors:\n            cons(usedforsecurity=False)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7977a1f7029b9a4f:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 249,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 247,
            "endLine" : 251,
            "snippet" : {
              "text" : "            cons(usedforsecurity=False)\n            cons(b'', usedforsecurity=False)\n        hashlib.new(\"md5\", usedforsecurity=False)\n        hashlib.md5(usedforsecurity=False)\n        if self._hashlib is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c005da85b786069c:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 250,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 248,
            "endLine" : 252,
            "snippet" : {
              "text" : "            cons(b'', usedforsecurity=False)\n        hashlib.new(\"md5\", usedforsecurity=False)\n        hashlib.md5(usedforsecurity=False)\n        if self._hashlib is not None:\n            self._hashlib.new(\"md5\", usedforsecurity=False)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d898a8fa41b56a4:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 260,
            "startColumn" : 38,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 258,
            "endLine" : 262,
            "snippet" : {
              "text" : "\n    def test_new_upper_to_lower(self):\n        self.assertEqual(hashlib.new(\"SHA256\").name, \"sha256\")\n\n    def test_get_builtin_constructor(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "db08f6fb463abd6e:1",
        "primaryLocationStartColumnFingerprint" : "29"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 326,
            "startColumn" : 29,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 324,
            "endLine" : 328,
            "snippet" : {
              "text" : "            self.assertEqual(\n                h.name,\n                hashlib.new(h.name, usedforsecurity=False).name\n            )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7dd910431fef0b:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 512,
            "startColumn" : 13,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 510,
            "endLine" : 514,
            "snippet" : {
              "text" : "    def test_case_md5_0(self):\n        self.check(\n            'md5', b'', 'd41d8cd98f00b204e9800998ecf8427e',\n            usedforsecurity=False\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a70246dafaa77c0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 518,
            "startColumn" : 13,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 516,
            "endLine" : 520,
            "snippet" : {
              "text" : "    def test_case_md5_1(self):\n        self.check(\n            'md5', b'abc', '900150983cd24fb0d6963f7d28e17f72',\n            usedforsecurity=False\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da53c93196c6ef7:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 524,
            "startColumn" : 13,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 522,
            "endLine" : 526,
            "snippet" : {
              "text" : "    def test_case_md5_2(self):\n        self.check(\n            'md5',\n            b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n            'd174ab98d277d9f5a5611c2c9f419d9f',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f57c85b8e984f755:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 533,
            "startColumn" : 20,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 531,
            "endLine" : 535,
            "snippet" : {
              "text" : "    @bigmemtest(size=_4G + 5, memuse=1, dry_run=False)\n    def test_case_md5_huge(self, size):\n        self.check('md5', b'A'*size, 'c9af2dff37468ce5dfee8f2cfc0a9c6d')\n\n    @unittest.skipIf(sys.maxsize < _4G - 1, 'test cannot run on 32-bit systems')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f678d92be95e3b9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 538,
            "startColumn" : 20,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 536,
            "endLine" : 540,
            "snippet" : {
              "text" : "    @bigmemtest(size=_4G - 1, memuse=1, dry_run=False)\n    def test_case_md5_uintmax(self, size):\n        self.check('md5', b'A'*size, '28138d306ff1b8281f1a9067e1a1a2b3')\n\n    # use the three examples from Federal Information Processing Standards\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cc4aea3ded668c67:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 545,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 543,
            "endLine" : 547,
            "snippet" : {
              "text" : "\n    def test_case_sha1_0(self):\n        self.check('sha1', b\"\",\n                   \"da39a3ee5e6b4b0d3255bfef95601890afd80709\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "303c47302ac4d559:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 549,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 547,
            "endLine" : 551,
            "snippet" : {
              "text" : "\n    def test_case_sha1_1(self):\n        self.check('sha1', b\"abc\",\n                   \"a9993e364706816aba3e25717850c26c9cd0d89d\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f86e3598a5656929:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 553,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 551,
            "endLine" : 555,
            "snippet" : {
              "text" : "\n    def test_case_sha1_2(self):\n        self.check('sha1',\n                   b\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n                   \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f392d93c06fdae4:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 558,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 556,
            "endLine" : 560,
            "snippet" : {
              "text" : "\n    def test_case_sha1_3(self):\n        self.check('sha1', b\"a\" * 1000000,\n                   \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6930902532f7c9b:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 567,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 565,
            "endLine" : 569,
            "snippet" : {
              "text" : "\n    def test_case_sha224_0(self):\n        self.check('sha224', b\"\",\n          \"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ce2f00b8d75767e2:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 571,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 569,
            "endLine" : 573,
            "snippet" : {
              "text" : "\n    def test_case_sha224_1(self):\n        self.check('sha224', b\"abc\",\n          \"23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "deb541838519275d:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 575,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 573,
            "endLine" : 577,
            "snippet" : {
              "text" : "\n    def test_case_sha224_2(self):\n        self.check('sha224',\n          b\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n          \"75388b16512776cc5dba5da1fd890150b0c6455cb4f58b1952522525\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "14a96fd436db06f:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 580,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 578,
            "endLine" : 582,
            "snippet" : {
              "text" : "\n    def test_case_sha224_3(self):\n        self.check('sha224', b\"a\" * 1000000,\n          \"20794655980c91d8bbb4c1ea97618a4bf03f42581948b2ee4ee7ad67\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "efc3769dc0e354b5:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 585,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 583,
            "endLine" : 587,
            "snippet" : {
              "text" : "\n    def test_case_sha256_0(self):\n        self.check('sha256', b\"\",\n          \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8f1f8967cbd8530:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 589,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 587,
            "endLine" : 591,
            "snippet" : {
              "text" : "\n    def test_case_sha256_1(self):\n        self.check('sha256', b\"abc\",\n          \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a9055b8c61e48a9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 593,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 591,
            "endLine" : 595,
            "snippet" : {
              "text" : "\n    def test_case_sha256_2(self):\n        self.check('sha256',\n          b\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n          \"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "432a160749cad7df:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 598,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 596,
            "endLine" : 600,
            "snippet" : {
              "text" : "\n    def test_case_sha256_3(self):\n        self.check('sha256', b\"a\" * 1000000,\n          \"cdc76e5c9914fb9281a1c7e284d73e67f1809a48a497200e046d39ccc7112cd0\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5ceb4f43a932a09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 603,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 601,
            "endLine" : 605,
            "snippet" : {
              "text" : "\n    def test_case_sha384_0(self):\n        self.check('sha384', b\"\",\n          \"38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da\"+\n          \"274edebfe76f65fbd51ad2f14898b95b\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87d56d4302d9c4bc:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 608,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 606,
            "endLine" : 610,
            "snippet" : {
              "text" : "\n    def test_case_sha384_1(self):\n        self.check('sha384', b\"abc\",\n          \"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\"+\n          \"8086072ba1e7cc2358baeca134c825a7\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ca34695b58c58d9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 613,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 611,
            "endLine" : 615,
            "snippet" : {
              "text" : "\n    def test_case_sha384_2(self):\n        self.check('sha384',\n                   b\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\"+\n                   b\"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aac4a5f867c667c8:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 620,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 618,
            "endLine" : 622,
            "snippet" : {
              "text" : "\n    def test_case_sha384_3(self):\n        self.check('sha384', b\"a\" * 1000000,\n          \"9d0e1809716474cb086e834e310a4a1ced149e9c00f248527972cec5704c2a5b\"+\n          \"07b8b3dc38ecc4ebae97ddd87f3d8985\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "924a5a55618f71ea:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 626,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 624,
            "endLine" : 628,
            "snippet" : {
              "text" : "\n    def test_case_sha512_0(self):\n        self.check('sha512', b\"\",\n          \"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce\"+\n          \"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e06715dc14f1f8b3:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 631,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 629,
            "endLine" : 633,
            "snippet" : {
              "text" : "\n    def test_case_sha512_1(self):\n        self.check('sha512', b\"abc\",\n          \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\"+\n          \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b820d675a58bf44:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 636,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 634,
            "endLine" : 638,
            "snippet" : {
              "text" : "\n    def test_case_sha512_2(self):\n        self.check('sha512',\n                   b\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\"+\n                   b\"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "facf4a9fea7431ad:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 643,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 641,
            "endLine" : 645,
            "snippet" : {
              "text" : "\n    def test_case_sha512_3(self):\n        self.check('sha512', b\"a\" * 1000000,\n          \"e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973eb\"+\n          \"de0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bbb55cb9d053e9c1:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 752,
            "startColumn" : 27,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 750,
            "endLine" : 754,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_blake2b(self):\n        self.check_blake2(hashlib.blake2b, 16, 16, 64, 64, (1<<64)-1)\n        b2b_md_len = [20, 32, 48, 64]\n        b2b_in_len = [0, 3, 128, 129, 255, 1024]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ee3b8f8a8197e6d9:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 756,
            "startColumn" : 33,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 754,
            "endLine" : 758,
            "snippet" : {
              "text" : "        b2b_in_len = [0, 3, 128, 129, 255, 1024]\n        self.assertEqual(\n            self.blake2_rfc7693(hashlib.blake2b, b2b_md_len, b2b_in_len),\n            \"c23a7800d98123bd10f506c61e29da5603d763b8bbad2e737f5e765a7bccd475\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fca58a27e815f25:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 761,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 759,
            "endLine" : 763,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2b_0(self):\n        self.check('blake2b', b\"\",\n          \"786a02f742015903c6c6fd852552d272912f4740e15847618a86e217f71f5419\"+\n          \"d25e1031afee585313896444934eb04b903a685b1448b755d56f701afe9be2ce\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8228b956251e7531:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 767,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 765,
            "endLine" : 769,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2b_1(self):\n        self.check('blake2b', b\"abc\",\n          \"ba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d1\"+\n          \"7d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87902c822c062a40:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 777,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 775,
            "endLine" : 779,
            "snippet" : {
              "text" : "        # This checks that all the parameters work in general, and also that\n        # parameter byte order doesn't get confused on big endian platforms.\n        self.check('blake2b', b\"foo\",\n          \"920568b0c5873b2f0ab67bedb6cf1b2b\",\n          digest_size=16,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "808877f5a2c5ccc:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 795,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 793,
            "endLine" : 797,
            "snippet" : {
              "text" : "        for msg, key, md in read_vectors('blake2b'):\n            key = bytes.fromhex(key)\n            self.check('blake2b', msg, md, key=key)\n\n    # TODO: RUSTPYTHON add to constructor const value\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "33061434ede7ef5c:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 801,
            "startColumn" : 27,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 799,
            "endLine" : 803,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_blake2s(self):\n        self.check_blake2(hashlib.blake2s, 8, 8, 32, 32, (1<<48)-1)\n        b2s_md_len = [16, 20, 28, 32]\n        b2s_in_len = [0, 3, 64, 65, 255, 1024]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b16efee46a4e417e:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 805,
            "startColumn" : 33,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 803,
            "endLine" : 807,
            "snippet" : {
              "text" : "        b2s_in_len = [0, 3, 64, 65, 255, 1024]\n        self.assertEqual(\n            self.blake2_rfc7693(hashlib.blake2s, b2s_md_len, b2s_in_len),\n            \"6a411f08ce25adcdfb02aba641451cec53c598b24f4fc787fbdc88797f4c1dfe\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "780295ad702acc15:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 810,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 808,
            "endLine" : 812,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2s_0(self):\n        self.check('blake2s', b\"\",\n          \"69217a3079908094e11121d042354a7c1f55b6482ca1a51e1b250dfd1ed0eef9\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c6eb2828fa74f28:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 815,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 813,
            "endLine" : 817,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2s_1(self):\n        self.check('blake2s', b\"abc\",\n          \"508c5e8c327c14e2e1a72ba34eeb452f37458b209ed63a294d999b4c86675982\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7dc1f73ba2325eda:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 824,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 822,
            "endLine" : 826,
            "snippet" : {
              "text" : "        # This checks that all the parameters work in general, and also that\n        # parameter byte order doesn't get confused on big endian platforms.\n        self.check('blake2s', b\"foo\",\n          \"bf2a8f7fe3c555012a6f8046e646bc75\",\n          digest_size=16,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dcf20784d9799b96:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 842,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 840,
            "endLine" : 844,
            "snippet" : {
              "text" : "        for msg, key, md in read_vectors('blake2s'):\n            key = bytes.fromhex(key)\n            self.check('blake2s', msg, md, key=key)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb48ca62251f8c75:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 846,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 844,
            "endLine" : 848,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_224_0(self):\n        self.check('sha3_224', b\"\",\n          \"6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9c91bf31d83f9924:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 852,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 850,
            "endLine" : 854,
            "snippet" : {
              "text" : "    def test_case_sha3_224_vector(self):\n        for msg, md in read_vectors('sha3_224'):\n            self.check('sha3_224', msg, md)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7abdcd1c0a53c0e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 856,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 854,
            "endLine" : 858,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_256_0(self):\n        self.check('sha3_256', b\"\",\n          \"a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92aa5a1d81f4e2be:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 862,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 860,
            "endLine" : 864,
            "snippet" : {
              "text" : "    def test_case_sha3_256_vector(self):\n        for msg, md in read_vectors('sha3_256'):\n            self.check('sha3_256', msg, md)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a28a4dfdb6459cb:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 866,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 864,
            "endLine" : 868,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_384_0(self):\n        self.check('sha3_384', b\"\",\n          \"0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2a\"+\n          \"c3713831264adb47fb6bd1e058d5f004\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "63e5ae4aea712165:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 873,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 871,
            "endLine" : 875,
            "snippet" : {
              "text" : "    def test_case_sha3_384_vector(self):\n        for msg, md in read_vectors('sha3_384'):\n            self.check('sha3_384', msg, md)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38532e38481198eb:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 877,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 875,
            "endLine" : 879,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_512_0(self):\n        self.check('sha3_512', b\"\",\n          \"a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a6\"+\n          \"15b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6db08b694b1a152:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA3512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 884,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 882,
            "endLine" : 886,
            "snippet" : {
              "text" : "    def test_case_sha3_512_vector(self):\n        for msg, md in read_vectors('sha3_512'):\n            self.check('sha3_512', msg, md)\n\n    def test_case_shake_128_0(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d8cc9db49692ce6e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 887,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 885,
            "endLine" : 889,
            "snippet" : {
              "text" : "\n    def test_case_shake_128_0(self):\n        self.check('shake_128', b\"\",\n          \"7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26\",\n          True)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2711f5bbe5cd81e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 890,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 888,
            "endLine" : 892,
            "snippet" : {
              "text" : "          \"7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26\",\n          True)\n        self.check('shake_128', b\"\", \"7f9c\", True)\n\n    def test_case_shake128_vector(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5718680e32c9e72:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 894,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 892,
            "endLine" : 896,
            "snippet" : {
              "text" : "    def test_case_shake128_vector(self):\n        for msg, md in read_vectors('shake_128'):\n            self.check('shake_128', msg, md, True)\n\n    def test_case_shake_256_0(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2fe0d1c9b9f60022:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHAKE256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 897,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 895,
            "endLine" : 899,
            "snippet" : {
              "text" : "\n    def test_case_shake_256_0(self):\n        self.check('shake_256', b\"\",\n          \"46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762f\",\n          True)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ceaa7b26b441692e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHAKE256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 900,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 898,
            "endLine" : 902,
            "snippet" : {
              "text" : "          \"46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762f\",\n          True)\n        self.check('shake_256', b\"\", \"46b9\", True)\n\n    def test_case_shake256_vector(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f5f0b030ea802f2:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHAKE256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 904,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 902,
            "endLine" : 906,
            "snippet" : {
              "text" : "    def test_case_shake256_vector(self):\n        for msg, md in read_vectors('shake_256'):\n            self.check('shake_256', msg, md, True)\n\n    def test_gil(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4228366e26b429e9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 920,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 918,
            "endLine" : 922,
            "snippet" : {
              "text" : "            m.update(b'1')\n\n        m = hashlib.sha256()\n        m.update(b'1')\n        m.update(b'#' * gil_minsize)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c768393048893587:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 929,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 927,
            "endLine" : 931,
            "snippet" : {
              "text" : "        )\n\n        m = hashlib.sha256(b'1' + b'#' * gil_minsize + b'1')\n        self.assertEqual(\n            m.hexdigest(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6869bf2a978e8a07:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 944,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 942,
            "endLine" : 946,
            "snippet" : {
              "text" : "        # updates on the same object from running at once, the resulting\n        # hash will be the same as doing it single threaded upfront.\n        hasher = hashlib.sha1()\n        num_threads = 5\n        smallest_data = b'swineflu'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15822b7c407a3b95:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 948,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 946,
            "endLine" : 950,
            "snippet" : {
              "text" : "        smallest_data = b'swineflu'\n        data = smallest_data * 200000\n        expected_hash = hashlib.sha1(data*num_threads).hexdigest()\n\n        def hash_in_chunks(chunk_size):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c567b6a2dad508e:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1140,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1138,
            "endLine" : 1142,
            "snippet" : {
              "text" : "    def test_scrypt(self):\n        for password, salt, n, r, p, expected in self.scrypt_test_vectors:\n            result = hashlib.scrypt(password, salt=salt, n=n, r=r, p=p)\n            self.assertEqual(result, expected)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "37ef1e0811d37927:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1140,
            "startColumn" : 22,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 1138,
            "endLine" : 1142,
            "snippet" : {
              "text" : "    def test_scrypt(self):\n        for password, salt, n, r, p, expected in self.scrypt_test_vectors:\n            result = hashlib.scrypt(password, salt=salt, n=n, r=r, p=p)\n            self.assertEqual(result, expected)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "37ef1e0811d37927:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1144,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 1142,
            "endLine" : 1146,
            "snippet" : {
              "text" : "\n        # this values should work\n        hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1)\n        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5ae871880c8e539:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1144,
            "startColumn" : 9,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 1142,
            "endLine" : 1146,
            "snippet" : {
              "text" : "\n        # this values should work\n        hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1)\n        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5ae871880c8e539:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1147,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1145,
            "endLine" : 1149,
            "snippet" : {
              "text" : "        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "102c6a48a74e6971:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1147,
            "startColumn" : 13,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1145,
            "endLine" : 1149,
            "snippet" : {
              "text" : "        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "102c6a48a74e6971:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1149,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1147,
            "endLine" : 1151,
            "snippet" : {
              "text" : "            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n        # require keyword args\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "573d5d2edef258a3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1149,
            "startColumn" : 13,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1147,
            "endLine" : 1151,
            "snippet" : {
              "text" : "            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n        # require keyword args\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "573d5d2edef258a3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1152,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1150,
            "endLine" : 1154,
            "snippet" : {
              "text" : "        # require keyword args\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5bc8c316a0374d12:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1152,
            "startColumn" : 13,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1150,
            "endLine" : 1154,
            "snippet" : {
              "text" : "        # require keyword args\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5bc8c316a0374d12:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1154,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1152,
            "endLine" : 1156,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ceaf4864e9a24c09:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1154,
            "startColumn" : 13,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1152,
            "endLine" : 1156,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ceaf4864e9a24c09:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1156,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1154,
            "endLine" : 1158,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a689672e7c31de15:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1156,
            "startColumn" : 13,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 1154,
            "endLine" : 1158,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a689672e7c31de15:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1159,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1157,
            "endLine" : 1161,
            "snippet" : {
              "text" : "        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=n, r=8, p=1)\n        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8186a3bb96b12af:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1159,
            "startColumn" : 17,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1157,
            "endLine" : 1161,
            "snippet" : {
              "text" : "        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=n, r=8, p=1)\n        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8186a3bb96b12af:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1162,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1160,
            "endLine" : 1164,
            "snippet" : {
              "text" : "        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=r, p=1)\n        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7fd05e3d0c5cb:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1162,
            "startColumn" : 17,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1160,
            "endLine" : 1164,
            "snippet" : {
              "text" : "        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=r, p=1)\n        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7fd05e3d0c5cb:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1165,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1163,
            "endLine" : 1167,
            "snippet" : {
              "text" : "        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=p)\n        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ba5ec94ea56617f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1165,
            "startColumn" : 17,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1163,
            "endLine" : 1167,
            "snippet" : {
              "text" : "        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=p)\n        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ba5ec94ea56617f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1168,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1166,
            "endLine" : 1170,
            "snippet" : {
              "text" : "        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               maxmem=maxmem)\n        for dklen in [-1, None]:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ff880de6b9714f6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1168,
            "startColumn" : 17,
            "endLine" : 1169,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 1166,
            "endLine" : 1171,
            "snippet" : {
              "text" : "        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               maxmem=maxmem)\n        for dklen in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ff880de6b9714f6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1174,
            "snippet" : {
              "text" : "        for dklen in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               dklen=dklen)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c740125c0421614e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 17,
            "endLine" : 1173,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1175,
            "snippet" : {
              "text" : "        for dklen in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               dklen=dklen)\n\n    def test_normalized_name(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c740125c0421614e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1181,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 1179,
            "endLine" : 1183,
            "snippet" : {
              "text" : "    def test_file_digest(self):\n        data = b'a' * 65536\n        d1 = hashlib.sha256()\n        self.addCleanup(os.unlink, os_helper.TESTFN)\n        with open(os_helper.TESTFN, \"wb\") as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "806d25f47afe5bf8:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1189,
            "startColumn" : 41,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 1187,
            "endLine" : 1191,
            "snippet" : {
              "text" : "\n        with open(os_helper.TESTFN, \"rb\") as f:\n            d2 = hashlib.file_digest(f, hashlib.sha256)\n\n        self.assertEqual(d1.hexdigest(), d2.hexdigest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ff28d3253259c42:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1196,
            "startColumn" : 39,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 1194,
            "endLine" : 1198,
            "snippet" : {
              "text" : "\n        with self.assertRaises(ValueError):\n            hashlib.file_digest(None, \"sha256\")\n\n        with self.assertRaises(ValueError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e4bcea453cfdb472:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1200,
            "startColumn" : 40,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 1198,
            "endLine" : 1202,
            "snippet" : {
              "text" : "        with self.assertRaises(ValueError):\n            with open(os_helper.TESTFN, \"r\") as f:\n                hashlib.file_digest(f, \"sha256\")\n\n        with self.assertRaises(ValueError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79e019b94be0ef15:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1204,
            "startColumn" : 40,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 1202,
            "endLine" : 1206,
            "snippet" : {
              "text" : "        with self.assertRaises(ValueError):\n            with open(os_helper.TESTFN, \"wb\") as f:\n                hashlib.file_digest(f, \"sha256\")\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "476dbd8436786eae:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 13,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "        self, key, data, digest, hashfunc, hashname, digest_size, block_size\n    ):\n        h = hmac.HMAC(key, data, digestmod=hashfunc)\n        self.assert_hmac_internals(\n            h, digest, hashname, digest_size, block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c7024e878e628c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 13,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 61,
            "endLine" : 65,
            "snippet" : {
              "text" : "        )\n\n        h = hmac.HMAC(key, data, digestmod=hashname)\n        self.assert_hmac_internals(\n            h, digest, hashname, digest_size, block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "182391053bf55e11:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 13,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "        )\n\n        h = hmac.HMAC(key, digestmod=hashname)\n        h2 = h.copy()\n        h2.update(b\"test update\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8bc38029d039d22:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 74,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 72,
            "endLine" : 76,
            "snippet" : {
              "text" : "        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n        h = hmac.new(key, data, digestmod=hashname)\n        self.assert_hmac_internals(\n            h, digest, hashname, digest_size, block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ff60de0d40ff4252:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "        )\n\n        h = hmac.new(key, None, digestmod=hashname)\n        h.update(data)\n        self.assertEqual(h.hexdigest().upper(), digest.upper())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51ad4112131600d7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 13,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n        h = hmac.new(key, digestmod=hashname)\n        h.update(data)\n        self.assertEqual(h.hexdigest().upper(), digest.upper())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87463d9a0802d3b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 85,
            "endLine" : 89,
            "snippet" : {
              "text" : "        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n        h = hmac.new(key, data, digestmod=hashfunc)\n        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "24a22abf0083fab0:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "\n        self.assertEqual(\n            hmac.digest(key, data, digest=hashname),\n            binascii.unhexlify(digest)\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b59b69711c6af10:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 95,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 93,
            "endLine" : 97,
            "snippet" : {
              "text" : "        )\n        self.assertEqual(\n            hmac.digest(key, data, digest=hashfunc),\n            binascii.unhexlify(digest)\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae48fe4783387ae2:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 138,
            "startColumn" : 26,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 136,
            "endLine" : 140,
            "snippet" : {
              "text" : "            self.assert_hmac(\n                key, data, digest,\n                hashfunc=hashlib.md5,\n                hashname=\"md5\",\n                digest_size=16,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d356289ae4a80ea1:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "            self.assert_hmac(\n                key, data, digest,\n                hashfunc=hashlib.sha1,\n                hashname=\"sha1\",\n                digest_size=20,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "67a28f05edd65810:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "                 data = b'Hi There',\n                 hexdigests = {\n                   hashlib.sha224: '896fb1128abbdf196832107cd49df33f'\n                                   '47b4b1169912ba4f53684b22',\n                   hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8230b1b8d05298e4:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 233,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 231,
            "endLine" : 235,
            "snippet" : {
              "text" : "                   hashlib.sha224: '896fb1128abbdf196832107cd49df33f'\n                                   '47b4b1169912ba4f53684b22',\n                   hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'\n                                   '881dc200c9833da726e9376c2e32cff7',\n                   hashlib.sha384: 'afd03944d84895626b0825f4ab46907f'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5a1618baae4bdd3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 235,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 233,
            "endLine" : 237,
            "snippet" : {
              "text" : "                   hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'\n                                   '881dc200c9833da726e9376c2e32cff7',\n                   hashlib.sha384: 'afd03944d84895626b0825f4ab46907f'\n                                   '15f9dadbe4101ec682aa034c7cebc59c'\n                                   'faea9ea9076ede7f4af152e8b2fa9cb6',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6dfeea476df1387a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 238,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 236,
            "endLine" : 240,
            "snippet" : {
              "text" : "                                   '15f9dadbe4101ec682aa034c7cebc59c'\n                                   'faea9ea9076ede7f4af152e8b2fa9cb6',\n                   hashlib.sha512: '87aa7cdea5ef619d4ff0b4241a1d6cb0'\n                                   '2379f4e2ce4ec2787ad0b30545e17cde'\n                                   'daa833b7d6b8a702038b274eaea3f4e4'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3619b180d82993a5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 248,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 246,
            "endLine" : 250,
            "snippet" : {
              "text" : "                 data = b'what do ya want for nothing?',\n                 hexdigests = {\n                   hashlib.sha224: 'a30e01098bc6dbbf45690f3a7e9e6d0f'\n                                   '8bbea2a39e6148008fd05e44',\n                   hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "85db6fa5f91f0631:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 250,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 248,
            "endLine" : 252,
            "snippet" : {
              "text" : "                   hashlib.sha224: 'a30e01098bc6dbbf45690f3a7e9e6d0f'\n                                   '8bbea2a39e6148008fd05e44',\n                   hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'\n                                   '5a003f089d2739839dec58b964ec3843',\n                   hashlib.sha384: 'af45d2e376484031617f78d2b58a6b1b'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f066e5e0b5103ac1:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 252,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 250,
            "endLine" : 254,
            "snippet" : {
              "text" : "                   hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'\n                                   '5a003f089d2739839dec58b964ec3843',\n                   hashlib.sha384: 'af45d2e376484031617f78d2b58a6b1b'\n                                   '9c7ef464f5a01b47e42ec3736322445e'\n                                   '8e2240ca5e69e2c78b3239ecfab21649',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8c2035defd55838e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 255,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 253,
            "endLine" : 257,
            "snippet" : {
              "text" : "                                   '9c7ef464f5a01b47e42ec3736322445e'\n                                   '8e2240ca5e69e2c78b3239ecfab21649',\n                   hashlib.sha512: '164b7a7bfcf819e2e395fbe73b56e0a3'\n                                   '87bd64222e831fd610270cd7ea250554'\n                                   '9758bf75c05a994a6d034f65f8f0e6fd'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e9c532025634b2d8:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 265,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 263,
            "endLine" : 267,
            "snippet" : {
              "text" : "                 data = b'\\xdd'*50,\n                 hexdigests = {\n                   hashlib.sha224: '7fb3cb3588c6c1f6ffa9694d7d6ad264'\n                                   '9365b0c1f65d69d1ec8333ea',\n                   hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9dc9a610db58b852:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 267,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 265,
            "endLine" : 269,
            "snippet" : {
              "text" : "                   hashlib.sha224: '7fb3cb3588c6c1f6ffa9694d7d6ad264'\n                                   '9365b0c1f65d69d1ec8333ea',\n                   hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'\n                                   '2959098b3ef8c122d9635514ced565fe',\n                   hashlib.sha384: '88062608d3e6ad8a0aa2ace014c8a86f'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8075cae6737ef341:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 269,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 267,
            "endLine" : 271,
            "snippet" : {
              "text" : "                   hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'\n                                   '2959098b3ef8c122d9635514ced565fe',\n                   hashlib.sha384: '88062608d3e6ad8a0aa2ace014c8a86f'\n                                   '0aa635d947ac9febe83ef4e55966144b'\n                                   '2a5ab39dc13814b94e3ab6e101a34f27',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "35fcfc3c21d688d4:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 272,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 270,
            "endLine" : 274,
            "snippet" : {
              "text" : "                                   '0aa635d947ac9febe83ef4e55966144b'\n                                   '2a5ab39dc13814b94e3ab6e101a34f27',\n                   hashlib.sha512: 'fa73b0089d56a284efb0f0756c890be9'\n                                   'b1b5dbdd8ee81a3655f83e33b2279d39'\n                                   'bf3e848279a722c806b485a47e67c807'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a9471f3da8165c20:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 282,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 280,
            "endLine" : 284,
            "snippet" : {
              "text" : "                 data = b'\\xcd'*50,\n                 hexdigests = {\n                   hashlib.sha224: '6c11506874013cac6a2abc1bb382627c'\n                                   'ec6a90d86efc012de7afec5a',\n                   hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d3ddb6f0a93dcfe:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 284,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 282,
            "endLine" : 286,
            "snippet" : {
              "text" : "                   hashlib.sha224: '6c11506874013cac6a2abc1bb382627c'\n                                   'ec6a90d86efc012de7afec5a',\n                   hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'\n                                   '85f0faa3e578f8077a2e3ff46729665b',\n                   hashlib.sha384: '3e8a69b7783c25851933ab6290af6ca7'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ef882065288f71f9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 286,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 284,
            "endLine" : 288,
            "snippet" : {
              "text" : "                   hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'\n                                   '85f0faa3e578f8077a2e3ff46729665b',\n                   hashlib.sha384: '3e8a69b7783c25851933ab6290af6ca7'\n                                   '7a9981480850009cc5577c6e1f573b4e'\n                                   '6801dd23c4a7d679ccf8a386c674cffb',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3564392f156b3bfa:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 289,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 287,
            "endLine" : 291,
            "snippet" : {
              "text" : "                                   '7a9981480850009cc5577c6e1f573b4e'\n                                   '6801dd23c4a7d679ccf8a386c674cffb',\n                   hashlib.sha512: 'b0ba465637458c6990e5a8c5f61d4af7'\n                                   'e576d97ff94b872de76f8050361ee3db'\n                                   'a91ca5c11aa25eb4d679275cc5788063'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6d94d4af1818b14:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 300,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 298,
            "endLine" : 302,
            "snippet" : {
              "text" : "                        b'e Key - Hash Key First',\n                 hexdigests = {\n                   hashlib.sha224: '95e9a0db962095adaebe9b2d6f0dbce2'\n                                   'd499f112f2d2b7273fa6870e',\n                   hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5711a0eab588eb4a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 302,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 300,
            "endLine" : 304,
            "snippet" : {
              "text" : "                   hashlib.sha224: '95e9a0db962095adaebe9b2d6f0dbce2'\n                                   'd499f112f2d2b7273fa6870e',\n                   hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'\n                                   '8e0bc6213728c5140546040f0ee37f54',\n                   hashlib.sha384: '4ece084485813e9088d2c63a041bc5b4'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6310de47d494cb0e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 304,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 302,
            "endLine" : 306,
            "snippet" : {
              "text" : "                   hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'\n                                   '8e0bc6213728c5140546040f0ee37f54',\n                   hashlib.sha384: '4ece084485813e9088d2c63a041bc5b4'\n                                   '4f9ef1012a2b588f3cd11f05033ac4c6'\n                                   '0c2ef6ab4030fe8296248df163f44952',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f67ee9b1653544fc:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 307,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 305,
            "endLine" : 309,
            "snippet" : {
              "text" : "                                   '4f9ef1012a2b588f3cd11f05033ac4c6'\n                                   '0c2ef6ab4030fe8296248df163f44952',\n                   hashlib.sha512: '80b24263c7c1a3ebb71493c1dd7be8b4'\n                                   '9b46d1f41b4aeec1121b013783f8f352'\n                                   '6b56d037e05f2598bd0fd2215d6a1e52'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4559576f1717d3fc:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 321,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 319,
            "endLine" : 323,
            "snippet" : {
              "text" : "                        b'd by the HMAC algorithm.',\n                 hexdigests = {\n                   hashlib.sha224: '3a854166ac5d9f023f54d517d0b39dbd'\n                                   '946770db9c2b95c9f6f565d1',\n                   hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a99df1f37a7823c9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 323,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 321,
            "endLine" : 325,
            "snippet" : {
              "text" : "                   hashlib.sha224: '3a854166ac5d9f023f54d517d0b39dbd'\n                                   '946770db9c2b95c9f6f565d1',\n                   hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'\n                                   'bfdc63644f0713938a7f51535c3a35e2',\n                   hashlib.sha384: '6617178e941f020d351e2f254e8fd32c'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b965a846c266985a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 325,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 323,
            "endLine" : 327,
            "snippet" : {
              "text" : "                   hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'\n                                   'bfdc63644f0713938a7f51535c3a35e2',\n                   hashlib.sha384: '6617178e941f020d351e2f254e8fd32c'\n                                   '602420feb0b8fb9adccebb82461e99c5'\n                                   'a678cc31e799176d3860e6110c46523e',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5c258ba19d0102c8:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 328,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 326,
            "endLine" : 330,
            "snippet" : {
              "text" : "                                   '602420feb0b8fb9adccebb82461e99c5'\n                                   'a678cc31e799176d3860e6110c46523e',\n                   hashlib.sha512: 'e37b6a775dc87dbaa4dfa9f96e5e3ffd'\n                                   'debd71f8867289865df5a32d20cdc944'\n                                   'b6022cac3c4982b10d5eeb55c3e4de15'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c58b45718a8682c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 338,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 336,
            "endLine" : 340,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha224', openssl=True)\n    def test_sha224_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha224, 'sha224', 28, 64)\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7afcf2c9a03b1444:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 344,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 342,
            "endLine" : 346,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha256', openssl=True)\n    def test_sha256_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha256, 'sha256', 32, 64)\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3b70e3636f076169:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 350,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 348,
            "endLine" : 352,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha384', openssl=True)\n    def test_sha384_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha384, 'sha384', 48, 128)\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d2e6cf2f84492ef:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 356,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 354,
            "endLine" : 358,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha512', openssl=True)\n    def test_sha512_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha512, 'sha512', 64, 128)\n\n    @hashlib_helper.requires_hashdigest('sha256')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f7f46acf8ff18d77:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 363,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 361,
            "endLine" : 365,
            "snippet" : {
              "text" : "            \"\"\"Ain't no block_size attribute here.\"\"\"\n            def __init__(self, *args):\n                self._x = hashlib.sha256(*args)\n                self.digest_size = self._x.digest_size\n            def update(self, v):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "33d6b535a1ba519f:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 360,
            "startColumn" : 9,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 358,
            "endLine" : 362,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha256')\n    def test_legacy_block_size_warnings(self):\n        class MockCrazyHash(object):\n            \"\"\"Ain't no block_size attribute here.\"\"\"\n            def __init__(self, *args):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e65bc1a7771f2ab:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 386,
            "startColumn" : 44,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 384,
            "endLine" : 388,
            "snippet" : {
              "text" : "            key = b\"\\x0b\" * 16\n            data = b\"Hi There\"\n            hmac.HMAC(key, data, digestmod=None)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.new(key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "403b1129cdf34533:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 388,
            "startColumn" : 13,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 386,
            "endLine" : 390,
            "snippet" : {
              "text" : "            hmac.HMAC(key, data, digestmod=None)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.new(key, data)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.HMAC(key, msg=data, digestmod='')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3178b2551863199e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 390,
            "startColumn" : 48,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 388,
            "endLine" : 392,
            "snippet" : {
              "text" : "            hmac.new(key, data)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.HMAC(key, msg=data, digestmod='')\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c19e353162b54b86:1",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 405,
            "startColumn" : 41,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 403,
            "endLine" : 407,
            "snippet" : {
              "text" : "        # Standard constructor call.\n        try:\n            hmac.HMAC(b\"key\", digestmod='sha256')\n        except Exception:\n            self.fail(\"Standard constructor call raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb49f5b2f41d90b0:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 414,
            "startColumn" : 44,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 412,
            "endLine" : 416,
            "snippet" : {
              "text" : "        # of type bytes\n        with self.assertRaises(TypeError):\n            h = hmac.HMAC(\"key\", digestmod='sha256')\n\n    @hashlib_helper.requires_hashdigest('sha256')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8748a24c2c51a0ce:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 421,
            "startColumn" : 43,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 419,
            "endLine" : 423,
            "snippet" : {
              "text" : "        # of type bytes\n        with self.assertRaises(TypeError):\n            h = hmac.new(\"key\", digestmod='sha256')\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "556e4ad574c0baab:1",
        "primaryLocationStartColumnFingerprint" : "30"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 429,
            "startColumn" : 60,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 427,
            "endLine" : 431,
            "snippet" : {
              "text" : "        # Constructor call with text.\n        try:\n            h = hmac.HMAC(b\"key\", b\"hash this!\", digestmod='sha256')\n        except Exception:\n            self.fail(\"Constructor call with text argument raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6cad77d867913d96:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 440,
            "startColumn" : 37,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 438,
            "endLine" : 442,
            "snippet" : {
              "text" : "        try:\n            h = hmac.HMAC(bytearray(b\"key\"), bytearray(b\"hash this!\"),\n                          digestmod=\"sha256\")\n        except Exception:\n            self.fail(\"Constructor call with bytearray arguments raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd490fb4cab17215:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 450,
            "startColumn" : 72,
            "endColumn" : 80
          },
          "contextRegion" : {
            "startLine" : 448,
            "endLine" : 452,
            "snippet" : {
              "text" : "    def test_with_memoryview_msg(self):\n        try:\n            h = hmac.HMAC(b\"key\", memoryview(b\"hash this!\"), digestmod=\"sha256\")\n        except Exception:\n            self.fail(\"Constructor call with memoryview msg raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f0ce86b3f562fc30:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 461,
            "startColumn" : 40,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 459,
            "endLine" : 463,
            "snippet" : {
              "text" : "        # Constructor call with text and digest module.\n        try:\n            h = hmac.HMAC(b\"key\", b\"\", hashlib.sha256)\n        except Exception:\n            self.fail(\"Constructor call with hashlib.sha256 raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5129ec53fe0ce6c1:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 478,
            "startColumn" : 56,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 476,
            "endLine" : 480,
            "snippet" : {
              "text" : "    @unittest.skipUnless(sha256_module is not None, 'need _sha256')\n    def test_with_sha256_module(self):\n        h = hmac.HMAC(b\"key\", b\"hash this!\", digestmod=sha256_module.sha256)\n        self.assertEqual(h.hexdigest(), self.expected)\n        self.assertEqual(h.name, \"hmac-sha256\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ecf26aef23f06de:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 53,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "        self.assertEqual(h.name, \"hmac-sha256\")\n\n        digest = hmac.digest(b\"key\", b\"hash this!\", sha256_module.sha256)\n        self.assertEqual(digest, binascii.unhexlify(self.expected))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "444187df7bfc0538:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 495,
            "startColumn" : 55,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 493,
            "endLine" : 497,
            "snippet" : {
              "text" : "        # This must not raise any exceptions\n        try:\n            h = hmac.HMAC(b\"my secret key\", digestmod=\"sha256\")\n            h.update(b\"compute the hash of this text!\")\n            h.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "18405e9fa195e32b:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 546,
            "startColumn" : 42,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 544,
            "endLine" : 548,
            "snippet" : {
              "text" : "    def test_equality(self):\n        # Testing if the copy has the same digests.\n        h1 = hmac.HMAC(b\"key\", digestmod=\"sha256\")\n        h1.update(b\"some random text\")\n        h2 = h1.copy()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b4691cdb1c77daa9:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 559,
            "startColumn" : 41,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 557,
            "endLine" : 561,
            "snippet" : {
              "text" : "    def test_equality_new(self):\n        # Testing if the copy has the same digests with hmac.new().\n        h1 = hmac.new(b\"key\", digestmod=\"sha256\")\n        h1.update(b\"some random text\")\n        h2 = h1.copy()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f1d6b63ad0d402bd:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_tarfile.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 4,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "import os\nimport io\nfrom hashlib import sha256\nfrom contextlib import contextmanager\nfrom random import Random\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "57fcb204c46862a2:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_unicodedata.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 26,
            "endLine" : 30,
            "snippet" : {
              "text" : "    @requires_resource('cpu')\n    def test_method_checksum(self):\n        h = hashlib.sha1()\n        for i in range(sys.maxunicode + 1):\n            char = chr(i)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "af8491ec311570f5:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_unicodedata.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "    def test_function_checksum(self):\n        data = []\n        h = hashlib.sha1()\n\n        for i in range(sys.maxunicode + 1):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9be06af7fb86e5d3:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 104,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 102,
            "endLine" : 106,
            "snippet" : {
              "text" : "    def _generate_nonce(self):\n        self._request_num += 1\n        nonce = hashlib.md5(str(self._request_num).encode(\"ascii\")).hexdigest()\n        self._nonces.append(nonce)\n        return nonce\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9b745bfe1f8aca35:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 132,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 130,
            "endLine" : 134,
            "snippet" : {
              "text" : "        final_dict[\"uri\"] = uri\n        HA1_str = \"%(username)s:%(realm)s:%(password)s\" % final_dict\n        HA1 = hashlib.md5(HA1_str.encode(\"ascii\")).hexdigest()\n        HA2_str = \"%(method)s:%(uri)s\" % final_dict\n        HA2 = hashlib.md5(HA2_str.encode(\"ascii\")).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fbe35011faf610be:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 134,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 132,
            "endLine" : 136,
            "snippet" : {
              "text" : "        HA1 = hashlib.md5(HA1_str.encode(\"ascii\")).hexdigest()\n        HA2_str = \"%(method)s:%(uri)s\" % final_dict\n        HA2 = hashlib.md5(HA2_str.encode(\"ascii\")).hexdigest()\n        final_dict[\"HA1\"] = HA1\n        final_dict[\"HA2\"] = HA2\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f1762b68c3c6117:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 139,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 137,
            "endLine" : 141,
            "snippet" : {
              "text" : "        response_str = \"%(HA1)s:%(nonce)s:%(nc)s:\" \\\n                       \"%(cnonce)s:%(qop)s:%(HA2)s\" % final_dict\n        response = hashlib.md5(response_str.encode(\"ascii\")).hexdigest()\n\n        return response == auth_dict[\"response\"]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "27c454eb436ec7c5:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/distutils/command/upload.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 105,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 103,
            "endLine" : 107,
            "snippet" : {
              "text" : "            'filetype': command,\n            'pyversion': pyversion,\n            'md5_digest': hashlib.md5(content).hexdigest(),\n\n            # additional meta-data\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95963555df0f09aa:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/uuid.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 708,
            "startColumn" : 25,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 706,
            "endLine" : 710,
            "snippet" : {
              "text" : "def uuid3(namespace, name):\n    \"\"\"Generate a UUID from the MD5 hash of a namespace UUID and a name.\"\"\"\n    from hashlib import md5\n    digest = md5(\n        namespace.bytes + bytes(name, \"utf-8\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5bc956cf58af6a54:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/uuid.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 721,
            "startColumn" : 25,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 719,
            "endLine" : 723,
            "snippet" : {
              "text" : "def uuid5(namespace, name):\n    \"\"\"Generate a UUID from the SHA-1 hash of a namespace UUID and a name.\"\"\"\n    from hashlib import sha1\n    hash = sha1(namespace.bytes + bytes(name, \"utf-8\")).digest()\n    return UUID(bytes=hash[:16], version=5)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9a0329961cc79a5:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/antigravity.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "    '''\n    # https://xkcd.com/426/\n    h = hashlib.md5(datedow, usedforsecurity=False).hexdigest()\n    p, q = [('%f' % float.fromhex('0.' + x)) for x in (h[:16], h[16:32])]\n    print('%d%s %d%s' % (latitude, p[1:], longitude, q[1:]))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4133cd2df06a093b:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/multiprocessing/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 744,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 742,
            "endLine" : 746,
            "snippet" : {
              "text" : "    message = os.urandom(MESSAGE_LENGTH)\n    connection.send_bytes(CHALLENGE + message)\n    digest = hmac.new(authkey, message, 'md5').digest()\n    response = connection.recv_bytes(256)        # reject large message\n    if response == digest:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f42f7b87f312dca2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/multiprocessing/connection.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 760,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 758,
            "endLine" : 762,
            "snippet" : {
              "text" : "    assert message[:len(CHALLENGE)] == CHALLENGE, 'message = %r' % message\n    message = message[len(CHALLENGE):]\n    digest = hmac.new(authkey, message, 'md5').digest()\n    connection.send_bytes(digest)\n    response = connection.recv_bytes(256)        # reject large message\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "451421f31a2a13d2:1",
        "primaryLocationStartColumnFingerprint" : "36"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/random.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 78,
            "startColumn" : 25,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 76,
            "endLine" : 80,
            "snippet" : {
              "text" : "except ImportError:\n    # fallback to official implementation\n    from hashlib import sha512 as _sha512\n\n__all__ = [\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9c40294951168a7:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/urllib/request.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1143,
            "startColumn" : 15,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1141,
            "endLine" : 1145,
            "snippet" : {
              "text" : "        s = \"%s:%s:%s:\" % (self.nonce_count, nonce, time.ctime())\n        b = s.encode(\"ascii\") + _randombytes(8)\n        dig = hashlib.sha1(b).hexdigest()\n        return dig[:16]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "86d5ab59cfa127a0:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/urllib/request.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1211,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 1209,
            "endLine" : 1213,
            "snippet" : {
              "text" : "        # lambdas assume digest modules are imported at the top level\n        if algorithm == 'MD5':\n            H = lambda x: hashlib.md5(x.encode(\"ascii\")).hexdigest()\n        elif algorithm == 'SHA':\n            H = lambda x: hashlib.sha1(x.encode(\"ascii\")).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fe833d9ed419670b:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/urllib/request.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 1213,
            "startColumn" : 27,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 1211,
            "endLine" : 1215,
            "snippet" : {
              "text" : "            H = lambda x: hashlib.md5(x.encode(\"ascii\")).hexdigest()\n        elif algorithm == 'SHA':\n            H = lambda x: hashlib.sha1(x.encode(\"ascii\")).hexdigest()\n        # XXX MD5-sess\n        else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a2e7a3f5ae2c788:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 5,
            "endColumn" : 16
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "\n# print(hashlib.md5)\nh = hashlib.md5()\nh.update(b'a')\ng = hashlib.md5(b'a')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "594f5f466615d5d8:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 7,
            "startColumn" : 5,
            "endColumn" : 16
          },
          "contextRegion" : {
            "startLine" : 5,
            "endLine" : 9,
            "snippet" : {
              "text" : "h = hashlib.md5()\nh.update(b'a')\ng = hashlib.md5(b'a')\nassert h.name == g.name == 'md5'\nprint(h.hexdigest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6aed1e8f38018afd:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "assert h.digest_size == g.digest_size == 16\n\nh = hashlib.sha256()\nh.update(b'a')\ng = hashlib.sha256(b'a')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a218d7bf5c15f06:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 17,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 15,
            "endLine" : 19,
            "snippet" : {
              "text" : "h = hashlib.sha256()\nh.update(b'a')\ng = hashlib.sha256(b'a')\nassert h.name == g.name == 'sha256'\nassert h.digest_size == g.digest_size == 32\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de33444bba6112c7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "assert h.hexdigest() == g.hexdigest() == 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb'\n\nh = hashlib.sha512()\ng = hashlib.sha512(b'a')\nassert h.name == g.name == 'sha512'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e3ac44181f5c72a:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 5,
            "endColumn" : 19
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "\nh = hashlib.sha512()\ng = hashlib.sha512(b'a')\nassert h.name == g.name == 'sha512'\nh.update(b'a')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c12b53eb5dbcd92c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "extra_tests/snippets/stdlib_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 34,
            "startColumn" : 17,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 32,
            "endLine" : 36,
            "snippet" : {
              "text" : "assert h.hexdigest() == g.hexdigest() == '1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75'\n\nh = hashlib.new(\"blake2s\", b\"fubar\")\nprint(h.hexdigest())\nassert h.hexdigest() == 'a0e1ad0c123c9c65e8ef850db2ce4b5cef2c35b06527c615b0154353574d0415'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1bc9e96bca2b8ab0:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 232,
            "startColumn" : 21,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 230,
            "endLine" : 234,
            "snippet" : {
              "text" : "\n    def test_usedforsecurity_true(self):\n        hashlib.new(\"sha256\", usedforsecurity=True)\n        if self.is_fips_mode:\n            self.skipTest(\"skip in FIPS mode\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a19bd9892590b081:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 238,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 236,
            "endLine" : 240,
            "snippet" : {
              "text" : "            cons(usedforsecurity=True)\n            cons(b'', usedforsecurity=True)\n        hashlib.new(\"md5\", usedforsecurity=True)\n        hashlib.md5(usedforsecurity=True)\n        if self._hashlib is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3e2a22df5aad04a:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 239,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 237,
            "endLine" : 241,
            "snippet" : {
              "text" : "            cons(b'', usedforsecurity=True)\n        hashlib.new(\"md5\", usedforsecurity=True)\n        hashlib.md5(usedforsecurity=True)\n        if self._hashlib is not None:\n            self._hashlib.new(\"md5\", usedforsecurity=True)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f18a7dfc48871e2:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 245,
            "startColumn" : 21,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 243,
            "endLine" : 247,
            "snippet" : {
              "text" : "\n    def test_usedforsecurity_false(self):\n        hashlib.new(\"sha256\", usedforsecurity=False)\n        for cons in self.hash_constructors:\n            cons(usedforsecurity=False)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7977a1f7029b9a4f:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 249,
            "startColumn" : 21,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 247,
            "endLine" : 251,
            "snippet" : {
              "text" : "            cons(usedforsecurity=False)\n            cons(b'', usedforsecurity=False)\n        hashlib.new(\"md5\", usedforsecurity=False)\n        hashlib.md5(usedforsecurity=False)\n        if self._hashlib is not None:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c005da85b786069c:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 250,
            "startColumn" : 9,
            "endColumn" : 20
          },
          "contextRegion" : {
            "startLine" : 248,
            "endLine" : 252,
            "snippet" : {
              "text" : "            cons(b'', usedforsecurity=False)\n        hashlib.new(\"md5\", usedforsecurity=False)\n        hashlib.md5(usedforsecurity=False)\n        if self._hashlib is not None:\n            self._hashlib.new(\"md5\", usedforsecurity=False)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d898a8fa41b56a4:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 260,
            "startColumn" : 38,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 258,
            "endLine" : 262,
            "snippet" : {
              "text" : "\n    def test_new_upper_to_lower(self):\n        self.assertEqual(hashlib.new(\"SHA256\").name, \"sha256\")\n\n    def test_get_builtin_constructor(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "db08f6fb463abd6e:1",
        "primaryLocationStartColumnFingerprint" : "29"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 326,
            "startColumn" : 29,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 324,
            "endLine" : 328,
            "snippet" : {
              "text" : "            self.assertEqual(\n                h.name,\n                hashlib.new(h.name, usedforsecurity=False).name\n            )\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7dd910431fef0b:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 512,
            "startColumn" : 13,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 510,
            "endLine" : 514,
            "snippet" : {
              "text" : "    def test_case_md5_0(self):\n        self.check(\n            'md5', b'', 'd41d8cd98f00b204e9800998ecf8427e',\n            usedforsecurity=False\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a70246dafaa77c0:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 518,
            "startColumn" : 13,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 516,
            "endLine" : 520,
            "snippet" : {
              "text" : "    def test_case_md5_1(self):\n        self.check(\n            'md5', b'abc', '900150983cd24fb0d6963f7d28e17f72',\n            usedforsecurity=False\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7da53c93196c6ef7:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 524,
            "startColumn" : 13,
            "endColumn" : 18
          },
          "contextRegion" : {
            "startLine" : 522,
            "endLine" : 526,
            "snippet" : {
              "text" : "    def test_case_md5_2(self):\n        self.check(\n            'md5',\n            b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',\n            'd174ab98d277d9f5a5611c2c9f419d9f',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f57c85b8e984f755:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 533,
            "startColumn" : 20,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 531,
            "endLine" : 535,
            "snippet" : {
              "text" : "    @bigmemtest(size=_4G + 5, memuse=1, dry_run=False)\n    def test_case_md5_huge(self, size):\n        self.check('md5', b'A'*size, 'c9af2dff37468ce5dfee8f2cfc0a9c6d')\n\n    @unittest.skipIf(sys.maxsize < _4G - 1, 'test cannot run on 32-bit systems')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f678d92be95e3b9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 538,
            "startColumn" : 20,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 536,
            "endLine" : 540,
            "snippet" : {
              "text" : "    @bigmemtest(size=_4G - 1, memuse=1, dry_run=False)\n    def test_case_md5_uintmax(self, size):\n        self.check('md5', b'A'*size, '28138d306ff1b8281f1a9067e1a1a2b3')\n\n    # use the three examples from Federal Information Processing Standards\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "cc4aea3ded668c67:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 545,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 543,
            "endLine" : 547,
            "snippet" : {
              "text" : "\n    def test_case_sha1_0(self):\n        self.check('sha1', b\"\",\n                   \"da39a3ee5e6b4b0d3255bfef95601890afd80709\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "303c47302ac4d559:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 549,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 547,
            "endLine" : 551,
            "snippet" : {
              "text" : "\n    def test_case_sha1_1(self):\n        self.check('sha1', b\"abc\",\n                   \"a9993e364706816aba3e25717850c26c9cd0d89d\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f86e3598a5656929:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 553,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 551,
            "endLine" : 555,
            "snippet" : {
              "text" : "\n    def test_case_sha1_2(self):\n        self.check('sha1',\n                   b\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n                   \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f392d93c06fdae4:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 558,
            "startColumn" : 20,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 556,
            "endLine" : 560,
            "snippet" : {
              "text" : "\n    def test_case_sha1_3(self):\n        self.check('sha1', b\"a\" * 1000000,\n                   \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6930902532f7c9b:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 567,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 565,
            "endLine" : 569,
            "snippet" : {
              "text" : "\n    def test_case_sha224_0(self):\n        self.check('sha224', b\"\",\n          \"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ce2f00b8d75767e2:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 571,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 569,
            "endLine" : 573,
            "snippet" : {
              "text" : "\n    def test_case_sha224_1(self):\n        self.check('sha224', b\"abc\",\n          \"23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "deb541838519275d:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 575,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 573,
            "endLine" : 577,
            "snippet" : {
              "text" : "\n    def test_case_sha224_2(self):\n        self.check('sha224',\n          b\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n          \"75388b16512776cc5dba5da1fd890150b0c6455cb4f58b1952522525\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "14a96fd436db06f:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 580,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 578,
            "endLine" : 582,
            "snippet" : {
              "text" : "\n    def test_case_sha224_3(self):\n        self.check('sha224', b\"a\" * 1000000,\n          \"20794655980c91d8bbb4c1ea97618a4bf03f42581948b2ee4ee7ad67\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "efc3769dc0e354b5:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 585,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 583,
            "endLine" : 587,
            "snippet" : {
              "text" : "\n    def test_case_sha256_0(self):\n        self.check('sha256', b\"\",\n          \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a8f1f8967cbd8530:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 589,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 587,
            "endLine" : 591,
            "snippet" : {
              "text" : "\n    def test_case_sha256_1(self):\n        self.check('sha256', b\"abc\",\n          \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a9055b8c61e48a9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 593,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 591,
            "endLine" : 595,
            "snippet" : {
              "text" : "\n    def test_case_sha256_2(self):\n        self.check('sha256',\n          b\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n          \"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "432a160749cad7df:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 598,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 596,
            "endLine" : 600,
            "snippet" : {
              "text" : "\n    def test_case_sha256_3(self):\n        self.check('sha256', b\"a\" * 1000000,\n          \"cdc76e5c9914fb9281a1c7e284d73e67f1809a48a497200e046d39ccc7112cd0\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5ceb4f43a932a09:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 603,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 601,
            "endLine" : 605,
            "snippet" : {
              "text" : "\n    def test_case_sha384_0(self):\n        self.check('sha384', b\"\",\n          \"38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da\"+\n          \"274edebfe76f65fbd51ad2f14898b95b\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87d56d4302d9c4bc:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 608,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 606,
            "endLine" : 610,
            "snippet" : {
              "text" : "\n    def test_case_sha384_1(self):\n        self.check('sha384', b\"abc\",\n          \"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\"+\n          \"8086072ba1e7cc2358baeca134c825a7\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ca34695b58c58d9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 613,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 611,
            "endLine" : 615,
            "snippet" : {
              "text" : "\n    def test_case_sha384_2(self):\n        self.check('sha384',\n                   b\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\"+\n                   b\"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "aac4a5f867c667c8:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 620,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 618,
            "endLine" : 622,
            "snippet" : {
              "text" : "\n    def test_case_sha384_3(self):\n        self.check('sha384', b\"a\" * 1000000,\n          \"9d0e1809716474cb086e834e310a4a1ced149e9c00f248527972cec5704c2a5b\"+\n          \"07b8b3dc38ecc4ebae97ddd87f3d8985\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "924a5a55618f71ea:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 626,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 624,
            "endLine" : 628,
            "snippet" : {
              "text" : "\n    def test_case_sha512_0(self):\n        self.check('sha512', b\"\",\n          \"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce\"+\n          \"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e06715dc14f1f8b3:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 631,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 629,
            "endLine" : 633,
            "snippet" : {
              "text" : "\n    def test_case_sha512_1(self):\n        self.check('sha512', b\"abc\",\n          \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\"+\n          \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b820d675a58bf44:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 636,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 634,
            "endLine" : 638,
            "snippet" : {
              "text" : "\n    def test_case_sha512_2(self):\n        self.check('sha512',\n                   b\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\"+\n                   b\"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "facf4a9fea7431ad:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 643,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 641,
            "endLine" : 645,
            "snippet" : {
              "text" : "\n    def test_case_sha512_3(self):\n        self.check('sha512', b\"a\" * 1000000,\n          \"e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973eb\"+\n          \"de0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bbb55cb9d053e9c1:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 752,
            "startColumn" : 27,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 750,
            "endLine" : 754,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_blake2b(self):\n        self.check_blake2(hashlib.blake2b, 16, 16, 64, 64, (1<<64)-1)\n        b2b_md_len = [20, 32, 48, 64]\n        b2b_in_len = [0, 3, 128, 129, 255, 1024]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ee3b8f8a8197e6d9:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 756,
            "startColumn" : 33,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 754,
            "endLine" : 758,
            "snippet" : {
              "text" : "        b2b_in_len = [0, 3, 128, 129, 255, 1024]\n        self.assertEqual(\n            self.blake2_rfc7693(hashlib.blake2b, b2b_md_len, b2b_in_len),\n            \"c23a7800d98123bd10f506c61e29da5603d763b8bbad2e737f5e765a7bccd475\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4fca58a27e815f25:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 761,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 759,
            "endLine" : 763,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2b_0(self):\n        self.check('blake2b', b\"\",\n          \"786a02f742015903c6c6fd852552d272912f4740e15847618a86e217f71f5419\"+\n          \"d25e1031afee585313896444934eb04b903a685b1448b755d56f701afe9be2ce\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8228b956251e7531:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 767,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 765,
            "endLine" : 769,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2b_1(self):\n        self.check('blake2b', b\"abc\",\n          \"ba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d1\"+\n          \"7d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87902c822c062a40:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 777,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 775,
            "endLine" : 779,
            "snippet" : {
              "text" : "        # This checks that all the parameters work in general, and also that\n        # parameter byte order doesn't get confused on big endian platforms.\n        self.check('blake2b', b\"foo\",\n          \"920568b0c5873b2f0ab67bedb6cf1b2b\",\n          digest_size=16,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "808877f5a2c5ccc:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 795,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 793,
            "endLine" : 797,
            "snippet" : {
              "text" : "        for msg, key, md in read_vectors('blake2b'):\n            key = bytes.fromhex(key)\n            self.check('blake2b', msg, md, key=key)\n\n    # TODO: RUSTPYTHON add to constructor const value\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "33061434ede7ef5c:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 801,
            "startColumn" : 27,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 799,
            "endLine" : 803,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_blake2s(self):\n        self.check_blake2(hashlib.blake2s, 8, 8, 32, 32, (1<<48)-1)\n        b2s_md_len = [16, 20, 28, 32]\n        b2s_in_len = [0, 3, 64, 65, 255, 1024]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b16efee46a4e417e:1",
        "primaryLocationStartColumnFingerprint" : "18"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 805,
            "startColumn" : 33,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 803,
            "endLine" : 807,
            "snippet" : {
              "text" : "        b2s_in_len = [0, 3, 64, 65, 255, 1024]\n        self.assertEqual(\n            self.blake2_rfc7693(hashlib.blake2s, b2s_md_len, b2s_in_len),\n            \"6a411f08ce25adcdfb02aba641451cec53c598b24f4fc787fbdc88797f4c1dfe\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "780295ad702acc15:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 810,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 808,
            "endLine" : 812,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2s_0(self):\n        self.check('blake2s', b\"\",\n          \"69217a3079908094e11121d042354a7c1f55b6482ca1a51e1b250dfd1ed0eef9\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c6eb2828fa74f28:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 815,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 813,
            "endLine" : 817,
            "snippet" : {
              "text" : "    @requires_blake2\n    def test_case_blake2s_1(self):\n        self.check('blake2s', b\"abc\",\n          \"508c5e8c327c14e2e1a72ba34eeb452f37458b209ed63a294d999b4c86675982\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7dc1f73ba2325eda:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 824,
            "startColumn" : 20,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 822,
            "endLine" : 826,
            "snippet" : {
              "text" : "        # This checks that all the parameters work in general, and also that\n        # parameter byte order doesn't get confused on big endian platforms.\n        self.check('blake2s', b\"foo\",\n          \"bf2a8f7fe3c555012a6f8046e646bc75\",\n          digest_size=16,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "dcf20784d9799b96:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2S"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 842,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 840,
            "endLine" : 844,
            "snippet" : {
              "text" : "        for msg, key, md in read_vectors('blake2s'):\n            key = bytes.fromhex(key)\n            self.check('blake2s', msg, md, key=key)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bb48ca62251f8c75:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 846,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 844,
            "endLine" : 848,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_224_0(self):\n        self.check('sha3_224', b\"\",\n          \"6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9c91bf31d83f9924:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 852,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 850,
            "endLine" : 854,
            "snippet" : {
              "text" : "    def test_case_sha3_224_vector(self):\n        for msg, md in read_vectors('sha3_224'):\n            self.check('sha3_224', msg, md)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7abdcd1c0a53c0e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 856,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 854,
            "endLine" : 858,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_256_0(self):\n        self.check('sha3_256', b\"\",\n          \"a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "92aa5a1d81f4e2be:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 862,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 860,
            "endLine" : 864,
            "snippet" : {
              "text" : "    def test_case_sha3_256_vector(self):\n        for msg, md in read_vectors('sha3_256'):\n            self.check('sha3_256', msg, md)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a28a4dfdb6459cb:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 866,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 864,
            "endLine" : 868,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_384_0(self):\n        self.check('sha3_384', b\"\",\n          \"0c63a75b845e4f7d01107d852e4c2485c51a50aaaa94fc61995e71bbee983a2a\"+\n          \"c3713831264adb47fb6bd1e058d5f004\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "63e5ae4aea712165:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 873,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 871,
            "endLine" : 875,
            "snippet" : {
              "text" : "    def test_case_sha3_384_vector(self):\n        for msg, md in read_vectors('sha3_384'):\n            self.check('sha3_384', msg, md)\n\n    @requires_sha3\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "38532e38481198eb:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 877,
            "startColumn" : 20,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 875,
            "endLine" : 879,
            "snippet" : {
              "text" : "    @requires_sha3\n    def test_case_sha3_512_0(self):\n        self.check('sha3_512', b\"\",\n          \"a69f73cca23a9ac5c8b567dc185a756e97c982164fe25859e0d1dcc1475c80a6\"+\n          \"15b2123af1f5f94c11e3e9402c3ac558f500199d95b6d3e301758586281dcd26\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c6db08b694b1a152:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA3512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 884,
            "startColumn" : 24,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 882,
            "endLine" : 886,
            "snippet" : {
              "text" : "    def test_case_sha3_512_vector(self):\n        for msg, md in read_vectors('sha3_512'):\n            self.check('sha3_512', msg, md)\n\n    def test_case_shake_128_0(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d8cc9db49692ce6e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 887,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 885,
            "endLine" : 889,
            "snippet" : {
              "text" : "\n    def test_case_shake_128_0(self):\n        self.check('shake_128', b\"\",\n          \"7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26\",\n          True)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a2711f5bbe5cd81e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 890,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 888,
            "endLine" : 892,
            "snippet" : {
              "text" : "          \"7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26\",\n          True)\n        self.check('shake_128', b\"\", \"7f9c\", True)\n\n    def test_case_shake128_vector(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5718680e32c9e72:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHAKE128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 894,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 892,
            "endLine" : 896,
            "snippet" : {
              "text" : "    def test_case_shake128_vector(self):\n        for msg, md in read_vectors('shake_128'):\n            self.check('shake_128', msg, md, True)\n\n    def test_case_shake_256_0(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2fe0d1c9b9f60022:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHAKE256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 897,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 895,
            "endLine" : 899,
            "snippet" : {
              "text" : "\n    def test_case_shake_256_0(self):\n        self.check('shake_256', b\"\",\n          \"46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762f\",\n          True)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ceaa7b26b441692e:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHAKE256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 900,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 898,
            "endLine" : 902,
            "snippet" : {
              "text" : "          \"46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762f\",\n          True)\n        self.check('shake_256', b\"\", \"46b9\", True)\n\n    def test_case_shake256_vector(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f5f0b030ea802f2:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHAKE256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 904,
            "startColumn" : 24,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 902,
            "endLine" : 906,
            "snippet" : {
              "text" : "    def test_case_shake256_vector(self):\n        for msg, md in read_vectors('shake_256'):\n            self.check('shake_256', msg, md, True)\n\n    def test_gil(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4228366e26b429e9:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 920,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 918,
            "endLine" : 922,
            "snippet" : {
              "text" : "            m.update(b'1')\n\n        m = hashlib.sha256()\n        m.update(b'1')\n        m.update(b'#' * gil_minsize)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c768393048893587:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 929,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 927,
            "endLine" : 931,
            "snippet" : {
              "text" : "        )\n\n        m = hashlib.sha256(b'1' + b'#' * gil_minsize + b'1')\n        self.assertEqual(\n            m.hexdigest(),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6869bf2a978e8a07:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 944,
            "startColumn" : 18,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 942,
            "endLine" : 946,
            "snippet" : {
              "text" : "        # updates on the same object from running at once, the resulting\n        # hash will be the same as doing it single threaded upfront.\n        hasher = hashlib.sha1()\n        num_threads = 5\n        smallest_data = b'swineflu'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "15822b7c407a3b95:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 948,
            "startColumn" : 25,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 946,
            "endLine" : 950,
            "snippet" : {
              "text" : "        smallest_data = b'swineflu'\n        data = smallest_data * 200000\n        expected_hash = hashlib.sha1(data*num_threads).hexdigest()\n\n        def hash_in_chunks(chunk_size):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c567b6a2dad508e:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1140,
            "startColumn" : 22,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 1138,
            "endLine" : 1142,
            "snippet" : {
              "text" : "    def test_scrypt(self):\n        for password, salt, n, r, p, expected in self.scrypt_test_vectors:\n            result = hashlib.scrypt(password, salt=salt, n=n, r=r, p=p)\n            self.assertEqual(result, expected)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "37ef1e0811d37927:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1144,
            "startColumn" : 9,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 1142,
            "endLine" : 1146,
            "snippet" : {
              "text" : "\n        # this values should work\n        hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1)\n        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5ae871880c8e539:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1147,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1145,
            "endLine" : 1149,
            "snippet" : {
              "text" : "        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "102c6a48a74e6971:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1149,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1147,
            "endLine" : 1151,
            "snippet" : {
              "text" : "            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n        # require keyword args\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "573d5d2edef258a3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1152,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1150,
            "endLine" : 1154,
            "snippet" : {
              "text" : "        # require keyword args\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5bc8c316a0374d12:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1154,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1152,
            "endLine" : 1156,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ceaf4864e9a24c09:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1156,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 1154,
            "endLine" : 1158,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a689672e7c31de15:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1159,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1157,
            "endLine" : 1161,
            "snippet" : {
              "text" : "        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=n, r=8, p=1)\n        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8186a3bb96b12af:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1162,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1160,
            "endLine" : 1164,
            "snippet" : {
              "text" : "        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=r, p=1)\n        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7fd05e3d0c5cb:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1165,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1163,
            "endLine" : 1167,
            "snippet" : {
              "text" : "        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=p)\n        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ba5ec94ea56617f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1168,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1166,
            "endLine" : 1170,
            "snippet" : {
              "text" : "        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               maxmem=maxmem)\n        for dklen in [-1, None]:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ff880de6b9714f6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1174,
            "snippet" : {
              "text" : "        for dklen in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               dklen=dklen)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c740125c0421614e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1181,
            "startColumn" : 14,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 1179,
            "endLine" : 1183,
            "snippet" : {
              "text" : "    def test_file_digest(self):\n        data = b'a' * 65536\n        d1 = hashlib.sha256()\n        self.addCleanup(os.unlink, os_helper.TESTFN)\n        with open(os_helper.TESTFN, \"wb\") as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "806d25f47afe5bf8:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256\nUse of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1189,
            "startColumn" : 41,
            "endColumn" : 55
          },
          "contextRegion" : {
            "startLine" : 1187,
            "endLine" : 1191,
            "snippet" : {
              "text" : "\n        with open(os_helper.TESTFN, \"rb\") as f:\n            d2 = hashlib.file_digest(f, hashlib.sha256)\n\n        self.assertEqual(d1.hexdigest(), d2.hexdigest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ff28d3253259c42:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1196,
            "startColumn" : 39,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 1194,
            "endLine" : 1198,
            "snippet" : {
              "text" : "\n        with self.assertRaises(ValueError):\n            hashlib.file_digest(None, \"sha256\")\n\n        with self.assertRaises(ValueError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e4bcea453cfdb472:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1200,
            "startColumn" : 40,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 1198,
            "endLine" : 1202,
            "snippet" : {
              "text" : "        with self.assertRaises(ValueError):\n            with open(os_helper.TESTFN, \"r\") as f:\n                hashlib.file_digest(f, \"sha256\")\n\n        with self.assertRaises(ValueError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "79e019b94be0ef15:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1204,
            "startColumn" : 40,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 1202,
            "endLine" : 1206,
            "snippet" : {
              "text" : "        with self.assertRaises(ValueError):\n            with open(os_helper.TESTFN, \"wb\") as f:\n                hashlib.file_digest(f, \"sha256\")\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "476dbd8436786eae:1",
        "primaryLocationStartColumnFingerprint" : "23"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 58,
            "startColumn" : 13,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 56,
            "endLine" : 60,
            "snippet" : {
              "text" : "        self, key, data, digest, hashfunc, hashname, digest_size, block_size\n    ):\n        h = hmac.HMAC(key, data, digestmod=hashfunc)\n        self.assert_hmac_internals(\n            h, digest, hashname, digest_size, block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "41c7024e878e628c:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 13,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 61,
            "endLine" : 65,
            "snippet" : {
              "text" : "        )\n\n        h = hmac.HMAC(key, data, digestmod=hashname)\n        self.assert_hmac_internals(\n            h, digest, hashname, digest_size, block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "182391053bf55e11:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 13,
            "endColumn" : 47
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "        )\n\n        h = hmac.HMAC(key, digestmod=hashname)\n        h2 = h.copy()\n        h2.update(b\"test update\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8bc38029d039d22:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 74,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 72,
            "endLine" : 76,
            "snippet" : {
              "text" : "        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n        h = hmac.new(key, data, digestmod=hashname)\n        self.assert_hmac_internals(\n            h, digest, hashname, digest_size, block_size\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ff60de0d40ff4252:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "        )\n\n        h = hmac.new(key, None, digestmod=hashname)\n        h.update(data)\n        self.assertEqual(h.hexdigest().upper(), digest.upper())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51ad4112131600d7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 13,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n        h = hmac.new(key, digestmod=hashname)\n        h.update(data)\n        self.assertEqual(h.hexdigest().upper(), digest.upper())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "87463d9a0802d3b7:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 87,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 85,
            "endLine" : 89,
            "snippet" : {
              "text" : "        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n        h = hmac.new(key, data, digestmod=hashfunc)\n        self.assertEqual(h.hexdigest().upper(), digest.upper())\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "24a22abf0083fab0:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "\n        self.assertEqual(\n            hmac.digest(key, data, digest=hashname),\n            binascii.unhexlify(digest)\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b59b69711c6af10:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 95,
            "startColumn" : 13,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 93,
            "endLine" : 97,
            "snippet" : {
              "text" : "        )\n        self.assertEqual(\n            hmac.digest(key, data, digest=hashfunc),\n            binascii.unhexlify(digest)\n        )\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ae48fe4783387ae2:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 138,
            "startColumn" : 26,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 136,
            "endLine" : 140,
            "snippet" : {
              "text" : "            self.assert_hmac(\n                key, data, digest,\n                hashfunc=hashlib.md5,\n                hashname=\"md5\",\n                digest_size=16,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d356289ae4a80ea1:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 180,
            "startColumn" : 26,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 178,
            "endLine" : 182,
            "snippet" : {
              "text" : "            self.assert_hmac(\n                key, data, digest,\n                hashfunc=hashlib.sha1,\n                hashname=\"sha1\",\n                digest_size=20,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "67a28f05edd65810:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 231,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 229,
            "endLine" : 233,
            "snippet" : {
              "text" : "                 data = b'Hi There',\n                 hexdigests = {\n                   hashlib.sha224: '896fb1128abbdf196832107cd49df33f'\n                                   '47b4b1169912ba4f53684b22',\n                   hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8230b1b8d05298e4:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 233,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 231,
            "endLine" : 235,
            "snippet" : {
              "text" : "                   hashlib.sha224: '896fb1128abbdf196832107cd49df33f'\n                                   '47b4b1169912ba4f53684b22',\n                   hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'\n                                   '881dc200c9833da726e9376c2e32cff7',\n                   hashlib.sha384: 'afd03944d84895626b0825f4ab46907f'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a5a1618baae4bdd3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 235,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 233,
            "endLine" : 237,
            "snippet" : {
              "text" : "                   hashlib.sha256: 'b0344c61d8db38535ca8afceaf0bf12b'\n                                   '881dc200c9833da726e9376c2e32cff7',\n                   hashlib.sha384: 'afd03944d84895626b0825f4ab46907f'\n                                   '15f9dadbe4101ec682aa034c7cebc59c'\n                                   'faea9ea9076ede7f4af152e8b2fa9cb6',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6dfeea476df1387a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 238,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 236,
            "endLine" : 240,
            "snippet" : {
              "text" : "                                   '15f9dadbe4101ec682aa034c7cebc59c'\n                                   'faea9ea9076ede7f4af152e8b2fa9cb6',\n                   hashlib.sha512: '87aa7cdea5ef619d4ff0b4241a1d6cb0'\n                                   '2379f4e2ce4ec2787ad0b30545e17cde'\n                                   'daa833b7d6b8a702038b274eaea3f4e4'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3619b180d82993a5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 248,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 246,
            "endLine" : 250,
            "snippet" : {
              "text" : "                 data = b'what do ya want for nothing?',\n                 hexdigests = {\n                   hashlib.sha224: 'a30e01098bc6dbbf45690f3a7e9e6d0f'\n                                   '8bbea2a39e6148008fd05e44',\n                   hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "85db6fa5f91f0631:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 250,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 248,
            "endLine" : 252,
            "snippet" : {
              "text" : "                   hashlib.sha224: 'a30e01098bc6dbbf45690f3a7e9e6d0f'\n                                   '8bbea2a39e6148008fd05e44',\n                   hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'\n                                   '5a003f089d2739839dec58b964ec3843',\n                   hashlib.sha384: 'af45d2e376484031617f78d2b58a6b1b'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f066e5e0b5103ac1:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 252,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 250,
            "endLine" : 254,
            "snippet" : {
              "text" : "                   hashlib.sha256: '5bdcc146bf60754e6a042426089575c7'\n                                   '5a003f089d2739839dec58b964ec3843',\n                   hashlib.sha384: 'af45d2e376484031617f78d2b58a6b1b'\n                                   '9c7ef464f5a01b47e42ec3736322445e'\n                                   '8e2240ca5e69e2c78b3239ecfab21649',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8c2035defd55838e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 255,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 253,
            "endLine" : 257,
            "snippet" : {
              "text" : "                                   '9c7ef464f5a01b47e42ec3736322445e'\n                                   '8e2240ca5e69e2c78b3239ecfab21649',\n                   hashlib.sha512: '164b7a7bfcf819e2e395fbe73b56e0a3'\n                                   '87bd64222e831fd610270cd7ea250554'\n                                   '9758bf75c05a994a6d034f65f8f0e6fd'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e9c532025634b2d8:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 265,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 263,
            "endLine" : 267,
            "snippet" : {
              "text" : "                 data = b'\\xdd'*50,\n                 hexdigests = {\n                   hashlib.sha224: '7fb3cb3588c6c1f6ffa9694d7d6ad264'\n                                   '9365b0c1f65d69d1ec8333ea',\n                   hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9dc9a610db58b852:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 267,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 265,
            "endLine" : 269,
            "snippet" : {
              "text" : "                   hashlib.sha224: '7fb3cb3588c6c1f6ffa9694d7d6ad264'\n                                   '9365b0c1f65d69d1ec8333ea',\n                   hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'\n                                   '2959098b3ef8c122d9635514ced565fe',\n                   hashlib.sha384: '88062608d3e6ad8a0aa2ace014c8a86f'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8075cae6737ef341:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 269,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 267,
            "endLine" : 271,
            "snippet" : {
              "text" : "                   hashlib.sha256: '773ea91e36800e46854db8ebd09181a7'\n                                   '2959098b3ef8c122d9635514ced565fe',\n                   hashlib.sha384: '88062608d3e6ad8a0aa2ace014c8a86f'\n                                   '0aa635d947ac9febe83ef4e55966144b'\n                                   '2a5ab39dc13814b94e3ab6e101a34f27',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "35fcfc3c21d688d4:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 272,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 270,
            "endLine" : 274,
            "snippet" : {
              "text" : "                                   '0aa635d947ac9febe83ef4e55966144b'\n                                   '2a5ab39dc13814b94e3ab6e101a34f27',\n                   hashlib.sha512: 'fa73b0089d56a284efb0f0756c890be9'\n                                   'b1b5dbdd8ee81a3655f83e33b2279d39'\n                                   'bf3e848279a722c806b485a47e67c807'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a9471f3da8165c20:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 282,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 280,
            "endLine" : 284,
            "snippet" : {
              "text" : "                 data = b'\\xcd'*50,\n                 hexdigests = {\n                   hashlib.sha224: '6c11506874013cac6a2abc1bb382627c'\n                                   'ec6a90d86efc012de7afec5a',\n                   hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d3ddb6f0a93dcfe:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 284,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 282,
            "endLine" : 286,
            "snippet" : {
              "text" : "                   hashlib.sha224: '6c11506874013cac6a2abc1bb382627c'\n                                   'ec6a90d86efc012de7afec5a',\n                   hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'\n                                   '85f0faa3e578f8077a2e3ff46729665b',\n                   hashlib.sha384: '3e8a69b7783c25851933ab6290af6ca7'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ef882065288f71f9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 286,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 284,
            "endLine" : 288,
            "snippet" : {
              "text" : "                   hashlib.sha256: '82558a389a443c0ea4cc819899f2083a'\n                                   '85f0faa3e578f8077a2e3ff46729665b',\n                   hashlib.sha384: '3e8a69b7783c25851933ab6290af6ca7'\n                                   '7a9981480850009cc5577c6e1f573b4e'\n                                   '6801dd23c4a7d679ccf8a386c674cffb',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3564392f156b3bfa:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 289,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 287,
            "endLine" : 291,
            "snippet" : {
              "text" : "                                   '7a9981480850009cc5577c6e1f573b4e'\n                                   '6801dd23c4a7d679ccf8a386c674cffb',\n                   hashlib.sha512: 'b0ba465637458c6990e5a8c5f61d4af7'\n                                   'e576d97ff94b872de76f8050361ee3db'\n                                   'a91ca5c11aa25eb4d679275cc5788063'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e6d94d4af1818b14:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 300,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 298,
            "endLine" : 302,
            "snippet" : {
              "text" : "                        b'e Key - Hash Key First',\n                 hexdigests = {\n                   hashlib.sha224: '95e9a0db962095adaebe9b2d6f0dbce2'\n                                   'd499f112f2d2b7273fa6870e',\n                   hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5711a0eab588eb4a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 302,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 300,
            "endLine" : 304,
            "snippet" : {
              "text" : "                   hashlib.sha224: '95e9a0db962095adaebe9b2d6f0dbce2'\n                                   'd499f112f2d2b7273fa6870e',\n                   hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'\n                                   '8e0bc6213728c5140546040f0ee37f54',\n                   hashlib.sha384: '4ece084485813e9088d2c63a041bc5b4'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6310de47d494cb0e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 304,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 302,
            "endLine" : 306,
            "snippet" : {
              "text" : "                   hashlib.sha256: '60e431591ee0b67f0d8a26aacbf5b77f'\n                                   '8e0bc6213728c5140546040f0ee37f54',\n                   hashlib.sha384: '4ece084485813e9088d2c63a041bc5b4'\n                                   '4f9ef1012a2b588f3cd11f05033ac4c6'\n                                   '0c2ef6ab4030fe8296248df163f44952',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f67ee9b1653544fc:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 307,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 305,
            "endLine" : 309,
            "snippet" : {
              "text" : "                                   '4f9ef1012a2b588f3cd11f05033ac4c6'\n                                   '0c2ef6ab4030fe8296248df163f44952',\n                   hashlib.sha512: '80b24263c7c1a3ebb71493c1dd7be8b4'\n                                   '9b46d1f41b4aeec1121b013783f8f352'\n                                   '6b56d037e05f2598bd0fd2215d6a1e52'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4559576f1717d3fc:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 321,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 319,
            "endLine" : 323,
            "snippet" : {
              "text" : "                        b'd by the HMAC algorithm.',\n                 hexdigests = {\n                   hashlib.sha224: '3a854166ac5d9f023f54d517d0b39dbd'\n                                   '946770db9c2b95c9f6f565d1',\n                   hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a99df1f37a7823c9:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 323,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 321,
            "endLine" : 325,
            "snippet" : {
              "text" : "                   hashlib.sha224: '3a854166ac5d9f023f54d517d0b39dbd'\n                                   '946770db9c2b95c9f6f565d1',\n                   hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'\n                                   'bfdc63644f0713938a7f51535c3a35e2',\n                   hashlib.sha384: '6617178e941f020d351e2f254e8fd32c'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b965a846c266985a:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 325,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 323,
            "endLine" : 327,
            "snippet" : {
              "text" : "                   hashlib.sha256: '9b09ffa71b942fcb27635fbcd5b0e944'\n                                   'bfdc63644f0713938a7f51535c3a35e2',\n                   hashlib.sha384: '6617178e941f020d351e2f254e8fd32c'\n                                   '602420feb0b8fb9adccebb82461e99c5'\n                                   'a678cc31e799176d3860e6110c46523e',\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5c258ba19d0102c8:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 328,
            "startColumn" : 20,
            "endColumn" : 34
          },
          "contextRegion" : {
            "startLine" : 326,
            "endLine" : 330,
            "snippet" : {
              "text" : "                                   '602420feb0b8fb9adccebb82461e99c5'\n                                   'a678cc31e799176d3860e6110c46523e',\n                   hashlib.sha512: 'e37b6a775dc87dbaa4dfa9f96e5e3ffd'\n                                   'debd71f8867289865df5a32d20cdc944'\n                                   'b6022cac3c4982b10d5eeb55c3e4de15'\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7c58b45718a8682c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA224"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 338,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 336,
            "endLine" : 340,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha224', openssl=True)\n    def test_sha224_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha224, 'sha224', 28, 64)\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7afcf2c9a03b1444:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 344,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 342,
            "endLine" : 346,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha256', openssl=True)\n    def test_sha256_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha256, 'sha256', 32, 64)\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3b70e3636f076169:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 350,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 348,
            "endLine" : 352,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha384', openssl=True)\n    def test_sha384_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha384, 'sha384', 48, 128)\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1d2e6cf2f84492ef:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 356,
            "startColumn" : 34,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 354,
            "endLine" : 358,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha512', openssl=True)\n    def test_sha512_rfc4231(self):\n        self._rfc4231_test_cases(hashlib.sha512, 'sha512', 64, 128)\n\n    @hashlib_helper.requires_hashdigest('sha256')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f7f46acf8ff18d77:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 363,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 361,
            "endLine" : 365,
            "snippet" : {
              "text" : "            \"\"\"Ain't no block_size attribute here.\"\"\"\n            def __init__(self, *args):\n                self._x = hashlib.sha256(*args)\n                self.digest_size = self._x.digest_size\n            def update(self, v):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "33d6b535a1ba519f:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 360,
            "startColumn" : 9,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 358,
            "endLine" : 362,
            "snippet" : {
              "text" : "    @hashlib_helper.requires_hashdigest('sha256')\n    def test_legacy_block_size_warnings(self):\n        class MockCrazyHash(object):\n            \"\"\"Ain't no block_size attribute here.\"\"\"\n            def __init__(self, *args):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4e65bc1a7771f2ab:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 386,
            "startColumn" : 44,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 384,
            "endLine" : 388,
            "snippet" : {
              "text" : "            key = b\"\\x0b\" * 16\n            data = b\"Hi There\"\n            hmac.HMAC(key, data, digestmod=None)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.new(key, data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "403b1129cdf34533:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 388,
            "startColumn" : 13,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 386,
            "endLine" : 390,
            "snippet" : {
              "text" : "            hmac.HMAC(key, data, digestmod=None)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.new(key, data)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.HMAC(key, msg=data, digestmod='')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3178b2551863199e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 390,
            "startColumn" : 48,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 388,
            "endLine" : 392,
            "snippet" : {
              "text" : "            hmac.new(key, data)\n        with self.assertRaisesRegex(TypeError, r'required.*digestmod'):\n            hmac.HMAC(key, msg=data, digestmod='')\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c19e353162b54b86:1",
        "primaryLocationStartColumnFingerprint" : "35"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 405,
            "startColumn" : 41,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 403,
            "endLine" : 407,
            "snippet" : {
              "text" : "        # Standard constructor call.\n        try:\n            hmac.HMAC(b\"key\", digestmod='sha256')\n        except Exception:\n            self.fail(\"Standard constructor call raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "eb49f5b2f41d90b0:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 414,
            "startColumn" : 44,
            "endColumn" : 52
          },
          "contextRegion" : {
            "startLine" : 412,
            "endLine" : 416,
            "snippet" : {
              "text" : "        # of type bytes\n        with self.assertRaises(TypeError):\n            h = hmac.HMAC(\"key\", digestmod='sha256')\n\n    @hashlib_helper.requires_hashdigest('sha256')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8748a24c2c51a0ce:1",
        "primaryLocationStartColumnFingerprint" : "31"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 421,
            "startColumn" : 43,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 419,
            "endLine" : 423,
            "snippet" : {
              "text" : "        # of type bytes\n        with self.assertRaises(TypeError):\n            h = hmac.new(\"key\", digestmod='sha256')\n\n    # TODO: RUSTPYTHON\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "556e4ad574c0baab:1",
        "primaryLocationStartColumnFingerprint" : "30"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 429,
            "startColumn" : 60,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 427,
            "endLine" : 431,
            "snippet" : {
              "text" : "        # Constructor call with text.\n        try:\n            h = hmac.HMAC(b\"key\", b\"hash this!\", digestmod='sha256')\n        except Exception:\n            self.fail(\"Constructor call with text argument raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6cad77d867913d96:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 440,
            "startColumn" : 37,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 438,
            "endLine" : 442,
            "snippet" : {
              "text" : "        try:\n            h = hmac.HMAC(bytearray(b\"key\"), bytearray(b\"hash this!\"),\n                          digestmod=\"sha256\")\n        except Exception:\n            self.fail(\"Constructor call with bytearray arguments raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd490fb4cab17215:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 450,
            "startColumn" : 72,
            "endColumn" : 80
          },
          "contextRegion" : {
            "startLine" : 448,
            "endLine" : 452,
            "snippet" : {
              "text" : "    def test_with_memoryview_msg(self):\n        try:\n            h = hmac.HMAC(b\"key\", memoryview(b\"hash this!\"), digestmod=\"sha256\")\n        except Exception:\n            self.fail(\"Constructor call with memoryview msg raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f0ce86b3f562fc30:1",
        "primaryLocationStartColumnFingerprint" : "59"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 461,
            "startColumn" : 40,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 459,
            "endLine" : 463,
            "snippet" : {
              "text" : "        # Constructor call with text and digest module.\n        try:\n            h = hmac.HMAC(b\"key\", b\"\", hashlib.sha256)\n        except Exception:\n            self.fail(\"Constructor call with hashlib.sha256 raised exception.\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5129ec53fe0ce6c1:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 478,
            "startColumn" : 56,
            "endColumn" : 76
          },
          "contextRegion" : {
            "startLine" : 476,
            "endLine" : 480,
            "snippet" : {
              "text" : "    @unittest.skipUnless(sha256_module is not None, 'need _sha256')\n    def test_with_sha256_module(self):\n        h = hmac.HMAC(b\"key\", b\"hash this!\", digestmod=sha256_module.sha256)\n        self.assertEqual(h.hexdigest(), self.expected)\n        self.assertEqual(h.name, \"hmac-sha256\")\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8ecf26aef23f06de:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 482,
            "startColumn" : 53,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 480,
            "endLine" : 484,
            "snippet" : {
              "text" : "        self.assertEqual(h.name, \"hmac-sha256\")\n\n        digest = hmac.digest(b\"key\", b\"hash this!\", sha256_module.sha256)\n        self.assertEqual(digest, binascii.unhexlify(self.expected))\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "444187df7bfc0538:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 495,
            "startColumn" : 55,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 493,
            "endLine" : 497,
            "snippet" : {
              "text" : "        # This must not raise any exceptions\n        try:\n            h = hmac.HMAC(b\"my secret key\", digestmod=\"sha256\")\n            h.update(b\"compute the hash of this text!\")\n            h.digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "18405e9fa195e32b:1",
        "primaryLocationStartColumnFingerprint" : "42"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 546,
            "startColumn" : 42,
            "endColumn" : 50
          },
          "contextRegion" : {
            "startLine" : 544,
            "endLine" : 548,
            "snippet" : {
              "text" : "    def test_equality(self):\n        # Testing if the copy has the same digests.\n        h1 = hmac.HMAC(b\"key\", digestmod=\"sha256\")\n        h1.update(b\"some random text\")\n        h2 = h1.copy()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b4691cdb1c77daa9:1",
        "primaryLocationStartColumnFingerprint" : "33"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hmac.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 559,
            "startColumn" : 41,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 557,
            "endLine" : 561,
            "snippet" : {
              "text" : "    def test_equality_new(self):\n        # Testing if the copy has the same digests with hmac.new().\n        h1 = hmac.new(b\"key\", digestmod=\"sha256\")\n        h1.update(b\"some random text\")\n        h2 = h1.copy()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f1d6b63ad0d402bd:1",
        "primaryLocationStartColumnFingerprint" : "32"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_tarfile.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 4,
            "startColumn" : 21,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 2,
            "endLine" : 6,
            "snippet" : {
              "text" : "import os\nimport io\nfrom hashlib import sha256\nfrom contextlib import contextmanager\nfrom random import Random\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "57fcb204c46862a2:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_unicodedata.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 28,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 26,
            "endLine" : 30,
            "snippet" : {
              "text" : "    @requires_resource('cpu')\n    def test_method_checksum(self):\n        h = hashlib.sha1()\n        for i in range(sys.maxunicode + 1):\n            char = chr(i)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "af8491ec311570f5:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_unicodedata.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 83,
            "startColumn" : 13,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 81,
            "endLine" : 85,
            "snippet" : {
              "text" : "    def test_function_checksum(self):\n        data = []\n        h = hashlib.sha1()\n\n        for i in range(sys.maxunicode + 1):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9be06af7fb86e5d3:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 104,
            "startColumn" : 17,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 102,
            "endLine" : 106,
            "snippet" : {
              "text" : "    def _generate_nonce(self):\n        self._request_num += 1\n        nonce = hashlib.md5(str(self._request_num).encode(\"ascii\")).hexdigest()\n        self._nonces.append(nonce)\n        return nonce\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9b745bfe1f8aca35:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 132,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 130,
            "endLine" : 134,
            "snippet" : {
              "text" : "        final_dict[\"uri\"] = uri\n        HA1_str = \"%(username)s:%(realm)s:%(password)s\" % final_dict\n        HA1 = hashlib.md5(HA1_str.encode(\"ascii\")).hexdigest()\n        HA2_str = \"%(method)s:%(uri)s\" % final_dict\n        HA2 = hashlib.md5(HA2_str.encode(\"ascii\")).hexdigest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fbe35011faf610be:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 134,
            "startColumn" : 15,
            "endColumn" : 26
          },
          "contextRegion" : {
            "startLine" : 132,
            "endLine" : 136,
            "snippet" : {
              "text" : "        HA1 = hashlib.md5(HA1_str.encode(\"ascii\")).hexdigest()\n        HA2_str = \"%(method)s:%(uri)s\" % final_dict\n        HA2 = hashlib.md5(HA2_str.encode(\"ascii\")).hexdigest()\n        final_dict[\"HA1\"] = HA1\n        final_dict[\"HA2\"] = HA2\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8f1762b68c3c6117:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_urllib2_localnet.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 139,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 137,
            "endLine" : 141,
            "snippet" : {
              "text" : "        response_str = \"%(HA1)s:%(nonce)s:%(nc)s:\" \\\n                       \"%(cnonce)s:%(qop)s:%(HA2)s\" % final_dict\n        response = hashlib.md5(response_str.encode(\"ascii\")).hexdigest()\n\n        return response == auth_dict[\"response\"]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "27c454eb436ec7c5:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/distutils/command/upload.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 105,
            "startColumn" : 27,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 103,
            "endLine" : 107,
            "snippet" : {
              "text" : "            'filetype': command,\n            'pyversion': pyversion,\n            'md5_digest': hashlib.md5(content).hexdigest(),\n\n            # additional meta-data\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "95963555df0f09aa:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/uuid.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 708,
            "startColumn" : 25,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 706,
            "endLine" : 710,
            "snippet" : {
              "text" : "def uuid3(namespace, name):\n    \"\"\"Generate a UUID from the MD5 hash of a namespace UUID and a name.\"\"\"\n    from hashlib import md5\n    digest = md5(\n        namespace.bytes + bytes(name, \"utf-8\"),\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5bc956cf58af6a54:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/uuid.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 721,
            "startColumn" : 25,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 719,
            "endLine" : 723,
            "snippet" : {
              "text" : "def uuid5(namespace, name):\n    \"\"\"Generate a UUID from the SHA-1 hash of a namespace UUID and a name.\"\"\"\n    from hashlib import sha1\n    hash = sha1(namespace.bytes + bytes(name, \"utf-8\")).digest()\n    return UUID(bytes=hash[:16], version=5)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9a0329961cc79a5:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1140,
            "startColumn" : 22,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 1138,
            "endLine" : 1142,
            "snippet" : {
              "text" : "    def test_scrypt(self):\n        for password, salt, n, r, p, expected in self.scrypt_test_vectors:\n            result = hashlib.scrypt(password, salt=salt, n=n, r=r, p=p)\n            self.assertEqual(result, expected)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "37ef1e0811d37927:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1144,
            "startColumn" : 9,
            "endColumn" : 65
          },
          "contextRegion" : {
            "startLine" : 1142,
            "endLine" : 1146,
            "snippet" : {
              "text" : "\n        # this values should work\n        hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1)\n        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d5ae871880c8e539:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1147,
            "startColumn" : 13,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1145,
            "endLine" : 1149,
            "snippet" : {
              "text" : "        # password and salt must be bytes-like\n        with self.assertRaises(TypeError):\n            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "102c6a48a74e6971:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1149,
            "startColumn" : 13,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 1147,
            "endLine" : 1151,
            "snippet" : {
              "text" : "            hashlib.scrypt('password', salt=b'salt', n=2, r=8, p=1)\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', salt='salt', n=2, r=8, p=1)\n        # require keyword args\n        with self.assertRaises(TypeError):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "573d5d2edef258a3:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1152,
            "startColumn" : 13,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 1150,
            "endLine" : 1154,
            "snippet" : {
              "text" : "        # require keyword args\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5bc8c316a0374d12:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1154,
            "startColumn" : 13,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1152,
            "endLine" : 1156,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "ceaf4864e9a24c09:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1156,
            "startColumn" : 13,
            "endColumn" : 63
          },
          "contextRegion" : {
            "startLine" : 1154,
            "endLine" : 1158,
            "snippet" : {
              "text" : "            hashlib.scrypt(b'password', b'salt')\n        with self.assertRaises(TypeError):\n            hashlib.scrypt(b'password', 2, 8, 1, salt=b'salt')\n        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a689672e7c31de15:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1159,
            "startColumn" : 17,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1157,
            "endLine" : 1161,
            "snippet" : {
              "text" : "        for n in [-1, 0, 1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=n, r=8, p=1)\n        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8186a3bb96b12af:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1162,
            "startColumn" : 17,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1160,
            "endLine" : 1164,
            "snippet" : {
              "text" : "        for r in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=r, p=1)\n        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c7fd05e3d0c5cb:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1165,
            "startColumn" : 17,
            "endColumn" : 73
          },
          "contextRegion" : {
            "startLine" : 1163,
            "endLine" : 1167,
            "snippet" : {
              "text" : "        for p in [-1, 0, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=p)\n        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6ba5ec94ea56617f:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1168,
            "startColumn" : 17,
            "endLine" : 1169,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 1166,
            "endLine" : 1171,
            "snippet" : {
              "text" : "        for maxmem in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               maxmem=maxmem)\n        for dklen in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ff880de6b9714f6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/key-derivation",
      "ruleIndex" : 10,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/key-derivation",
        "index" : 10
      },
      "message" : {
        "text" : "Use of key derivation algorithm SCRYPT"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "Lib/test/test_hashlib.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 1172,
            "startColumn" : 17,
            "endLine" : 1173,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 1170,
            "endLine" : 1175,
            "snippet" : {
              "text" : "        for dklen in [-1, None]:\n            with self.assertRaises((ValueError, OverflowError, TypeError)):\n                hashlib.scrypt(b'password', salt=b'salt', n=2, r=8, p=1,\n                               dklen=dklen)\n\n    def test_normalized_name(self):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c740125c0421614e:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:rustpython/rustpython/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}