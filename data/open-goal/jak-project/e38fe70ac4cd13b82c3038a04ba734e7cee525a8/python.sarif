{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "third-party/curl/tests/http/testenv/certs.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "scripts/gsrc/skeleton_creation/check_for_identical_objs.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "third-party/curl/tests/http/testenv/env.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 20,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "def _private_key(key_type):\n    if isinstance(key_type, str):\n        key_type = key_type.upper()\n        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f477f0df68496ad:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 56,
            "startColumn" : 24,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 54,
            "endLine" : 58,
            "snippet" : {
              "text" : "        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n            key_type = int(m.group(2))\n\n    if isinstance(key_type, int):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "93fd69f30d6fef5a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "\n    if isinstance(key_type, int):\n        return rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=key_type,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bda63b5a3a79f4e7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 16,
            "endLine" : 63,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 65,
            "snippet" : {
              "text" : "\n    if isinstance(key_type, int):\n        return rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=key_type,\n            backend=default_backend()\n        )\n    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bda63b5a3a79f4e7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 20,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "        )\n    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n    return ec.generate_private_key(\n        curve=key_type,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3a050c4097b776ba:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 20,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e06abf57c4ba5b4:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 56,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e06abf57c4ba5b4:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 490,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 488,
            "endLine" : 492,
            "snippet" : {
              "text" : "        csr = TestCA._add_ca_usages(csr)\n        cert = csr.sign(private_key=issuer_key,\n                        algorithm=hashes.SHA256(),\n                        backend=default_backend())\n        return Credentials(name=name, cert=cert, pkey=pkey, issuer=issuer)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "304b8987d5d25bd7:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 508,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 506,
            "endLine" : 510,
            "snippet" : {
              "text" : "        csr = TestCA._add_leaf_usages(csr, domains=domains, issuer=issuer)\n        cert = csr.sign(private_key=issuer.private_key,\n                        algorithm=hashes.SHA256(),\n                        backend=default_backend())\n        return Credentials(name=name, cert=cert, pkey=pkey, issuer=issuer)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "304b8987d5d25bd7:2",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 526,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 524,
            "endLine" : 528,
            "snippet" : {
              "text" : "        csr = TestCA._add_client_usages(csr, issuer=issuer, rfc82name=email)\n        cert = csr.sign(private_key=issuer.private_key,\n                        algorithm=hashes.SHA256(),\n                        backend=default_backend())\n        return Credentials(name=name, cert=cert, pkey=pkey, issuer=issuer)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "304b8987d5d25bd7:3",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 69,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "\n    @classmethod\n    def create_root(cls, name: str, store_dir: str, key_type: str = \"rsa2048\") -> Credentials:\n        store = CertStore(fpath=store_dir)\n        creds = store.load_credentials(name=\"ca\", key_type=key_type, issuer=None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1207b13ccb38fce:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de28647b9703aabf:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption, load_pem_private_key\nfrom cryptography.x509 import ExtendedKeyUsageOID, NameOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption, load_pem_private_key\nfrom cryptography.x509 import ExtendedKeyUsageOID, NameOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/gsrc/skeleton_creation/check_for_identical_objs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 11,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "  file_bytes = file_bytes[:offset_to_truncate]\n\n  return [hashlib.md5(file_bytes).hexdigest(), bytes_chopped]\n\n# print(get_md5_from_file(\"../../decompiler_out/jak2/raw_obj/air-train-ag-CAP.go\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "676601c578058250:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/env.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 52,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "            self._ca = TestCA.create_root(name=self.CONFIG.tld,\n                                          store_dir=ca_dir,\n                                          key_type=\"rsa2048\")\n        self._ca.issue_certs(self.CONFIG.cert_specs)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "286afbbbda60e62:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 20,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "def _private_key(key_type):\n    if isinstance(key_type, str):\n        key_type = key_type.upper()\n        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7f477f0df68496ad:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 56,
            "startColumn" : 24,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 54,
            "endLine" : 58,
            "snippet" : {
              "text" : "        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n            key_type = int(m.group(2))\n\n    if isinstance(key_type, int):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "93fd69f30d6fef5a:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "\n    if isinstance(key_type, int):\n        return rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=key_type,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bda63b5a3a79f4e7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 16,
            "endLine" : 63,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 65,
            "snippet" : {
              "text" : "\n    if isinstance(key_type, int):\n        return rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=key_type,\n            backend=default_backend()\n        )\n    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bda63b5a3a79f4e7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 20,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "        )\n    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n    return ec.generate_private_key(\n        curve=key_type,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3a050c4097b776ba:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 20,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e06abf57c4ba5b4:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 56,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8e06abf57c4ba5b4:1",
        "primaryLocationStartColumnFingerprint" : "47"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 69,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "\n    @classmethod\n    def create_root(cls, name: str, store_dir: str, key_type: str = \"rsa2048\") -> Credentials:\n        store = CertStore(fpath=store_dir)\n        creds = store.load_credentials(name=\"ca\", key_type=key_type, issuer=None)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1207b13ccb38fce:1",
        "primaryLocationStartColumnFingerprint" : "64"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de28647b9703aabf:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption, load_pem_private_key\nfrom cryptography.x509 import ExtendedKeyUsageOID, NameOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption, load_pem_private_key\nfrom cryptography.x509 import ExtendedKeyUsageOID, NameOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/env.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 52,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "            self._ca = TestCA.create_root(name=self.CONFIG.tld,\n                                          store_dir=ca_dir,\n                                          key_type=\"rsa2048\")\n        self._ca.issue_certs(self.CONFIG.cert_specs)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "286afbbbda60e62:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 490,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 488,
            "endLine" : 492,
            "snippet" : {
              "text" : "        csr = TestCA._add_ca_usages(csr)\n        cert = csr.sign(private_key=issuer_key,\n                        algorithm=hashes.SHA256(),\n                        backend=default_backend())\n        return Credentials(name=name, cert=cert, pkey=pkey, issuer=issuer)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "304b8987d5d25bd7:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 508,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 506,
            "endLine" : 510,
            "snippet" : {
              "text" : "        csr = TestCA._add_leaf_usages(csr, domains=domains, issuer=issuer)\n        cert = csr.sign(private_key=issuer.private_key,\n                        algorithm=hashes.SHA256(),\n                        backend=default_backend())\n        return Credentials(name=name, cert=cert, pkey=pkey, issuer=issuer)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "304b8987d5d25bd7:2",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 526,
            "startColumn" : 35,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 524,
            "endLine" : 528,
            "snippet" : {
              "text" : "        csr = TestCA._add_client_usages(csr, issuer=issuer, rfc82name=email)\n        cert = csr.sign(private_key=issuer.private_key,\n                        algorithm=hashes.SHA256(),\n                        backend=default_backend())\n        return Credentials(name=name, cert=cert, pkey=pkey, issuer=issuer)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "304b8987d5d25bd7:3",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "scripts/gsrc/skeleton_creation/check_for_identical_objs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 16,
            "startColumn" : 11,
            "endColumn" : 22
          },
          "contextRegion" : {
            "startLine" : 14,
            "endLine" : 18,
            "snippet" : {
              "text" : "  file_bytes = file_bytes[:offset_to_truncate]\n\n  return [hashlib.md5(file_bytes).hexdigest(), bytes_chopped]\n\n# print(get_md5_from_file(\"../../decompiler_out/jak2/raw_obj/air-train-ag-CAP.go\"))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "676601c578058250:1",
        "primaryLocationStartColumnFingerprint" : "8"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Attribute()](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for int()](2)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Attribute](3)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Attribute](4)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Str](5)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for Str](6)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 16,
            "endLine" : 63,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 65,
            "snippet" : {
              "text" : "\n    if isinstance(key_type, int):\n        return rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=key_type,\n            backend=default_backend()\n        )\n    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bda63b5a3a79f4e7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 20,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "def _private_key(key_type):\n    if isinstance(key_type, str):\n        key_type = key_type.upper()\n        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 56,
            "startColumn" : 24,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 54,
            "endLine" : 58,
            "snippet" : {
              "text" : "        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n            key_type = int(m.group(2))\n\n    if isinstance(key_type, int):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for int()"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 20,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 56,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 69,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "\n    @classmethod\n    def create_root(cls, name: str, store_dir: str, key_type: str = \"rsa2048\") -> Credentials:\n        store = CertStore(fpath=store_dir)\n        creds = store.load_credentials(name=\"ca\", key_type=key_type, issuer=None)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Str"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/env.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 52,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "            self._ca = TestCA.create_root(name=self.CONFIG.tld,\n                                          store_dir=ca_dir,\n                                          key_type=\"rsa2048\")\n        self._ca.issue_certs(self.CONFIG.cert_specs)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Str"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Attribute()](1)\nAsymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for int()](2)\nAsymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Subscript](3)\nAsymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Attribute](4)\nAsymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Attribute](5)\nAsymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Str](6)\nAsymmetric key generation for algorithm UNKNOWN with key config source [ControlFlowNode for Str](7)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 66,
            "startColumn" : 12,
            "endLine" : 69,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 64,
            "endLine" : 71,
            "snippet" : {
              "text" : "    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n    return ec.generate_private_key(\n        curve=key_type,\n        backend=default_backend()\n    )\n\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6f3f311ace91d8e0:1",
        "primaryLocationStartColumnFingerprint" : "7"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 53,
            "startColumn" : 20,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 51,
            "endLine" : 55,
            "snippet" : {
              "text" : "def _private_key(key_type):\n    if isinstance(key_type, str):\n        key_type = key_type.upper()\n        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 56,
            "startColumn" : 24,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 54,
            "endLine" : 58,
            "snippet" : {
              "text" : "        m = re.match(r'^(RSA)?(\\d+)$', key_type)\n        if m:\n            key_type = int(m.group(2))\n\n    if isinstance(key_type, int):\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for int()"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 65,
            "startColumn" : 20,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 63,
            "endLine" : 67,
            "snippet" : {
              "text" : "        )\n    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n    return ec.generate_private_key(\n        curve=key_type,\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Subscript"
        }
      }, {
        "id" : 4,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 20,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      }, {
        "id" : 5,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 201,
            "startColumn" : 56,
            "endColumn" : 69
          },
          "contextRegion" : {
            "startLine" : 199,
            "endLine" : 203,
            "snippet" : {
              "text" : "    def issue_cert(self, spec: CertificateSpec,\n                   chain: Optional[List['Credentials']] = None) -> 'Credentials':\n        key_type = spec.key_type if spec.key_type else self.key_type\n        creds = None\n        if self._store:\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute"
        }
      }, {
        "id" : 6,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 69,
            "endColumn" : 78
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "\n    @classmethod\n    def create_root(cls, name: str, store_dir: str, key_type: str = \"rsa2048\") -> Credentials:\n        store = CertStore(fpath=store_dir)\n        creds = store.load_credentials(name=\"ca\", key_type=key_type, issuer=None)\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Str"
        }
      }, {
        "id" : 7,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/env.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 324,
            "startColumn" : 52,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 322,
            "endLine" : 326,
            "snippet" : {
              "text" : "            self._ca = TestCA.create_root(name=self.CONFIG.tld,\n                                          store_dir=ca_dir,\n                                          key_type=\"rsa2048\")\n        self._ca.issue_certs(self.CONFIG.cert_specs)\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Str"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 16,
            "endColumn" : 40
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "\n    if isinstance(key_type, int):\n        return rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=key_type,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bda63b5a3a79f4e7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 16,
            "endLine" : 63,
            "endColumn" : 10
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 65,
            "snippet" : {
              "text" : "\n    if isinstance(key_type, int):\n        return rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=key_type,\n            backend=default_backend()\n        )\n    if not isinstance(key_type, ec.EllipticCurve) and key_type in EC_SUPPORTED:\n        key_type = EC_SUPPORTED[key_type]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bda63b5a3a79f4e7:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 35,
            "startColumn" : 59,
            "endColumn" : 62
          },
          "contextRegion" : {
            "startLine" : 33,
            "endLine" : 37,
            "snippet" : {
              "text" : "from cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "de28647b9703aabf:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 6,
            "endColumn" : 51
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption, load_pem_private_key\nfrom cryptography.x509 import ExtendedKeyUsageOID, NameOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "third-party/curl/tests/http/testenv/certs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 37,
            "startColumn" : 59,
            "endColumn" : 72
          },
          "contextRegion" : {
            "startLine" : 35,
            "endLine" : 39,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives.asymmetric import ec, rsa\nfrom cryptography.hazmat.primitives.asymmetric.ec import EllipticCurvePrivateKey\nfrom cryptography.hazmat.primitives.asymmetric.rsa import RSAPrivateKey\nfrom cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, NoEncryption, load_pem_private_key\nfrom cryptography.x509 import ExtendedKeyUsageOID, NameOID\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2394d8aa93392583:1",
        "primaryLocationStartColumnFingerprint" : "58"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:open-goal/jak-project/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}