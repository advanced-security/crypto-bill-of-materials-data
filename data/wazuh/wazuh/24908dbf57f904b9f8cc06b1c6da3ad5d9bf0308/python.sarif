{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "framework/wazuh/core/cluster/common.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "framework/wazuh/agent.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "api/api/alogging.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "api/api/authentication.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "wodles/azure/azure-logs.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "api/api/configuration.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    }, {
      "location" : {
        "uri" : "integrations/maltiverse.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 6
      }
    }, {
      "location" : {
        "uri" : "api/api/test/test_authentication.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 7
      }
    }, {
      "location" : {
        "uri" : "wodles/azure/tests/test_azure.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 8
      }
    }, {
      "location" : {
        "uri" : "framework/wazuh/core/cluster/tests/test_common.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 9
      }
    }, {
      "location" : {
        "uri" : "integrations/tests/test_maltiverse.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 10
      }
    }, {
      "location" : {
        "uri" : "wodles/azure/tests/test_orm.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 11
      }
    }, {
      "location" : {
        "uri" : "framework/wazuh/core/utils.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 12
      }
    }, {
      "location" : {
        "uri" : "tools/agent-upgrade/wpkpack.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 13
      }
    }, {
      "location" : {
        "uri" : "tools/agent-upgrade/wpkunpack.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 14
      }
    }, {
      "location" : {
        "uri" : "api/api/test/test_configuration.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 15
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 340,
            "startColumn" : 26,
            "endColumn" : 91
          },
          "contextRegion" : {
            "startLine" : 338,
            "endLine" : 342,
            "snippet" : {
              "text" : "        self.request_chunk = 5242880\n        # Object use to encrypt and decrypt requests.\n        self.my_fernet = cryptography.fernet.Fernet(base64.b64encode(fernet_key.encode())) if fernet_key else None\n        # Logging.Logger object used to write logs.\n        self.logger = logging.getLogger('wazuh') if not logger else logger\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5077786bff260456:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/agent.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 1384,
            "startColumn" : 35,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1382,
            "endLine" : 1386,
            "snippet" : {
              "text" : "                if len(agent_info['group']) > 1:\n                    multi_group = ','.join(agent_info['group'])\n                    multi_group = hashlib.sha256(multi_group.encode()).hexdigest()[:8]\n                    group_merged_path = path.join(common.MULTI_GROUPS_PATH, multi_group, \"merged.mg\")\n                else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9b6341900cf15f4a:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/alogging.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 122,
            "startColumn" : 33,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 120,
            "endLine" : 124,
            "snippet" : {
              "text" : "        # Create hash if run_as login\r\n        if not hash_auth_context and request.path == RUN_AS_LOGIN_ENDPOINT:\r\n            hash_auth_context = hashlib.blake2b(json.dumps(body).encode(), digest_size=16).hexdigest()\r\n\r\n        self.custom_logging(user, request.remote, request.method, request.path, query, body, time, response.status,\r\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3aa841efb4460931:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 39,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 126,
            "endLine" : 130,
            "snippet" : {
              "text" : "def change_keypair():\n    \"\"\"Generate key files to keep safe.\"\"\"\n    key_obj = ec.generate_private_key(ec.SECP521R1())\n    private_key = key_obj.private_bytes(\n        encoding=serialization.Encoding.PEM,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1cd4a08810267f7e:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 194,
            "startColumn" : 42,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 192,
            "endLine" : 196,
            "snippet" : {
              "text" : "                  \"rbac_roles\": data['roles'],\n                  \"rbac_mode\": result['rbac_mode']\n              } | ({\"hash_auth_context\": hashlib.blake2b(json.dumps(auth_context).encode(), digest_size=16).hexdigest()}\n                   if auth_context is not None else {})\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c031b46a8aa75756:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "wodles/azure/azure-logs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "from argparse import ArgumentParser\nfrom datetime import datetime, timedelta, timezone\nfrom hashlib import md5\nfrom json import dumps, loads, JSONDecodeError\nfrom os.path import abspath, dirname\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fc60d627de7405a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC\nUse of algorithm PKCS7\nUse of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 340,
            "startColumn" : 26,
            "endColumn" : 91
          },
          "contextRegion" : {
            "startLine" : 338,
            "endLine" : 342,
            "snippet" : {
              "text" : "        self.request_chunk = 5242880\n        # Object use to encrypt and decrypt requests.\n        self.my_fernet = cryptography.fernet.Fernet(base64.b64encode(fernet_key.encode())) if fernet_key else None\n        # Logging.Logger object used to write logs.\n        self.logger = logging.getLogger('wazuh') if not logger else logger\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5077786bff260456:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 649,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 647,
            "endLine" : 651,
            "snippet" : {
              "text" : "\n        # Send each chunk so it is updated in the destination.\n        file_hash = hashlib.sha256()\n        with open(filename, 'rb') as f:\n            for chunk in iter(lambda: f.read(self.request_chunk - len(relative_path) - 1), b''):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c337f0f33baeff3b:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 954,
            "startColumn" : 96,
            "endColumn" : 110
          },
          "contextRegion" : {
            "startLine" : 952,
            "endLine" : 956,
            "snippet" : {
              "text" : "            Response message.\n        \"\"\"\n        self.in_file[data] = {'fd': open(common.WAZUH_PATH + data.decode(), 'wb'), 'checksum': hashlib.sha256()}\n        return b\"ok \", b\"Ready to receive new file\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd3703d4b20041e2:1",
        "primaryLocationStartColumnFingerprint" : "87"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 11,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "        Private key.\n    \"\"\"\n    key = rsa.generate_private_key(\n        public_exponent,\n        key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d16789aff694e4e2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 11,
            "endLine" : 199,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 201,
            "snippet" : {
              "text" : "        Private key.\n    \"\"\"\n    key = rsa.generate_private_key(\n        public_exponent,\n        key_size,\n        crypto_default_backend()\n    )\n    with open(private_key_path, 'wb') as f:\n        f.write(key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d16789aff694e4e2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 248,
            "startColumn" : 25,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 246,
            "endLine" : 250,
            "snippet" : {
              "text" : "        critical=False,\n        # Sign our certificate with our private key\n    ).sign(private_key, hashes.SHA256(), crypto_default_backend())\n    # Write our certificate out to disk.\n    with open(certificate_path, 'wb') as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a10de2e227967fe:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.x509.oid import NameOID\nfrom jsonschema import validate, ValidationError\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d8ab75e3b012b45:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 51,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 176,
            "endLine" : 180,
            "snippet" : {
              "text" : "\ndef generate_private_key(private_key_path: str, public_exponent: int = 65537,\n                         key_size: int = 2048) -> rsa.RSAPrivateKey:\n    \"\"\"Generate a private key in 'CONFIG_PATH/ssl/server.key'.\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "659255c659719bc8:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 211,
            "startColumn" : 51,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 209,
            "endLine" : 213,
            "snippet" : {
              "text" : "\n\ndef generate_self_signed_certificate(private_key: rsa.RSAPrivateKey, certificate_path: str):\n    \"\"\"Generate a self-signed certificate using a generated private key. The certificate will be created in\n    'CONFIG_PATH/ssl/server.crt'.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7959bc83aab54f5:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "integrations/maltiverse.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 555,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 553,
            "endLine" : 557,
            "snippet" : {
              "text" : "        debug(\"# Maltiverse: URL present in the alert\")\n        url = alert[\"data\"][\"url\"]\n        urlchecksum = hashlib.sha256(url.encode(\"utf-8\")).hexdigest()\n\n        if url_ioc := maltiverse_api.url_get(urlchecksum):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3a0a1c0b391ec78:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/test/test_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 31,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 159,
            "snippet" : {
              "text" : "    mock_generate_keypair.assert_called_once()\n    expected_payload = original_payload | (\n        {\"hash_auth_context\": hashlib.blake2b(json.dumps(auth_context).encode(),\n                                              digest_size=16).hexdigest(), \"run_as\": True} if auth_context is not None else {})\n    mock_encode.assert_called_once_with(expected_payload, '-----BEGIN PRIVATE KEY-----', algorithm='ES512')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1b1fa771f13baf0:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "wodles/azure/tests/test_azure.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import sys\nfrom datetime import datetime\nfrom hashlib import md5\nfrom unittest.mock import call, patch, MagicMock, PropertyMock\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "498cceb6289e08fc:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/tests/test_common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 1049,
            "startColumn" : 67,
            "endColumn" : 81
          },
          "contextRegion" : {
            "startLine" : 1047,
            "endLine" : 1051,
            "snippet" : {
              "text" : "    with patch('builtins.open'):\n        with open(os.path.join(os.getcwd(), \"no_file.txt\")) as f:\n            handler.in_file = {b\"filepath\": {\"fd\": f, \"checksum\": hashlib.sha256()}}\n            assert handler.update_file(b\"filepath data\") == (b\"ok\", b\"File updated\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3742a4285517931c:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/tests/test_common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 1072,
            "startColumn" : 63,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 1070,
            "endLine" : 1074,
            "snippet" : {
              "text" : "            assert handler.end_file(b\"name checksum\") == (b\"ok\", b\"File received correctly\")\n\n            handler.in_file = {b\"name\": {\"fd\": f, \"checksum\": hashlib.sha256()}}\n            # Test the second condition\n            assert handler.end_file(b\"name checksum\") == (b\"err\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8caa83a43e79dfe9:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "integrations/tests/test_maltiverse.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 85,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 83,
            "endLine" : 87,
            "snippet" : {
              "text" : "    example_token = \"example_token\"\n    example_url = \"http://assocolours.com/mu/i/LoginVerification.php\"\n    example_urlchecksum = hashlib.sha256(example_url.encode(\"utf-8\")).hexdigest()\n    testing_maltiverse = maltiverse.Maltiverse(auth_token=example_token)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d079d0d8fc519f03:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "wodles/azure/tests/test_orm.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 70,
            "endLine" : 74,
            "snippet" : {
              "text" : "    for table in [orm.Graph, orm.LogAnalytics, orm.Storage]:\n        for id_ in range(3):\n            md5 = hashlib.md5(f'{table.__tablename__}{id_}'.encode()).hexdigest()\n            original_datetime = \"2022-01-01T23:59:59.1234567Z\"\n            row = table(md5=md5, query=\"\", min_processed_date=original_datetime, max_processed_date=original_datetime)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "838b2faa3cd046fc:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 736,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 734,
            "endLine" : 738,
            "snippet" : {
              "text" : "\ndef md5(fname):\n    hash_md5 = hashlib.md5()\n    with open(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a012fafa0a254539:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 744,
            "startColumn" : 20,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 742,
            "endLine" : 746,
            "snippet" : {
              "text" : "\ndef blake2b(fname):\n    hash_blake2b = hashlib.blake2b()\n    with open(fname, 'rb') as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "90888f29813a05e5:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 760,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 758,
            "endLine" : 762,
            "snippet" : {
              "text" : "\n\ndef get_hash(filename, hash_algorithm='md5', return_hex=True):\n    hashing = _get_hashing_algorithm(hash_algorithm)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2378d35730166d83:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 773,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 771,
            "endLine" : 775,
            "snippet" : {
              "text" : "\n\ndef get_hash_str(my_str, hash_algorithm='md5'):\n    hashing = _get_hashing_algorithm(hash_algorithm)\n    hashing.update(my_str.encode())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "df2f0af181df584c:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 38,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 77,
            "snippet" : {
              "text" : "\n        digest = hasher.finalize()\n        signature = key.sign(digest, PADDING, utils.Prehashed(HASH))\n\n        with open(target_path, 'wb') as fileout:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "baef718ac424f14b:1",
        "primaryLocationStartColumnFingerprint" : "29"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 8,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "\nMAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nBUFLEN = 4096\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9c4575b92e47ec2d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 11,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "MAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nBUFLEN = 4096\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2410a67b66c68e24:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 24,
            "endColumn" : 8
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "MAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nBUFLEN = 4096\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2410a67b66c68e24:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkunpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 8,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "\nMAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nSIGLEN = 2048 // 8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a3ed1b15d389dba:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkunpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 11,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "MAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nSIGLEN = 2048 // 8\nBUFLEN = 4096\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3fab43c33fa2e8d4:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
      "ruleIndex" : 2,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
        "index" : 2
      },
      "message" : {
        "text" : "Use of algorithm PKCS7"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 340,
            "startColumn" : 26,
            "endColumn" : 91
          },
          "contextRegion" : {
            "startLine" : 338,
            "endLine" : 342,
            "snippet" : {
              "text" : "        self.request_chunk = 5242880\n        # Object use to encrypt and decrypt requests.\n        self.my_fernet = cryptography.fernet.Fernet(base64.b64encode(fernet_key.encode())) if fernet_key else None\n        # Logging.Logger object used to write logs.\n        self.logger = logging.getLogger('wazuh') if not logger else logger\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5077786bff260456:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 39,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 126,
            "endLine" : 130,
            "snippet" : {
              "text" : "def change_keypair():\n    \"\"\"Generate key files to keep safe.\"\"\"\n    key_obj = ec.generate_private_key(ec.SECP521R1())\n    private_key = key_obj.private_bytes(\n        encoding=serialization.Encoding.PEM,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1cd4a08810267f7e:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 11,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "        Private key.\n    \"\"\"\n    key = rsa.generate_private_key(\n        public_exponent,\n        key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d16789aff694e4e2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 11,
            "endLine" : 199,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 201,
            "snippet" : {
              "text" : "        Private key.\n    \"\"\"\n    key = rsa.generate_private_key(\n        public_exponent,\n        key_size,\n        crypto_default_backend()\n    )\n    with open(private_key_path, 'wb') as f:\n        f.write(key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d16789aff694e4e2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.x509.oid import NameOID\nfrom jsonschema import validate, ValidationError\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d8ab75e3b012b45:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 51,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 176,
            "endLine" : 180,
            "snippet" : {
              "text" : "\ndef generate_private_key(private_key_path: str, public_exponent: int = 65537,\n                         key_size: int = 2048) -> rsa.RSAPrivateKey:\n    \"\"\"Generate a private key in 'CONFIG_PATH/ssl/server.key'.\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "659255c659719bc8:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
      "ruleIndex" : 4,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
        "index" : 4
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 211,
            "startColumn" : 51,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 209,
            "endLine" : 213,
            "snippet" : {
              "text" : "\n\ndef generate_self_signed_certificate(private_key: rsa.RSAPrivateKey, certificate_path: str):\n    \"\"\"Generate a self-signed certificate using a generated private key. The certificate will be created in\n    'CONFIG_PATH/ssl/server.crt'.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7959bc83aab54f5:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/agent.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 1384,
            "startColumn" : 35,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 1382,
            "endLine" : 1386,
            "snippet" : {
              "text" : "                if len(agent_info['group']) > 1:\n                    multi_group = ','.join(agent_info['group'])\n                    multi_group = hashlib.sha256(multi_group.encode()).hexdigest()[:8]\n                    group_merged_path = path.join(common.MULTI_GROUPS_PATH, multi_group, \"merged.mg\")\n                else:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9b6341900cf15f4a:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/alogging.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 122,
            "startColumn" : 33,
            "endColumn" : 48
          },
          "contextRegion" : {
            "startLine" : 120,
            "endLine" : 124,
            "snippet" : {
              "text" : "        # Create hash if run_as login\r\n        if not hash_auth_context and request.path == RUN_AS_LOGIN_ENDPOINT:\r\n            hash_auth_context = hashlib.blake2b(json.dumps(body).encode(), digest_size=16).hexdigest()\r\n\r\n        self.custom_logging(user, request.remote, request.method, request.path, query, body, time, response.status,\r\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3aa841efb4460931:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 194,
            "startColumn" : 42,
            "endColumn" : 57
          },
          "contextRegion" : {
            "startLine" : 192,
            "endLine" : 196,
            "snippet" : {
              "text" : "                  \"rbac_roles\": data['roles'],\n                  \"rbac_mode\": result['rbac_mode']\n              } | ({\"hash_auth_context\": hashlib.blake2b(json.dumps(auth_context).encode(), digest_size=16).hexdigest()}\n                   if auth_context is not None else {})\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c031b46a8aa75756:1",
        "primaryLocationStartColumnFingerprint" : "27"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "wodles/azure/azure-logs.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "from argparse import ArgumentParser\nfrom datetime import datetime, timedelta, timezone\nfrom hashlib import md5\nfrom json import dumps, loads, JSONDecodeError\nfrom os.path import abspath, dirname\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "7fc60d627de7405a:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 649,
            "startColumn" : 21,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 647,
            "endLine" : 651,
            "snippet" : {
              "text" : "\n        # Send each chunk so it is updated in the destination.\n        file_hash = hashlib.sha256()\n        with open(filename, 'rb') as f:\n            for chunk in iter(lambda: f.read(self.request_chunk - len(relative_path) - 1), b''):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c337f0f33baeff3b:1",
        "primaryLocationStartColumnFingerprint" : "12"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 954,
            "startColumn" : 96,
            "endColumn" : 110
          },
          "contextRegion" : {
            "startLine" : 952,
            "endLine" : 956,
            "snippet" : {
              "text" : "            Response message.\n        \"\"\"\n        self.in_file[data] = {'fd': open(common.WAZUH_PATH + data.decode(), 'wb'), 'checksum': hashlib.sha256()}\n        return b\"ok \", b\"Ready to receive new file\"\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "bd3703d4b20041e2:1",
        "primaryLocationStartColumnFingerprint" : "87"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 248,
            "startColumn" : 25,
            "endColumn" : 38
          },
          "contextRegion" : {
            "startLine" : 246,
            "endLine" : 250,
            "snippet" : {
              "text" : "        critical=False,\n        # Sign our certificate with our private key\n    ).sign(private_key, hashes.SHA256(), crypto_default_backend())\n    # Write our certificate out to disk.\n    with open(certificate_path, 'wb') as f:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9a10de2e227967fe:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "integrations/maltiverse.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 6
          },
          "region" : {
            "startLine" : 555,
            "startColumn" : 23,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 553,
            "endLine" : 557,
            "snippet" : {
              "text" : "        debug(\"# Maltiverse: URL present in the alert\")\n        url = alert[\"data\"][\"url\"]\n        urlchecksum = hashlib.sha256(url.encode(\"utf-8\")).hexdigest()\n\n        if url_ioc := maltiverse_api.url_get(urlchecksum):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a3a0a1c0b391ec78:1",
        "primaryLocationStartColumnFingerprint" : "14"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/test/test_authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 7
          },
          "region" : {
            "startLine" : 157,
            "startColumn" : 31,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 155,
            "endLine" : 159,
            "snippet" : {
              "text" : "    mock_generate_keypair.assert_called_once()\n    expected_payload = original_payload | (\n        {\"hash_auth_context\": hashlib.blake2b(json.dumps(auth_context).encode(),\n                                              digest_size=16).hexdigest(), \"run_as\": True} if auth_context is not None else {})\n    mock_encode.assert_called_once_with(expected_payload, '-----BEGIN PRIVATE KEY-----', algorithm='ES512')\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a1b1fa771f13baf0:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "wodles/azure/tests/test_azure.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 8
          },
          "region" : {
            "startLine" : 8,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 6,
            "endLine" : 10,
            "snippet" : {
              "text" : "import sys\nfrom datetime import datetime\nfrom hashlib import md5\nfrom unittest.mock import call, patch, MagicMock, PropertyMock\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "498cceb6289e08fc:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/tests/test_common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 1049,
            "startColumn" : 67,
            "endColumn" : 81
          },
          "contextRegion" : {
            "startLine" : 1047,
            "endLine" : 1051,
            "snippet" : {
              "text" : "    with patch('builtins.open'):\n        with open(os.path.join(os.getcwd(), \"no_file.txt\")) as f:\n            handler.in_file = {b\"filepath\": {\"fd\": f, \"checksum\": hashlib.sha256()}}\n            assert handler.update_file(b\"filepath data\") == (b\"ok\", b\"File updated\")\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3742a4285517931c:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/tests/test_common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 9
          },
          "region" : {
            "startLine" : 1072,
            "startColumn" : 63,
            "endColumn" : 77
          },
          "contextRegion" : {
            "startLine" : 1070,
            "endLine" : 1074,
            "snippet" : {
              "text" : "            assert handler.end_file(b\"name checksum\") == (b\"ok\", b\"File received correctly\")\n\n            handler.in_file = {b\"name\": {\"fd\": f, \"checksum\": hashlib.sha256()}}\n            # Test the second condition\n            assert handler.end_file(b\"name checksum\") == (b\"err\",\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8caa83a43e79dfe9:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "integrations/tests/test_maltiverse.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 10
          },
          "region" : {
            "startLine" : 85,
            "startColumn" : 27,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 83,
            "endLine" : 87,
            "snippet" : {
              "text" : "    example_token = \"example_token\"\n    example_url = \"http://assocolours.com/mu/i/LoginVerification.php\"\n    example_urlchecksum = hashlib.sha256(example_url.encode(\"utf-8\")).hexdigest()\n    testing_maltiverse = maltiverse.Maltiverse(auth_token=example_token)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d079d0d8fc519f03:1",
        "primaryLocationStartColumnFingerprint" : "22"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "wodles/azure/tests/test_orm.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 11
          },
          "region" : {
            "startLine" : 72,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 70,
            "endLine" : 74,
            "snippet" : {
              "text" : "    for table in [orm.Graph, orm.LogAnalytics, orm.Storage]:\n        for id_ in range(3):\n            md5 = hashlib.md5(f'{table.__tablename__}{id_}'.encode()).hexdigest()\n            original_datetime = \"2022-01-01T23:59:59.1234567Z\"\n            row = table(md5=md5, query=\"\", min_processed_date=original_datetime, max_processed_date=original_datetime)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "838b2faa3cd046fc:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 736,
            "startColumn" : 16,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 734,
            "endLine" : 738,
            "snippet" : {
              "text" : "\ndef md5(fname):\n    hash_md5 = hashlib.md5()\n    with open(fname, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a012fafa0a254539:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm BLAKE2B"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 744,
            "startColumn" : 20,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 742,
            "endLine" : 746,
            "snippet" : {
              "text" : "\ndef blake2b(fname):\n    hash_blake2b = hashlib.blake2b()\n    with open(fname, 'rb') as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "90888f29813a05e5:1",
        "primaryLocationStartColumnFingerprint" : "15"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 760,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 758,
            "endLine" : 762,
            "snippet" : {
              "text" : "\n\ndef get_hash(filename, hash_algorithm='md5', return_hex=True):\n    hashing = _get_hashing_algorithm(hash_algorithm)\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2378d35730166d83:1",
        "primaryLocationStartColumnFingerprint" : "38"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/utils.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 12
          },
          "region" : {
            "startLine" : 773,
            "startColumn" : 41,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 771,
            "endLine" : 775,
            "snippet" : {
              "text" : "\n\ndef get_hash_str(my_str, hash_algorithm='md5'):\n    hashing = _get_hashing_algorithm(hash_algorithm)\n    hashing.update(my_str.encode())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "df2f0af181df584c:1",
        "primaryLocationStartColumnFingerprint" : "40"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 23,
            "startColumn" : 8,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 21,
            "endLine" : 25,
            "snippet" : {
              "text" : "\nMAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nBUFLEN = 4096\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "9c4575b92e47ec2d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkunpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 25,
            "startColumn" : 8,
            "endColumn" : 21
          },
          "contextRegion" : {
            "startLine" : 23,
            "endLine" : 27,
            "snippet" : {
              "text" : "\nMAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nSIGLEN = 2048 // 8\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a3ed1b15d389dba:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES128"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 340,
            "startColumn" : 26,
            "endColumn" : 91
          },
          "contextRegion" : {
            "startLine" : 338,
            "endLine" : 342,
            "snippet" : {
              "text" : "        self.request_chunk = 5242880\n        # Object use to encrypt and decrypt requests.\n        self.my_fernet = cryptography.fernet.Fernet(base64.b64encode(fernet_key.encode())) if fernet_key else None\n        # Logging.Logger object used to write logs.\n        self.logger = logging.getLogger('wazuh') if not logger else logger\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5077786bff260456:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm SECP521R1 with key config source [ControlFlowNode for Attribute()](1)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 15,
            "endColumn" : 54
          },
          "contextRegion" : {
            "startLine" : 126,
            "endLine" : 130,
            "snippet" : {
              "text" : "def change_keypair():\n    \"\"\"Generate key files to keep safe.\"\"\"\n    key_obj = ec.generate_private_key(ec.SECP521R1())\n    private_key = key_obj.private_bytes(\n        encoding=serialization.Encoding.PEM,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1cd4a08810267f7e:1",
        "primaryLocationStartColumnFingerprint" : "10"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 39,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 126,
            "endLine" : 130,
            "snippet" : {
              "text" : "def change_keypair():\n    \"\"\"Generate key files to keep safe.\"\"\"\n    key_obj = ec.generate_private_key(ec.SECP521R1())\n    private_key = key_obj.private_bytes(\n        encoding=serialization.Encoding.PEM,\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for Attribute()"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-key-generation",
      "ruleIndex" : 8,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
        "index" : 8
      },
      "message" : {
        "text" : "Asymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](1)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](2)\nAsymmetric key generation for algorithm RSA with key config source [ControlFlowNode for IntegerLiteral](3)"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 11,
            "endLine" : 199,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 201,
            "snippet" : {
              "text" : "        Private key.\n    \"\"\"\n    key = rsa.generate_private_key(\n        public_exponent,\n        key_size,\n        crypto_default_backend()\n    )\n    with open(private_key_path, 'wb') as f:\n        f.write(key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d16789aff694e4e2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      },
      "relatedLocations" : [ {
        "id" : 1,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 42,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 176,
            "endLine" : 180,
            "snippet" : {
              "text" : "\ndef generate_private_key(private_key_path: str, public_exponent: int = 65537,\n                         key_size: int = 2048) -> rsa.RSAPrivateKey:\n    \"\"\"Generate a private key in 'CONFIG_PATH/ssl/server.key'.\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 2,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/test/test_configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 163,
            "startColumn" : 77,
            "endColumn" : 81
          },
          "contextRegion" : {
            "startLine" : 161,
            "endLine" : 165,
            "snippet" : {
              "text" : "def test_generate_private_key(mock_open, mock_chmod):\n    \"\"\"Verify that genetare_private_key returns expected key and 'open' method is called with expected parameters\"\"\"\n    result_key = configuration.generate_private_key('test_path.crt', 65537, 2048)\n\n    assert result_key.key_size == 2048\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      }, {
        "id" : 3,
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/test/test_configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 15
          },
          "region" : {
            "startLine" : 174,
            "startColumn" : 77,
            "endColumn" : 81
          },
          "contextRegion" : {
            "startLine" : 172,
            "endLine" : 176,
            "snippet" : {
              "text" : "def test_generate_self_signed_certificate(mock_open, mock_chmod):\n    \"\"\"Verify that genetare_private_key returns expected key and 'open' method is called with expected parameters\"\"\"\n    result_key = configuration.generate_private_key('test_path.crt', 65537, 2048)\n    configuration.generate_self_signed_certificate(result_key, 'test_path.crt')\n\n"
            }
          }
        },
        "message" : {
          "text" : "ControlFlowNode for IntegerLiteral"
        }
      } ]
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 75,
            "startColumn" : 38,
            "endColumn" : 45
          },
          "contextRegion" : {
            "startLine" : 73,
            "endLine" : 77,
            "snippet" : {
              "text" : "\n        digest = hasher.finalize()\n        signature = key.sign(digest, PADDING, utils.Prehashed(HASH))\n\n        with open(target_path, 'wb') as fileout:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "baef718ac424f14b:1",
        "primaryLocationStartColumnFingerprint" : "29"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 24,
            "startColumn" : 11,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "MAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nBUFLEN = 4096\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2410a67b66c68e24:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm UNKNOWN"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 13
          },
          "region" : {
            "startLine" : 24,
            "endColumn" : 8
          },
          "contextRegion" : {
            "startLine" : 22,
            "endLine" : 26,
            "snippet" : {
              "text" : "MAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nBUFLEN = 4096\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2410a67b66c68e24:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
      "ruleIndex" : 9,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
        "index" : 9
      },
      "message" : {
        "text" : "Use of algorithm PKCS1V15"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tools/agent-upgrade/wpkunpack.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 14
          },
          "region" : {
            "startLine" : 26,
            "startColumn" : 11,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 24,
            "endLine" : 28,
            "snippet" : {
              "text" : "MAGIC = b'WPK256\\0'\nHASH = hashes.SHA256()\nPADDING = padding.PKCS1v15()\nSIGLEN = 2048 // 8\nBUFLEN = 4096\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3fab43c33fa2e8d4:1",
        "primaryLocationStartColumnFingerprint" : "10"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 11,
            "endColumn" : 35
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 197,
            "snippet" : {
              "text" : "        Private key.\n    \"\"\"\n    key = rsa.generate_private_key(\n        public_exponent,\n        key_size,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d16789aff694e4e2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 195,
            "startColumn" : 11,
            "endLine" : 199,
            "endColumn" : 6
          },
          "contextRegion" : {
            "startLine" : 193,
            "endLine" : 201,
            "snippet" : {
              "text" : "        Private key.\n    \"\"\"\n    key = rsa.generate_private_key(\n        public_exponent,\n        key_size,\n        crypto_default_backend()\n    )\n    with open(private_key_path, 'wb') as f:\n        f.write(key.private_bytes(\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d16789aff694e4e2:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 15,
            "startColumn" : 55,
            "endColumn" : 58
          },
          "contextRegion" : {
            "startLine" : 13,
            "endLine" : 17,
            "snippet" : {
              "text" : "from cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.x509.oid import NameOID\nfrom jsonschema import validate, ValidationError\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6d8ab75e3b012b45:1",
        "primaryLocationStartColumnFingerprint" : "54"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 178,
            "startColumn" : 51,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 176,
            "endLine" : 180,
            "snippet" : {
              "text" : "\ndef generate_private_key(private_key_path: str, public_exponent: int = 65537,\n                         key_size: int = 2048) -> rsa.RSAPrivateKey:\n    \"\"\"Generate a private key in 'CONFIG_PATH/ssl/server.key'.\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "659255c659719bc8:1",
        "primaryLocationStartColumnFingerprint" : "25"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
      "ruleIndex" : 13,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
        "index" : 13
      },
      "message" : {
        "text" : "Use of algorithm RSA"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/configuration.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 211,
            "startColumn" : 51,
            "endColumn" : 68
          },
          "contextRegion" : {
            "startLine" : 209,
            "endLine" : 213,
            "snippet" : {
              "text" : "\n\ndef generate_self_signed_certificate(private_key: rsa.RSAPrivateKey, certificate_path: str):\n    \"\"\"Generate a self-signed certificate using a generated private key. The certificate will be created in\n    'CONFIG_PATH/ssl/server.crt'.\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a7959bc83aab54f5:1",
        "primaryLocationStartColumnFingerprint" : "50"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "framework/wazuh/core/cluster/common.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 340,
            "startColumn" : 26,
            "endColumn" : 91
          },
          "contextRegion" : {
            "startLine" : 338,
            "endLine" : 342,
            "snippet" : {
              "text" : "        self.request_chunk = 5242880\n        # Object use to encrypt and decrypt requests.\n        self.my_fernet = cryptography.fernet.Fernet(base64.b64encode(fernet_key.encode())) if fernet_key else None\n        # Logging.Logger object used to write logs.\n        self.logger = logging.getLogger('wazuh') if not logger else logger\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5077786bff260456:1",
        "primaryLocationStartColumnFingerprint" : "17"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
      "ruleIndex" : 15,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
        "index" : 15
      },
      "message" : {
        "text" : "Use of algorithm SECP521R1 with key size (in bits) 521"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "api/api/authentication.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 128,
            "startColumn" : 39,
            "endColumn" : 53
          },
          "contextRegion" : {
            "startLine" : 126,
            "endLine" : 130,
            "snippet" : {
              "text" : "def change_keypair():\n    \"\"\"Generate key files to keep safe.\"\"\"\n    key_obj = ec.generate_private_key(ec.SECP521R1())\n    private_key = key_obj.private_bytes(\n        encoding=serialization.Encoding.PEM,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1cd4a08810267f7e:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:wazuh/wazuh/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}