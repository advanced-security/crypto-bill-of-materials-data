{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.3",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.3+ff65ffafb003e86bd4c18f2c031f5faaf6f1038b",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.3/x64/codeql/qlpacks/codeql/python-queries/0.9.3/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "pypdf/_crypt_providers/_cryptography.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "pypdf/generic/_base.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "pypdf/_encryption.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "pypdf/_writer.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "\ndef aes_ecb_encrypt(key: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=ECB()).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "81f6fa9c883052dc:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/unkown-iv-sources",
      "ruleIndex" : 0,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
        "index" : 0
      },
      "message" : {
        "text" : "Block mode with unknown IV or Nonce configuration"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\ndef aes_ecb_decrypt(key: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=ECB()).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a703eb9f311575c:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/generic/_base.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 49,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "class PdfObject(PdfObjectProtocol):\n    # function for calculating a hash value\n    hash_func: Callable[..., \"hashlib._Hash\"] = hashlib.sha1\n    indirect_reference: Optional[\"IndirectObject\"]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "facff388ce913481:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm ARC4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 30,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "class CryptRC4(CryptBase):\n    def __init__(self, key: bytes) -> None:\n        self.cipher = Cipher(ARC4(key), mode=None)\n\n    def encrypt(self, data: bytes) -> bytes:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "938312f0d2d61a77:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 56,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 54,
            "endLine" : 58,
            "snippet" : {
              "text" : "class CryptAES(CryptBase):\n    def __init__(self, key: bytes) -> None:\n        self.alg = AES(key)\n\n    def encrypt(self, data: bytes) -> bytes:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2274a09a3964d8ab:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 35,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 61,
            "endLine" : 65,
            "snippet" : {
              "text" : "        data = pad.update(data) + pad.finalize()\n\n        cipher = Cipher(self.alg, CBC(iv))\n        encryptor = cipher.encryptor()\n        return iv + encryptor.update(data) + encryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "115007eb8de7268b:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 35,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "            data = pad.update(data) + pad.finalize()\n\n        cipher = Cipher(self.alg, CBC(iv))\n        decryptor = cipher.decryptor()\n        d = decryptor.update(data) + decryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f7ad8dc8a6ea143:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm ARC4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "\ndef rc4_encrypt(key: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(ARC4(key), mode=None).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8af54641da1a41a:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm ARC4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "\ndef rc4_decrypt(key: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(ARC4(key), mode=None).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "612898818882a89a:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "\ndef aes_ecb_encrypt(key: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=ECB()).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "81f6fa9c883052dc:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "\ndef aes_ecb_encrypt(key: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=ECB()).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "81f6fa9c883052dc:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\ndef aes_ecb_decrypt(key: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=ECB()).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a703eb9f311575c:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\ndef aes_ecb_decrypt(key: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=ECB()).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a703eb9f311575c:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 106,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 104,
            "endLine" : 108,
            "snippet" : {
              "text" : "\ndef aes_cbc_encrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=CBC(iv)).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c7badc60b711ca6:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 106,
            "startColumn" : 39,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 104,
            "endLine" : 108,
            "snippet" : {
              "text" : "\ndef aes_cbc_encrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=CBC(iv)).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c7badc60b711ca6:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 111,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 109,
            "endLine" : 112,
            "snippet" : {
              "text" : "\ndef aes_cbc_decrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=CBC(iv)).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa7ebfd6b2bb3756:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 111,
            "startColumn" : 39,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 109,
            "endLine" : 112,
            "snippet" : {
              "text" : "\ndef aes_cbc_decrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=CBC(iv)).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa7ebfd6b2bb3756:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 193,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 191,
            "endLine" : 195,
            "snippet" : {
              "text" : "        \"\"\"\n        a = _padding(password)\n        u_hash = hashlib.md5(a)\n        u_hash.update(o_entry)\n        u_hash.update(struct.pack(\"<I\", P))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4048e61d2d7972c1:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 203,
            "startColumn" : 33,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 201,
            "endLine" : 205,
            "snippet" : {
              "text" : "        if rev >= 3:\n            for _ in range(50):\n                u_hash_digest = hashlib.md5(u_hash_digest[:length]).digest()\n        return u_hash_digest[:length]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bcd148c3745c685:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 248,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 246,
            "endLine" : 250,
            "snippet" : {
              "text" : "        \"\"\"\n        a = _padding(owner_password)\n        o_hash_digest = hashlib.md5(a).digest()\n\n        if rev >= 3:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6c5db34ddd79872:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 252,
            "startColumn" : 33,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 250,
            "endLine" : 254,
            "snippet" : {
              "text" : "        if rev >= 3:\n            for _ in range(50):\n                o_hash_digest = hashlib.md5(o_hash_digest).digest()\n\n        rc4_key = o_hash_digest[: key_size // 8]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2725b5148ef25d7f:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 330,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 328,
            "endLine" : 332,
            "snippet" : {
              "text" : "           value of the U entry in the encryption dictionary.\n        \"\"\"\n        u_hash = hashlib.md5(_PADDING)\n        u_hash.update(id1_entry)\n        rc4_enc = rc4_encrypt(key, u_hash.digest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45e2a6a7d4b655f0:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 570,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 568,
            "endLine" : 572,
            "snippet" : {
              "text" : "    def calculate_hash(R: int, password: bytes, salt: bytes, udata: bytes) -> bytes:\n        # from https://github.com/qpdf/qpdf/blob/main/libqpdf/QPDF_encryption.cc\n        k = hashlib.sha256(password + salt + udata).digest()\n        if R < 6:\n            return k\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d29e5fde683b606d:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 579,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 577,
            "endLine" : 581,
            "snippet" : {
              "text" : "            e = aes_cbc_encrypt(k[:16], k[16:32], k1 * 64)\n            hash_fn = (\n                hashlib.sha256,\n                hashlib.sha384,\n                hashlib.sha512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "526783af31ff0bb6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 580,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 578,
            "endLine" : 582,
            "snippet" : {
              "text" : "            hash_fn = (\n                hashlib.sha256,\n                hashlib.sha384,\n                hashlib.sha512,\n            )[sum(e[:16]) % 3]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b833ef21cfedddf5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 581,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 579,
            "endLine" : 583,
            "snippet" : {
              "text" : "                hashlib.sha256,\n                hashlib.sha384,\n                hashlib.sha512,\n            )[sum(e[:16]) % 3]\n            k = hash_fn(e).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8553f8bbc46d4b7c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 912,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 910,
            "endLine" : 914,
            "snippet" : {
              "text" : "        n = 5 if self.V == 1 else self.Length // 8\n        key_data = key[:n] + pack1 + pack2\n        key_hash = hashlib.md5(key_data)\n        rc4_key = key_hash.digest()[: min(n + 5, 16)]\n        # for AES-128\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f5d7222994a48b14:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_writer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 149,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 147,
            "endLine" : 151,
            "snippet" : {
              "text" : "\ndef _rolling_checksum(stream: BytesIO, blocksize: int = 65536) -> str:\n    hash = hashlib.md5()\n    for block in iter(lambda: stream.read(blocksize), b\"\"):\n        hash.update(block)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8c09201c6159e6b4:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 59,
            "startColumn" : 14,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 57,
            "endLine" : 61,
            "snippet" : {
              "text" : "\n    def encrypt(self, data: bytes) -> bytes:\n        iv = secrets.token_bytes(16)\n        pad = padding.PKCS7(128).padder()\n        data = pad.update(data) + pad.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "6a40f4a45ecb28d9:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 68,
            "startColumn" : 14,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 66,
            "endLine" : 70,
            "snippet" : {
              "text" : "\n    def decrypt(self, data: bytes) -> bytes:\n        iv = data[:16]\n        data = data[16:]\n        # for empty encrypted data\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "51aeef6fbbf27192:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 536,
            "startColumn" : 14,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 534,
            "endLine" : 538,
            "snippet" : {
              "text" : "        ):\n            return b\"\"\n        iv = bytes(0 for _ in range(16))\n        tmp_key = AlgV5.calculate_hash(R, password, o_value[40:48], u_value[:48])\n        key = aes_cbc_decrypt(tmp_key, iv, oe_value)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "39fc5c043f6e7f1a:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 563,
            "startColumn" : 14,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 561,
            "endLine" : 565,
            "snippet" : {
              "text" : "        if AlgV5.calculate_hash(R, password, u_value[32:40], b\"\") != u_value[:32]:\n            return b\"\"\n        iv = bytes(0 for _ in range(16))\n        tmp_key = AlgV5.calculate_hash(R, password, u_value[40:48], b\"\")\n        return aes_cbc_decrypt(tmp_key, iv, ue_value)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "754aba0bf38d41cd:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 577,
            "startColumn" : 41,
            "endColumn" : 49
          },
          "contextRegion" : {
            "startLine" : 575,
            "endLine" : 579,
            "snippet" : {
              "text" : "            count += 1\n            k1 = password + k + udata\n            e = aes_cbc_encrypt(k[:16], k[16:32], k1 * 64)\n            hash_fn = (\n                hashlib.sha256,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "939947502471ddbe:1",
        "primaryLocationStartColumnFingerprint" : "28"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 668,
            "startColumn" : 14,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 666,
            "endLine" : 670,
            "snippet" : {
              "text" : "\n        tmp_key = AlgV5.calculate_hash(R, password, key_salt, b\"\")\n        iv = bytes(0 for _ in range(16))\n        ue_value = aes_cbc_encrypt(tmp_key, iv, key)\n        return u_value, ue_value\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "80b1fbb4adfed43b:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/iv-sources",
      "ruleIndex" : 3,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/iv-sources",
        "index" : 3
      },
      "message" : {
        "text" : "Block mode IV/Nonce source"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 713,
            "startColumn" : 14,
            "endColumn" : 41
          },
          "contextRegion" : {
            "startLine" : 711,
            "endLine" : 715,
            "snippet" : {
              "text" : "        )\n        tmp_key = AlgV5.calculate_hash(R, password, key_salt, u_value[:48])\n        iv = bytes(0 for _ in range(16))\n        oe_value = aes_cbc_encrypt(tmp_key, iv, key)\n        return o_value, oe_value\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "20be8cd2fc82bff9:1",
        "primaryLocationStartColumnFingerprint" : "5"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/generic/_base.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 55,
            "startColumn" : 49,
            "endColumn" : 61
          },
          "contextRegion" : {
            "startLine" : 53,
            "endLine" : 57,
            "snippet" : {
              "text" : "class PdfObject(PdfObjectProtocol):\n    # function for calculating a hash value\n    hash_func: Callable[..., \"hashlib._Hash\"] = hashlib.sha1\n    indirect_reference: Optional[\"IndirectObject\"]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "facff388ce913481:1",
        "primaryLocationStartColumnFingerprint" : "44"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 193,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 191,
            "endLine" : 195,
            "snippet" : {
              "text" : "        \"\"\"\n        a = _padding(password)\n        u_hash = hashlib.md5(a)\n        u_hash.update(o_entry)\n        u_hash.update(struct.pack(\"<I\", P))\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4048e61d2d7972c1:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 203,
            "startColumn" : 33,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 201,
            "endLine" : 205,
            "snippet" : {
              "text" : "        if rev >= 3:\n            for _ in range(50):\n                u_hash_digest = hashlib.md5(u_hash_digest[:length]).digest()\n        return u_hash_digest[:length]\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4bcd148c3745c685:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 248,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 246,
            "endLine" : 250,
            "snippet" : {
              "text" : "        \"\"\"\n        a = _padding(owner_password)\n        o_hash_digest = hashlib.md5(a).digest()\n\n        if rev >= 3:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f6c5db34ddd79872:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 252,
            "startColumn" : 33,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 250,
            "endLine" : 254,
            "snippet" : {
              "text" : "        if rev >= 3:\n            for _ in range(50):\n                o_hash_digest = hashlib.md5(o_hash_digest).digest()\n\n        rc4_key = o_hash_digest[: key_size // 8]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2725b5148ef25d7f:1",
        "primaryLocationStartColumnFingerprint" : "16"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 330,
            "startColumn" : 18,
            "endColumn" : 29
          },
          "contextRegion" : {
            "startLine" : 328,
            "endLine" : 332,
            "snippet" : {
              "text" : "           value of the U entry in the encryption dictionary.\n        \"\"\"\n        u_hash = hashlib.md5(_PADDING)\n        u_hash.update(id1_entry)\n        rc4_enc = rc4_encrypt(key, u_hash.digest())\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "45e2a6a7d4b655f0:1",
        "primaryLocationStartColumnFingerprint" : "9"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 570,
            "startColumn" : 13,
            "endColumn" : 27
          },
          "contextRegion" : {
            "startLine" : 568,
            "endLine" : 572,
            "snippet" : {
              "text" : "    def calculate_hash(R: int, password: bytes, salt: bytes, udata: bytes) -> bytes:\n        # from https://github.com/qpdf/qpdf/blob/main/libqpdf/QPDF_encryption.cc\n        k = hashlib.sha256(password + salt + udata).digest()\n        if R < 6:\n            return k\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "d29e5fde683b606d:1",
        "primaryLocationStartColumnFingerprint" : "4"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA256"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 579,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 577,
            "endLine" : 581,
            "snippet" : {
              "text" : "            e = aes_cbc_encrypt(k[:16], k[16:32], k1 * 64)\n            hash_fn = (\n                hashlib.sha256,\n                hashlib.sha384,\n                hashlib.sha512,\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "526783af31ff0bb6:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA384"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 580,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 578,
            "endLine" : 582,
            "snippet" : {
              "text" : "            hash_fn = (\n                hashlib.sha256,\n                hashlib.sha384,\n                hashlib.sha512,\n            )[sum(e[:16]) % 3]\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b833ef21cfedddf5:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA512"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 581,
            "startColumn" : 17,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 579,
            "endLine" : 583,
            "snippet" : {
              "text" : "                hashlib.sha256,\n                hashlib.sha384,\n                hashlib.sha512,\n            )[sum(e[:16]) % 3]\n            k = hash_fn(e).digest()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8553f8bbc46d4b7c:1",
        "primaryLocationStartColumnFingerprint" : "0"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_encryption.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 912,
            "startColumn" : 20,
            "endColumn" : 31
          },
          "contextRegion" : {
            "startLine" : 910,
            "endLine" : 914,
            "snippet" : {
              "text" : "        n = 5 if self.V == 1 else self.Length // 8\n        key_data = key[:n] + pack1 + pack2\n        key_hash = hashlib.md5(key_data)\n        rc4_key = key_hash.digest()[: min(n + 5, 16)]\n        # for AES-128\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f5d7222994a48b14:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_writer.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 149,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 147,
            "endLine" : 151,
            "snippet" : {
              "text" : "\ndef _rolling_checksum(stream: BytesIO, blocksize: int = 65536) -> str:\n    hash = hashlib.md5()\n    for block in iter(lambda: stream.read(blocksize), b\"\"):\n        hash.update(block)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8c09201c6159e6b4:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm ARC4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 43,
            "startColumn" : 30,
            "endColumn" : 39
          },
          "contextRegion" : {
            "startLine" : 41,
            "endLine" : 45,
            "snippet" : {
              "text" : "class CryptRC4(CryptBase):\n    def __init__(self, key: bytes) -> None:\n        self.cipher = Cipher(ARC4(key), mode=None)\n\n    def encrypt(self, data: bytes) -> bytes:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "938312f0d2d61a77:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 56,
            "startColumn" : 20,
            "endColumn" : 28
          },
          "contextRegion" : {
            "startLine" : 54,
            "endLine" : 58,
            "snippet" : {
              "text" : "class CryptAES(CryptBase):\n    def __init__(self, key: bytes) -> None:\n        self.alg = AES(key)\n\n    def encrypt(self, data: bytes) -> bytes:\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2274a09a3964d8ab:1",
        "primaryLocationStartColumnFingerprint" : "11"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm ARC4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 86,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 84,
            "endLine" : 88,
            "snippet" : {
              "text" : "\ndef rc4_encrypt(key: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(ARC4(key), mode=None).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c8af54641da1a41a:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm ARC4"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 91,
            "startColumn" : 24,
            "endColumn" : 33
          },
          "contextRegion" : {
            "startLine" : 89,
            "endLine" : 93,
            "snippet" : {
              "text" : "\ndef rc4_decrypt(key: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(ARC4(key), mode=None).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "612898818882a89a:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "\ndef aes_ecb_encrypt(key: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=ECB()).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "81f6fa9c883052dc:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\ndef aes_ecb_decrypt(key: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=ECB()).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a703eb9f311575c:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 106,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 104,
            "endLine" : 108,
            "snippet" : {
              "text" : "\ndef aes_cbc_encrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=CBC(iv)).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c7badc60b711ca6:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
      "ruleIndex" : 7,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
        "index" : 7
      },
      "message" : {
        "text" : "Use of algorithm AES"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 111,
            "startColumn" : 24,
            "endColumn" : 32
          },
          "contextRegion" : {
            "startLine" : 109,
            "endLine" : 112,
            "snippet" : {
              "text" : "\ndef aes_cbc_decrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=CBC(iv)).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa7ebfd6b2bb3756:1",
        "primaryLocationStartColumnFingerprint" : "19"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 63,
            "startColumn" : 35,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 61,
            "endLine" : 65,
            "snippet" : {
              "text" : "        data = pad.update(data) + pad.finalize()\n\n        cipher = Cipher(self.alg, CBC(iv))\n        encryptor = cipher.encryptor()\n        return iv + encryptor.update(data) + encryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "115007eb8de7268b:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 79,
            "startColumn" : 35,
            "endColumn" : 42
          },
          "contextRegion" : {
            "startLine" : 77,
            "endLine" : 81,
            "snippet" : {
              "text" : "            data = pad.update(data) + pad.finalize()\n\n        cipher = Cipher(self.alg, CBC(iv))\n        decryptor = cipher.decryptor()\n        d = decryptor.update(data) + decryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2f7ad8dc8a6ea143:1",
        "primaryLocationStartColumnFingerprint" : "26"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 96,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 94,
            "endLine" : 98,
            "snippet" : {
              "text" : "\ndef aes_ecb_encrypt(key: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=ECB()).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "81f6fa9c883052dc:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm ECB"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 101,
            "startColumn" : 39,
            "endColumn" : 44
          },
          "contextRegion" : {
            "startLine" : 99,
            "endLine" : 103,
            "snippet" : {
              "text" : "\ndef aes_ecb_decrypt(key: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=ECB()).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1a703eb9f311575c:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 106,
            "startColumn" : 39,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 104,
            "endLine" : 108,
            "snippet" : {
              "text" : "\ndef aes_cbc_encrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    encryptor = Cipher(AES(key), mode=CBC(iv)).encryptor()\n    return encryptor.update(data) + encryptor.finalize()\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "2c7badc60b711ca6:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/block-cipher-mode",
      "ruleIndex" : 14,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/block-cipher-mode",
        "index" : 14
      },
      "message" : {
        "text" : "Use of algorithm CBC"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "pypdf/_crypt_providers/_cryptography.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 111,
            "startColumn" : 39,
            "endColumn" : 46
          },
          "contextRegion" : {
            "startLine" : 109,
            "endLine" : 112,
            "snippet" : {
              "text" : "\ndef aes_cbc_decrypt(key: bytes, iv: bytes, data: bytes) -> bytes:\n    decryptor = Cipher(AES(key), mode=CBC(iv)).decryptor()\n    return decryptor.update(data) + decryptor.finalize()\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "fa7ebfd6b2bb3756:1",
        "primaryLocationStartColumnFingerprint" : "34"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:py-pdf/pypdf/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}