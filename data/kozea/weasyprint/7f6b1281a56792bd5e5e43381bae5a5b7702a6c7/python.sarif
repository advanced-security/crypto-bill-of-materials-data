{
  "$schema" : "https://json.schemastore.org/sarif-2.1.0.json",
  "version" : "2.1.0",
  "runs" : [ {
    "tool" : {
      "driver" : {
        "name" : "CodeQL",
        "organization" : "GitHub",
        "semanticVersion" : "2.15.2",
        "notifications" : [ {
          "id" : "py/baseline/expected-extracted-files",
          "name" : "py/baseline/expected-extracted-files",
          "shortDescription" : {
            "text" : "Expected extracted files"
          },
          "fullDescription" : {
            "text" : "Files appearing in the source archive that are expected to be extracted."
          },
          "defaultConfiguration" : {
            "enabled" : true
          },
          "properties" : {
            "tags" : [ "expected-extracted-files", "telemetry" ]
          }
        } ],
        "rules" : [ {
          "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "name" : "py/quantum-readiness/cbom/unkown-iv-sources",
          "shortDescription" : {
            "text" : "Unknown Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potentially unknown sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/unkown-iv-sources",
            "kind" : "problem",
            "name" : "Unknown Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "name" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
          "shortDescription" : {
            "text" : "All Cryptographic Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic algorithms usage using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
            "kind" : "problem",
            "name" : "All Cryptographic Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Symmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with symmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with symmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/symmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Symmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/iv-sources",
          "name" : "py/quantum-readiness/cbom/iv-sources",
          "shortDescription" : {
            "text" : "Initialization Vector (IV) or nonces"
          },
          "fullDescription" : {
            "text" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential sources for initialization vectors (IV) or nonce used in block ciphers while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/iv-sources",
            "kind" : "problem",
            "name" : "Initialization Vector (IV) or nonces",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
          "shortDescription" : {
            "text" : "All Asymmetric Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "description" : "Finds all potential usage of asymmeric keys (RSA & ECC) using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-algorithms",
            "kind" : "problem",
            "name" : "All Asymmetric Algorithms",
            "preci" : "cbom\n       cryptography",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-exchange",
          "name" : "py/quantum-readiness/cbom/key-exchange",
          "shortDescription" : {
            "text" : "Key Exchange Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-exchange",
            "kind" : "problem",
            "name" : "Key Exchange Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/hash-algorithms",
          "name" : "py/quantum-readiness/cbom/hash-algorithms",
          "shortDescription" : {
            "text" : "Hash Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of cryptographic hash algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/hash-algorithms",
            "kind" : "problem",
            "name" : "Hash Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Symmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of symmetric encryption algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/symmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Symmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "name" : "py/quantum-readiness/cbom/asymmetric-key-generation",
          "shortDescription" : {
            "text" : "Known asymmetric key source generation"
          },
          "fullDescription" : {
            "text" : "Finds all known potential sources for asymmetric key generation while using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all known potential sources for asymmetric key generation while using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/asymmetric-key-generation",
            "kind" : "problem",
            "name" : "Known asymmetric key source generation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "name" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
          "shortDescription" : {
            "text" : "Asymmetric Padding Schemes"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of padding schemes used with asymmeric algorithms."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of padding schemes used with asymmeric algorithms.",
            "id" : "py/quantum-readiness/cbom/asymmetric-padding-schemes",
            "kind" : "problem",
            "name" : "Asymmetric Padding Schemes",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/key-derivation",
          "name" : "py/quantum-readiness/cbom/key-derivation",
          "shortDescription" : {
            "text" : "Key Derivation Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of key derivation using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of key derivation using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/key-derivation",
            "kind" : "problem",
            "name" : "Key Derivation Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/signing-algorithms",
          "name" : "py/quantum-readiness/cbom/signing-algorithms",
          "shortDescription" : {
            "text" : "Signing Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of signing algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of signing algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/signing-algorithms",
            "kind" : "problem",
            "name" : "Signing Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
          "shortDescription" : {
            "text" : "Authenticated Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of authenticated encryption schemes using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of authenticated encryption schemes using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/authenticated-encryption-algorithms",
            "kind" : "problem",
            "name" : "Authenticated Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "name" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
          "shortDescription" : {
            "text" : "Asymmetric Encryption Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of asymmeric keys for encryption or key exchange using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/all-asymmetric-encryption-algorithms",
            "kind" : "problem",
            "name" : "Asymmetric Encryption Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/block-cipher-mode",
          "name" : "py/quantum-readiness/cbom/block-cipher-mode",
          "shortDescription" : {
            "text" : "Block cipher mode of operation"
          },
          "fullDescription" : {
            "text" : "Finds all potential block cipher modes of operations using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential block cipher modes of operations using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/block-cipher-mode",
            "kind" : "problem",
            "name" : "Block cipher mode of operation",
            "precision" : "high",
            "problem.severity" : "error"
          }
        }, {
          "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "name" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
          "shortDescription" : {
            "text" : "Elliptic Curve Algorithms"
          },
          "fullDescription" : {
            "text" : "Finds all potential usage of elliptic curve algorithms using the supported libraries."
          },
          "defaultConfiguration" : {
            "enabled" : true,
            "level" : "error"
          },
          "properties" : {
            "tags" : [ "cbom", "cryptography" ],
            "description" : "Finds all potential usage of elliptic curve algorithms using the supported libraries.",
            "id" : "py/quantum-readiness/cbom/elliptic-curve-algorithms",
            "kind" : "problem",
            "name" : "Elliptic Curve Algorithms",
            "precision" : "high",
            "problem.severity" : "error"
          }
        } ]
      },
      "extensions" : [ {
        "name" : "codeql/python-queries",
        "semanticVersion" : "0.9.2+78fcbd07d654881d9d3395efc0ea371c392529de",
        "locations" : [ {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/",
          "description" : {
            "text" : "The QL pack root directory."
          }
        }, {
          "uri" : "file:///opt/hostedtoolcache/CodeQL/2.15.2/x64/codeql/qlpacks/codeql/python-queries/0.9.2/qlpack.yml",
          "description" : {
            "text" : "The QL pack definition file."
          }
        } ]
      } ]
    },
    "artifacts" : [ {
      "location" : {
        "uri" : "weasyprint/pdf/anchors.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 0
      }
    }, {
      "location" : {
        "uri" : "weasyprint/document.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 1
      }
    }, {
      "location" : {
        "uri" : "weasyprint/text/fonts.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 2
      }
    }, {
      "location" : {
        "uri" : "weasyprint/images.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 3
      }
    }, {
      "location" : {
        "uri" : "weasyprint/pdf/stream.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 4
      }
    }, {
      "location" : {
        "uri" : "tests/test_pdf.py",
        "uriBaseId" : "%SRCROOT%",
        "index" : 5
      }
    } ],
    "results" : [ {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/pdf/anchors.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 270,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 268,
            "endLine" : 272,
            "snippet" : {
              "text" : "            uncompressed_length = 0\n            stream = b''\n            md5 = hashlib.md5()\n            for data in iter(lambda: source.read(4096), b''):\n                uncompressed_length += len(data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9bf22f6a1975692:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/document.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "import functools\nimport io\nfrom hashlib import md5\nfrom pathlib import Path\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "569fd8b7b5d86eef:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/text/fonts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 3,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "\"\"\"Interface with external libraries managing fonts installed on the system.\"\"\"\n\nfrom hashlib import sha1\nfrom io import BytesIO\nfrom pathlib import Path\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "990981d1e8f1c78f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/images.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import math\nimport struct\nfrom hashlib import md5\nfrom io import BytesIO\nfrom itertools import cycle\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ccad016ce111c1f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/pdf/stream.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "import io\nfrom functools import lru_cache\nfrom hashlib import md5\n\nimport pydyf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "39b0ae72c8cc4133:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 603,
            "startColumn" : 26,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 601,
            "endLine" : 605,
            "snippet" : {
              "text" : "        ]\n    )\n    assert '<{}>'.format(hashlib.md5(b'hi there').hexdigest()).encode() in pdf\n    assert b'/F ()' in pdf\n    assert b'/UF (attachment.bin)' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1847f4c2c31dc739:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 609,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 607,
            "endLine" : 611,
            "snippet" : {
              "text" : "    assert b'/Desc <' + name.hex().encode() + b'>' in pdf\n\n    assert hashlib.md5(adata).hexdigest().encode() in pdf\n    assert os.path.basename(absolute_tmp_file).encode() in pdf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a0ca63cb20a85c05:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 612,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 610,
            "endLine" : 614,
            "snippet" : {
              "text" : "    assert os.path.basename(absolute_tmp_file).encode() in pdf\n\n    assert hashlib.md5(rdata).hexdigest().encode() in pdf\n    name = BOM_UTF16_BE + 'some file attachment äöü'.encode('utf-16-be')\n    assert b'/Desc <' + name.hex().encode() + b'>' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e2f50d1a2a3ae01d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 616,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 614,
            "endLine" : 618,
            "snippet" : {
              "text" : "    assert b'/Desc <' + name.hex().encode() + b'>' in pdf\n\n    assert hashlib.md5(b'oob attachment').hexdigest().encode() in pdf\n    assert b'/Desc (Hello)' in pdf\n    assert hashlib.md5(b'raw URL').hexdigest().encode() in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3af7a905ac0487f5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 618,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 616,
            "endLine" : 620,
            "snippet" : {
              "text" : "    assert hashlib.md5(b'oob attachment').hexdigest().encode() in pdf\n    assert b'/Desc (Hello)' in pdf\n    assert hashlib.md5(b'raw URL').hexdigest().encode() in pdf\n    assert hashlib.md5(b'file like obj').hexdigest().encode() in pdf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ec640957f4f1489:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 619,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 617,
            "endLine" : 621,
            "snippet" : {
              "text" : "    assert b'/Desc (Hello)' in pdf\n    assert hashlib.md5(b'raw URL').hexdigest().encode() in pdf\n    assert hashlib.md5(b'file like obj').hexdigest().encode() in pdf\n\n    assert b'/EmbeddedFiles' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8d79a9fb9422b8c2:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 632,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 630,
            "endLine" : 634,
            "snippet" : {
              "text" : "      <link rel=\"attachment\" href=\"data:,some data\">\n    ''').write_pdf()\n    md5 = '<{}>'.format(hashlib.md5(b'some data').hexdigest()).encode()\n    assert md5 in pdf\n    assert b'EmbeddedFiles' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f4248eca57b26628:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 646,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 644,
            "endLine" : 648,
            "snippet" : {
              "text" : "      <a href=\"#title\">example</a>\n    ''').write_pdf()\n    md5 = '<{}>'.format(hashlib.md5(b'some data').hexdigest()).encode()\n    assert md5 in pdf\n    assert b'EmbeddedFiles' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f4248eca57b26628:2",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
      "ruleIndex" : 1,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/all-cryptographic-algorithms",
        "index" : 1
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 697,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 695,
            "endLine" : 699,
            "snippet" : {
              "text" : "    ''').write_pdf()\n\n    assert hashlib.md5(b'some data').hexdigest().encode() in pdf\n    assert b'/FileAttachment' in pdf\n    assert b'/EmbeddedFiles' not in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b12de8fcb441c6c0:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/pdf/anchors.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 0
          },
          "region" : {
            "startLine" : 270,
            "startColumn" : 19,
            "endColumn" : 30
          },
          "contextRegion" : {
            "startLine" : 268,
            "endLine" : 272,
            "snippet" : {
              "text" : "            uncompressed_length = 0\n            stream = b''\n            md5 = hashlib.md5()\n            for data in iter(lambda: source.read(4096), b''):\n                uncompressed_length += len(data)\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "c9bf22f6a1975692:1",
        "primaryLocationStartColumnFingerprint" : "6"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/document.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 1
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "import functools\nimport io\nfrom hashlib import md5\nfrom pathlib import Path\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "569fd8b7b5d86eef:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm SHA1"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/text/fonts.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 2
          },
          "region" : {
            "startLine" : 3,
            "startColumn" : 21,
            "endColumn" : 25
          },
          "contextRegion" : {
            "startLine" : 1,
            "endLine" : 5,
            "snippet" : {
              "text" : "\"\"\"Interface with external libraries managing fonts installed on the system.\"\"\"\n\nfrom hashlib import sha1\nfrom io import BytesIO\nfrom pathlib import Path\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "990981d1e8f1c78f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/images.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 3
          },
          "region" : {
            "startLine" : 6,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 4,
            "endLine" : 8,
            "snippet" : {
              "text" : "import math\nimport struct\nfrom hashlib import md5\nfrom io import BytesIO\nfrom itertools import cycle\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "4ccad016ce111c1f:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "weasyprint/pdf/stream.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 4
          },
          "region" : {
            "startLine" : 5,
            "startColumn" : 21,
            "endColumn" : 24
          },
          "contextRegion" : {
            "startLine" : 3,
            "endLine" : 7,
            "snippet" : {
              "text" : "import io\nfrom functools import lru_cache\nfrom hashlib import md5\n\nimport pydyf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "39b0ae72c8cc4133:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 603,
            "startColumn" : 26,
            "endColumn" : 37
          },
          "contextRegion" : {
            "startLine" : 601,
            "endLine" : 605,
            "snippet" : {
              "text" : "        ]\n    )\n    assert '<{}>'.format(hashlib.md5(b'hi there').hexdigest()).encode() in pdf\n    assert b'/F ()' in pdf\n    assert b'/UF (attachment.bin)' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "1847f4c2c31dc739:1",
        "primaryLocationStartColumnFingerprint" : "21"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 609,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 607,
            "endLine" : 611,
            "snippet" : {
              "text" : "    assert b'/Desc <' + name.hex().encode() + b'>' in pdf\n\n    assert hashlib.md5(adata).hexdigest().encode() in pdf\n    assert os.path.basename(absolute_tmp_file).encode() in pdf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "a0ca63cb20a85c05:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 612,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 610,
            "endLine" : 614,
            "snippet" : {
              "text" : "    assert os.path.basename(absolute_tmp_file).encode() in pdf\n\n    assert hashlib.md5(rdata).hexdigest().encode() in pdf\n    name = BOM_UTF16_BE + 'some file attachment äöü'.encode('utf-16-be')\n    assert b'/Desc <' + name.hex().encode() + b'>' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "e2f50d1a2a3ae01d:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 616,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 614,
            "endLine" : 618,
            "snippet" : {
              "text" : "    assert b'/Desc <' + name.hex().encode() + b'>' in pdf\n\n    assert hashlib.md5(b'oob attachment').hexdigest().encode() in pdf\n    assert b'/Desc (Hello)' in pdf\n    assert hashlib.md5(b'raw URL').hexdigest().encode() in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "3af7a905ac0487f5:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 618,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 616,
            "endLine" : 620,
            "snippet" : {
              "text" : "    assert hashlib.md5(b'oob attachment').hexdigest().encode() in pdf\n    assert b'/Desc (Hello)' in pdf\n    assert hashlib.md5(b'raw URL').hexdigest().encode() in pdf\n    assert hashlib.md5(b'file like obj').hexdigest().encode() in pdf\n\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "5ec640957f4f1489:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 619,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 617,
            "endLine" : 621,
            "snippet" : {
              "text" : "    assert b'/Desc (Hello)' in pdf\n    assert hashlib.md5(b'raw URL').hexdigest().encode() in pdf\n    assert hashlib.md5(b'file like obj').hexdigest().encode() in pdf\n\n    assert b'/EmbeddedFiles' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "8d79a9fb9422b8c2:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 632,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 630,
            "endLine" : 634,
            "snippet" : {
              "text" : "      <link rel=\"attachment\" href=\"data:,some data\">\n    ''').write_pdf()\n    md5 = '<{}>'.format(hashlib.md5(b'some data').hexdigest()).encode()\n    assert md5 in pdf\n    assert b'EmbeddedFiles' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f4248eca57b26628:1",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 646,
            "startColumn" : 25,
            "endColumn" : 36
          },
          "contextRegion" : {
            "startLine" : 644,
            "endLine" : 648,
            "snippet" : {
              "text" : "      <a href=\"#title\">example</a>\n    ''').write_pdf()\n    md5 = '<{}>'.format(hashlib.md5(b'some data').hexdigest()).encode()\n    assert md5 in pdf\n    assert b'EmbeddedFiles' in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "f4248eca57b26628:2",
        "primaryLocationStartColumnFingerprint" : "20"
      }
    }, {
      "ruleId" : "py/quantum-readiness/cbom/hash-algorithms",
      "ruleIndex" : 6,
      "rule" : {
        "id" : "py/quantum-readiness/cbom/hash-algorithms",
        "index" : 6
      },
      "message" : {
        "text" : "Use of algorithm MD5"
      },
      "locations" : [ {
        "physicalLocation" : {
          "artifactLocation" : {
            "uri" : "tests/test_pdf.py",
            "uriBaseId" : "%SRCROOT%",
            "index" : 5
          },
          "region" : {
            "startLine" : 697,
            "startColumn" : 12,
            "endColumn" : 23
          },
          "contextRegion" : {
            "startLine" : 695,
            "endLine" : 699,
            "snippet" : {
              "text" : "    ''').write_pdf()\n\n    assert hashlib.md5(b'some data').hexdigest().encode() in pdf\n    assert b'/FileAttachment' in pdf\n    assert b'/EmbeddedFiles' not in pdf\n"
            }
          }
        }
      } ],
      "partialFingerprints" : {
        "primaryLocationLineHash" : "b12de8fcb441c6c0:1",
        "primaryLocationStartColumnFingerprint" : "7"
      }
    } ],
    "automationDetails" : {
      "id" : "CBOM:kozea/weasyprint/python/"
    },
    "columnKind" : "unicodeCodePoints",
    "properties" : {
      "semmle.formatSpecifier" : "sarifv2.1.0"
    }
  } ]
}